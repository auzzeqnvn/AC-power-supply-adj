;#include "ADE7753.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "delay.h"
;#include "scan_led.h"
;
;
;void    SPI_7753_SEND(unsigned char data)
; 0001 0007 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0008     unsigned char   cnt;
; 0001 0009     unsigned char   tmp = data;
; 0001 000A 
; 0001 000B     for(cnt = 0;cnt < 8; cnt++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	data -> Y+2
;	cnt -> R17
;	tmp -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 000C     {
; 0001 000D         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 000E         else SPI_MOSI_LOW;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0001 000F 
; 0001 0010         SPI_SCK_HIGHT;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0011         delay_us(50);
;PCODE: $00000029 VOL: 0
; 0001 0012         SPI_SCK_LOW;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0001 0013         delay_us(50);
;PCODE: $0000002C VOL: 0
; 0001 0014         tmp <<= 1;
;PCODE: $0000002D VOL: 0
; 0001 0015     }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0001 0016 }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;unsigned char    SPI_7753_RECEIVE(void)
; 0001 0019 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 001A     unsigned char cnt;
; 0001 001B     unsigned char data;
; 0001 001C     data = 0;
;PCODE: $00000039 VOL: 0
;	cnt -> R17
;	data -> R16
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0001 001D     for(cnt = 0;cnt < 8; cnt++)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 001E     {
; 0001 001F         data <<= 1;
;PCODE: $00000045 VOL: 0
; 0001 0020         SPI_SCK_HIGHT;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0021         delay_us(50);
;PCODE: $00000048 VOL: 0
; 0001 0022         if(SPI_MISO_HIGHT)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 0023         {
; 0001 0024             data += 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0025         }
; 0001 0026         SPI_SCK_LOW;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0027         delay_us(50);
;PCODE: $00000051 VOL: 0
; 0001 0028     }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 0029     return data;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 002A }
;PCODE: $0000005A VOL: 0
;
;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
; 0001 002D {
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0001 002E     unsigned char data[4];
; 0001 002F     unsigned char   i;
; 0001 0030     data[0] = data_1;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	IC_CS -> Y+10
;	addr -> Y+9
;	num_data -> Y+8
;	data_1 -> Y+7
;	data_2 -> Y+6
;	data_3 -> Y+5
;	data -> Y+1
;	i -> R17
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0031     data[1] = data_2;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0032     data[2] = data_3;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0033 
; 0001 0034     switch (IC_CS)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 0035     {
; 0001 0036         case 1:
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 0037         {
; 0001 0038             PHASE_1_ON;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0039             PHASE_2_OFF;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 003A             PHASE_3_OFF;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 003B             break;
;PCODE: $00000070 VOL: 0
; 0001 003C         }
; 0001 003D         case 2:
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 003E         {
; 0001 003F             PHASE_1_OFF;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 0040             PHASE_2_ON;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 0041             PHASE_3_OFF;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0042             break;
;PCODE: $0000007A VOL: 0
; 0001 0043         }
; 0001 0044         case 3:
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0001 0045         {
; 0001 0046             PHASE_1_OFF;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0047             PHASE_2_OFF;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 0048             PHASE_3_ON;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0049             break;
;PCODE: $00000084 VOL: 0
; 0001 004A         }
; 0001 004B     }
;PCODE: $00000085 VOL: 0
; 0001 004C     addr &= 0x3F;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 004D     addr |= 0x80;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0001 004E     delay_us(100);
;PCODE: $0000008C VOL: 0
; 0001 004F     SPI_7753_SEND(addr);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0050     delay_us(100);
;PCODE: $0000008F VOL: 0
; 0001 0051     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0001 0052 delay_us(100);
;PCODE: $000000A4 VOL: 0
; 0001 0053     PHASE_1_OFF;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 0054     PHASE_2_OFF;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0055     PHASE_3_OFF;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0056 }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
; 0001 0058 {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0001 0059     unsigned char   i;
; 0001 005A     unsigned char   data[4];
; 0001 005B     unsigned long int res;
; 0001 005C     for(i=0;i<4;i++)    data[i] = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;	IC_CS -> Y+11
;	addr -> Y+10
;	num_data -> Y+9
;	i -> R17
;	data -> Y+5
;	res -> Y+1
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 005D switch (IC_CS)
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0001 005E     {
; 0001 005F         case 1:
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0060         {
; 0001 0061             PHASE_1_ON;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 0062             PHASE_2_OFF;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 0063             PHASE_3_OFF;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 0064             break;
;PCODE: $000000D3 VOL: 0
; 0001 0065         }
; 0001 0066         case 2:
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0001 0067         {
; 0001 0068             PHASE_1_OFF;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 0069             PHASE_2_ON;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 006A             PHASE_3_OFF;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0001 006B             break;
;PCODE: $000000DD VOL: 0
; 0001 006C         }
; 0001 006D         case 3:
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 006E         {
; 0001 006F             PHASE_1_OFF;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 0070             PHASE_2_OFF;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0071             PHASE_3_ON;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0072             break;
;PCODE: $000000E7 VOL: 0
; 0001 0073         }
; 0001 0074     }
;PCODE: $000000E8 VOL: 0
; 0001 0075     delay_us(100);
;PCODE: $000000E9 VOL: 0
; 0001 0076     addr &= 0x3F;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0001 0077     SPI_7753_SEND(addr);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0001 0078     delay_us(100);
;PCODE: $000000EF VOL: 0
; 0001 0079     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 007A delay_us(100);
;PCODE: $00000106 VOL: 0
; 0001 007B     PHASE_1_OFF;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 007C     PHASE_2_OFF;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 007D     PHASE_3_OFF;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0001 007E     res = 0;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 007F     for(i=0;i<num_data;i++)
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 0080     {
; 0001 0081         res <<= 8;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0001 0082         res += data[i];
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0001 0083     }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 0084     return res;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0001 0085 }
;PCODE: $00000130 VOL: 0
;
;void    ADE7753_INIT(void)
; 0001 0088 {
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 0089     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 008A     delay_ms(200);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0001 008B     ADE7753_WRITE(1,IRQEN,0x00,0x10,0x00);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0001 008C     delay_ms(200);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 008D     ADE7753_WRITE(1,RSTSTATUS,0x00,0x00,0x00);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0001 008E     delay_ms(200);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0001 008F     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0001 0090     delay_ms(200);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0001 0091     ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0001 0092     delay_ms(200);
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0001 0093 }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
