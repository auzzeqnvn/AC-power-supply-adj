;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : AC_Power_Supply_Adj
;Version : 1.0
;Date    : 12/1/2018
;Author  :
;Company :
;Comments:
;Dieu che dien ap xoay chieu 35VAC
;
;
;Chip type               : ATmega88P
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega88p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "ADE7753.h"
;#include "scan_led.h"
;#include <delay.h>
;
;
;#define ADC1    2
;#define ADC_SET_VOLTAGE    1
;#define ADC3    4
;
;#define BUZZER  PORTC.5
;
;#define BUZZER_ON   BUZZER = 1
;#define BUZZER_OFF  BUZZER = 0
;
;#define PHASE_1 PORTB.1
;#define PHASE_2 PORTB.2
;
;#define VOLTAGE_RATIO   6045//3831//4139
;#define CURRENT_RATIO   566
;
;// #define STEP_1  1.315789
;// #define STEP_2  1.298701
;// #define STEP_3  1.226994
;// #define STEP_4  1.190476
;// #define STEP_5  1.123596
;// #define STEP_6  1
;
;#define CALIB   0
;#define CALIB2   1
;
;#define NUM_SAMPLE  30
;#define NUM_FILTER  7
;
;#define TIME_UPDATE_DISPLAY  200
;#define SPEED_BUZZER    200
;// Declare your global variables here
;unsigned long   Ul_Voltage_Buff[NUM_SAMPLE];
;unsigned long   Ul_Current_Buff[NUM_SAMPLE];
;
;
;unsigned int    Uint_Voltage;
;unsigned int    Uint_Current;
;
;unsigned char   Uc_Buff_Count = 0;
;
;unsigned char   Uc_Buzzer_Count;
;
;bit Bit_En_Meas = 0;
;
;unsigned int   Uc_Voltage_Duty = 0;
;
;unsigned int   Uc_Timer_Update_Display=0;
;
;void    PWM_PHASE1(unsigned int duty);
;void    PWM_PHASE2(unsigned int duty);
;
;// Voltage Reference: Int., cap. on AREF
;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0056 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0057     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0058     // Delay needed for the stabilization of the ADC input voltage
; 0000 0059     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 005A     // Start the AD conversion
; 0000 005B     ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 005C     // Wait for the AD conversion to complete
; 0000 005D     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 005E     ADCSRA|=(1<<ADIF);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005F     return ADCW;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0060 }
;PCODE: $00000023 VOL: 0
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0063 {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0064     // Reinitialize Timer2 value
; 0000 0065     TCNT2=0x7E;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0066      if(Uc_Timer_Update_Display < TIME_UPDATE_DISPLAY)   Uc_Timer_Update_Display++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0067     // Place your code here
; 0000 0068     SCAN_LED();
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0069     Uc_Buzzer_Count++;
;PCODE: $00000030 VOL: 0
; 0000 006A     if(Uc_Buzzer_Count > SPEED_BUZZER)      Uc_Buzzer_Count = 0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 006B     Bit_En_Meas = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006C 
; 0000 006D }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;void    PWM_PHASE1(unsigned int duty)
; 0000 0070 {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0071     if(duty <= 1)
;PCODE: $0000003D VOL: 0
;	duty -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0072     {
; 0000 0073         OCR1AH=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0074         OCR1AL=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0075     }
; 0000 0076     else
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0077     {
; 0000 0078         OCR1AH=(duty>>8) & 0xff;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0079         OCR1AL= duty & 0xff;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007A     }
;PCODE: $0000004C VOL: 0
; 0000 007B }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;
;void    PWM_PHASE2(unsigned int duty)
; 0000 007E {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007F     if(duty <= 1)
;PCODE: $00000052 VOL: 0
;	duty -> Y+0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0080     {
; 0000 0081         OCR1BH=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0082         OCR1BL=0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0083     }
; 0000 0084     else
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0085     {
; 0000 0086         OCR1BH=(duty>>8) & 0xff;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0087         OCR1BL=duty & 0xff;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0088     }
;PCODE: $00000061 VOL: 0
; 0000 0089 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;void    CONTROL_VOLTAGE(void)
; 0000 008C {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008D     unsigned int    Uint_Vr_Set_Voltage;
; 0000 008E 
; 0000 008F     Uint_Vr_Set_Voltage = read_adc(ADC_SET_VOLTAGE);
;PCODE: $00000067 VOL: 0
;	Uint_Vr_Set_Voltage -> R16,R17
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0090     Uc_Voltage_Duty = (unsigned int)((unsigned long)Uint_Vr_Set_Voltage*255/1023);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0091     PWM_PHASE2(Uc_Voltage_Duty);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0092     PWM_PHASE1(Uc_Voltage_Duty);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0093     // Uint_data_led1 = Uc_Voltage_Duty;
; 0000 0094     // Uint_data_led2 = Uint_Vr_Set_Voltage;
; 0000 0095 }
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;/*
;Doc thong so dien ap va dong dien, loc nhieu.
;Loc nhieu va tinh toan ra gia tri thuc cua dong dien va dien ap.
;Cap nhat cac thong so len led hien thi
;*/
;void    READ_CURRENT_INFO(void)
; 0000 009C {
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009D     unsigned long   Ul_Buff[NUM_SAMPLE];
; 0000 009E     unsigned char   Uc_loop = 0,Uc_loop2 = 0;
; 0000 009F     unsigned long   Ul_temp;
; 0000 00A0 
; 0000 00A1     Ul_Voltage_Buff[Uc_Buff_Count] = ADE7753_READ(1,VRMS);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	Ul_Buff -> Y+6
;	Uc_loop -> R17
;	Uc_loop2 -> R16
;	Ul_temp -> Y+2
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A2     delay_ms(10);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A3     /* Tinh toan va loc nhieu gia tri dien ap */
; 0000 00A4     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A5     {
; 0000 00A6         Ul_Buff[Uc_loop] = Ul_Voltage_Buff[Uc_loop];
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A7     }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A8     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A9     {
; 0000 00AA         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AB         {
; 0000 00AC             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00AD             {
; 0000 00AE                 Ul_temp = Ul_Buff[Uc_loop];
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00AF                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B0                 Ul_Buff[Uc_loop2] = Ul_temp;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B1             }
; 0000 00B2         }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B3     }
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00B4     Ul_temp = 0;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B5     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B6     {
; 0000 00B7         Ul_temp += Ul_Buff[Uc_loop];
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00B8     }
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00B9     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00BA 
; 0000 00BB     #if CALIB
; 0000 00BC     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
; 0000 00BD     {
; 0000 00BE         Uint_data_led1 = Ul_temp /10000;
; 0000 00BF         Uint_data_led2 = Ul_temp %10000;
; 0000 00C0     }
; 0000 00C1     #endif
; 0000 00C2     Uint_Voltage = (unsigned int)((float)Ul_temp/VOLTAGE_RATIO);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C3 
; 0000 00C4     // #if !CALIB2
; 0000 00C5     // if(Uint_Voltage < 50)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*STEP_1));
; 0000 00C6     // else if(Uint_Voltage < 100)     Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_1 - (Uint_Volta ...
; 0000 00C7     // else if(Uint_Voltage < 200)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_2 - (Uint_Voltage ...
; 0000 00C8     // else if(Uint_Voltage < 300)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_3 - (Uint_Voltage ...
; 0000 00C9     // else if(Uint_Voltage < 400)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_4 - (Uint_Voltage ...
; 0000 00CA     // else if(Uint_Voltage < 500)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_5 - (Uint_Voltage ...
; 0000 00CB     // #endif
; 0000 00CC 
; 0000 00CD     #if !CALIB
; 0000 00CE     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)    Uint_data_led1 = Uint_Voltage;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00CF     #endif
; 0000 00D0     if(Uint_Voltage > 380)
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00D1     {
; 0000 00D2         Bit_Led1_Warning = 1;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00D3     }
; 0000 00D4     else    Bit_Led1_Warning = 0;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00D5 
; 0000 00D6     Ul_Current_Buff[Uc_Buff_Count] = ADE7753_READ(1,IRMS);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00D7     delay_ms(10);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00D8     /* Tinh toan va loc nhieu gia tri dong dien */
; 0000 00D9     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00DA     {
; 0000 00DB         Ul_Buff[Uc_loop] = Ul_Current_Buff[Uc_loop];
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00DC     }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00DD     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00DE     {
; 0000 00DF         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E0         {
; 0000 00E1             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00E2             {
; 0000 00E3                 Ul_temp = Ul_Buff[Uc_loop];
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00E4                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00E5                 Ul_Buff[Uc_loop2] = Ul_temp;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00E6             }
; 0000 00E7         }
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00E8     }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00E9     Ul_temp = 0;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 00EA     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00EB     {
; 0000 00EC         Ul_temp += Ul_Buff[Uc_loop];
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00ED     }
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00EE     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00EF     Uint_Current = (unsigned int)((float)Ul_temp/CURRENT_RATIO);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00F0     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00F1     {
; 0000 00F2         #if !CALIB
; 0000 00F3         Uint_data_led2 = Uint_Current;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00F4         #endif
; 0000 00F5         Uc_Timer_Update_Display = 0;
;PCODE: $000001CB VOL: 0
; 0000 00F6     }
; 0000 00F7     if(Uint_Current > 550)  Bit_Led2_Warning = 1;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 00F8     else    Bit_Led2_Warning = 0;
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00F9 
; 0000 00FA 
; 0000 00FB     Uc_Buff_Count++;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00FC     if(Uc_Buff_Count >= NUM_SAMPLE) Uc_Buff_Count = 0;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00FD }
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;
;void main(void)
; 0000 0100 {
;PCODE: $000001E1 VOL: 0
; 0000 0101 // Declare your local variables here
; 0000 0102 
; 0000 0103 // Crystal Oscillator division factor: 1
; 0000 0104 #pragma optsize-
; 0000 0105 CLKPR=(1<<CLKPCE);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0106 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0107 #ifdef _OPTIMIZE_SIZE_
; 0000 0108 #pragma optsize+
; 0000 0109 #endif
; 0000 010A 
; 0000 010B // Input/Output Ports initialization
; 0000 010C // Port B initialization
; 0000 010D // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=Out
; 0000 010E DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 010F // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=0
; 0000 0110 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0111 
; 0000 0112 // Port C initialization
; 0000 0113 // Function: Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
; 0000 0114 DDRC=(0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0115 // State: Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
; 0000 0116 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0117 
; 0000 0118 // Port D initialization
; 0000 0119 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 011A DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 011B // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 011C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 011D 
; 0000 011E 
; 0000 011F // Timer/Counter 0 initialization
; 0000 0120 // Clock source: System Clock
; 0000 0121 // Clock value: Timer 0 Stopped
; 0000 0122 // Mode: Normal top=0xFF
; 0000 0123 // OC0A output: Disconnected
; 0000 0124 // OC0B output: Disconnected
; 0000 0125 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0126 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0127 TCNT0=0x00;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0128 OCR0A=0x00;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0129 OCR0B=0x00;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 012A 
; 0000 012B // Timer/Counter 1 initialization
; 0000 012C // Clock source: System Clock
; 0000 012D // Clock value: 20000.000 kHz
; 0000 012E // Mode: Ph. correct PWM top=0x01FF
; 0000 012F // OC1A output: Non-Inverted PWM
; 0000 0130 // OC1B output: Inverted PWM
; 0000 0131 // Noise Canceler: Off
; 0000 0132 // Input Capture on Falling Edge
; 0000 0133 // Timer Period: 0.0511 ms
; 0000 0134 // Output Pulse(s):
; 0000 0135 // OC1A Period: 0.0511 ms Width: 0 us
; 0000 0136 // OC1B Period: 0.0511 ms Width: 0.0511 ms
; 0000 0137 // Timer1 Overflow Interrupt: Off
; 0000 0138 // Input Capture Interrupt: Off
; 0000 0139 // Compare A Match Interrupt: Off
; 0000 013A // Compare B Match Interrupt: Off
; 0000 013B TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (1<<WGM10);
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 013C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 013D TCNT1H=0x00;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 013E TCNT1L=0x00;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 013F ICR1H=0x00;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0140 ICR1L=0x00;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0141 OCR1AH=0x00;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0142 OCR1AL=0x00;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0143 OCR1BH=0x00;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0144 OCR1BL=0x00;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 0145 
; 0000 0146 // Timer/Counter 2 initialization
; 0000 0147 // Clock source: System Clock
; 0000 0148 // Clock value: 43,200 kHz
; 0000 0149 // Mode: Normal top=0xFF
; 0000 014A // OC2A output: Disconnected
; 0000 014B // OC2B output: Disconnected
; 0000 014C // Timer Period: 3,0093 ms
; 0000 014D ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 014E TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 014F TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0150 TCNT2=0x7E;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0151 OCR2A=0x00;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0152 OCR2B=0x00;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0153 
; 0000 0154 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0155 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0156 
; 0000 0157 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0158 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0159 
; 0000 015A // Timer/Counter 2 Interrupt(s) initialization
; 0000 015B TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 015C 
; 0000 015D // External Interrupt(s) initialization
; 0000 015E // INT0: Off
; 0000 015F // INT1: Off
; 0000 0160 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0161 // Interrupt on any change on pins PCINT8-14: Off
; 0000 0162 // Interrupt on any change on pins PCINT16-23: Off
; 0000 0163 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0164 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0165 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0166 
; 0000 0167 // USART initialization
; 0000 0168 // USART disabled
; 0000 0169 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 016A 
; 0000 016B // Analog Comparator initialization
; 0000 016C // Analog Comparator: Off
; 0000 016D // The Analog Comparator's positive input is
; 0000 016E // connected to the AIN0 pin
; 0000 016F // The Analog Comparator's negative input is
; 0000 0170 // connected to the AIN1 pin
; 0000 0171 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0172 // Digital input buffer on AIN0: On
; 0000 0173 // Digital input buffer on AIN1: On
; 0000 0174 DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0175 
; 0000 0176 // ADC initialization
; 0000 0177 // ADC Clock frequency: 691,200 kHz
; 0000 0178 // ADC Voltage Reference: Int., cap. on AREF
; 0000 0179 // ADC Auto Trigger Source: ADC Stopped
; 0000 017A // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
; 0000 017B // ADC4: On, ADC5: On
; 0000 017C DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 017D ADMUX=ADC_VREF_TYPE;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 017E ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 017F ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0180 
; 0000 0181 
; 0000 0182 // SPI initialization
; 0000 0183 // SPI disabled
; 0000 0184 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0185 
; 0000 0186 // TWI initialization
; 0000 0187 // TWI disabled
; 0000 0188 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0189 // Global enable interrupts
; 0000 018A #asm("sei")
;PCODE: $0000023A VOL: 0
	sei
;PCODE: $0000023B VOL: 0
; 0000 018B 
; 0000 018C ADE7753_INIT();
;PCODE: $0000023C VOL: 0
; 0000 018D PWM_PHASE2(255);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 018E PWM_PHASE1(255);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 018F for(Uc_Buff_Count = 0; Uc_Buff_Count < NUM_SAMPLE; Uc_Buff_Count++)
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0190 {
; 0000 0191     Ul_Voltage_Buff[Uc_Buff_Count] = 0;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0192     Ul_Current_Buff[Uc_Buff_Count] = 0;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0193 }
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0194 Uc_Buff_Count = 0;
;PCODE: $0000025C VOL: 0
; 0000 0195 delay_ms(2000);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0196 BUZZER_ON;
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0197 delay_ms(100);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0198 BUZZER_OFF;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 0199 delay_ms(100);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 019A BUZZER_ON;
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 019B delay_ms(100);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 019C BUZZER_OFF;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 019D while (1)
;PCODE: $00000270 VOL: 0
; 0000 019E       {
; 0000 019F       // Place your code here
; 0000 01A0         if(Bit_En_Meas)
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 01A1         {
; 0000 01A2                 Bit_En_Meas = 0;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 01A3                 READ_CURRENT_INFO();
;PCODE: $00000276 VOL: 0
; 0000 01A4         }
; 0000 01A5         CONTROL_VOLTAGE();
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 01A6         if(Bit_Led2_Warning == 1 || Bit_Led1_Warning)
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01A7         {
; 0000 01A8             if(Uc_Buzzer_Count < SPEED_BUZZER/2)   BUZZER_ON;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01A9             else    BUZZER_OFF;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 01AA         }
;PCODE: $0000028A VOL: 0
; 0000 01AB         else    BUZZER_OFF;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01AC       }
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01AD }
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
