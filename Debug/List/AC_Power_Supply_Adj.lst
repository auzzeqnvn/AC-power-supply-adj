
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm Wed Dec 05 16:01:35 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1092): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1095): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1097): warning: Register r14 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega88P
                 ;Program type           : Application
                 ;Clock frequency        : 24,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega88P
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uint_Voltage=R5
                 	.DEF _Uint_Voltage_msb=R6
                 	.DEF _Uint_Current=R7
                 	.DEF _Uint_Current_msb=R8
                 	.DEF _Uc_Buff_Count=R10
                 	.DEF _Uc_Buzzer_Count=R9
                 	.DEF _Uc_Voltage_Duty=R11
                 	.DEF _Uc_Voltage_Duty_msb=R12
                 	.DEF _Uc_Timer_Update_Display=R13
                 	.DEF _Uc_Timer_Update_Display_msb=R14
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02d      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c06e      	RJMP _timer2_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0000
00001b 0000      	.DB  0x0,0x0,0x0,0x0
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1139): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 
                 _0x40003:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1142): warning: .cseg .db misalignment - padding zero byte
00001d 0001      	.DB  0x1
                 _0x40004:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1144): warning: .cseg .db misalignment - padding zero byte
00001e 0001      	.DB  0x1
                 _0x40005:
00001f 88ee
000020 bcb6
000021 7cd8
000022 a87e      	.DB  0xEE,0x88,0xB6,0xBC,0xD8,0x7C,0x7E,0xA8
000023 fcfe      	.DB  0xFE,0xFC
                 
                 __GLOBAL_INI_TBL:
000024 0005      	.DW  0x05
000025 000a      	.DW  0x0A
000026 0034      	.DW  __REG_VARS*2
                 
000027 0001      	.DW  0x01
000028 02f4      	.DW  _Uc_Select_led
000029 003c      	.DW  _0x40004*2
                 
00002a 000a      	.DW  0x0A
00002b 02f7      	.DW  _BCDLED
00002c 003e      	.DW  _0x40005*2
                 
                 _0xFFFFFFFF:
00002d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002e 94f8      	CLI
00002f 27ee      	CLR  R30
000030 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000031 e0f1      	LDI  R31,1
000032 bff5      	OUT  MCUCR,R31
000033 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000034 e08d      	LDI  R24,(14-2)+1
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003c e0a0      	LDI  R26,LOW(__SRAM_START)
00003d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00003e 93ed      	ST   X+,R30
00003f 9701      	SBIW R24,1
000040 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000041 e4e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000042 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000043 9185      	LPM  R24,Z+
000044 9195      	LPM  R25,Z+
000045 9700      	SBIW R24,0
000046 f061      	BREQ __GLOBAL_INI_END
000047 91a5      	LPM  R26,Z+
000048 91b5      	LPM  R27,Z+
000049 9005      	LPM  R0,Z+
00004a 9015      	LPM  R1,Z+
00004b 01bf      	MOVW R22,R30
00004c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004d 9005      	LPM  R0,Z+
00004e 920d      	ST   X+,R0
00004f 9701      	SBIW R24,1
000050 f7e1      	BRNE __GLOBAL_INI_LOOP
000051 01fb      	MOVW R30,R22
000052 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000053 e0e0      	LDI  R30,__GPIOR0_INIT
000054 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000055 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000056 bfed      	OUT  SPL,R30
000057 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000058 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000059 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005b c219      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : AC_Power_Supply_Adj
                 ;Version : 1.0
                 ;Date    : 12/1/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Dieu che dien ap xoay chieu 35VAC
                 ;
                 ;
                 ;Chip type               : ATmega88P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega88p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include "ADE7753.h"
                 ;#include "scan_led.h"
                 ;#include <delay.h>
                 ;
                 ;
                 ;#define ADC1    2
                 ;#define ADC_SET_VOLTAGE    1
                 ;#define ADC3    4
                 ;
                 ;#define BUZZER  PORTC.5
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;#define PHASE_1 PORTB.1
                 ;#define PHASE_2 PORTB.2
                 ;
                 ;#define VOLTAGE_RATIO   6045//3831//4139
                 ;#define CURRENT_RATIO   566
                 ;
                 ;// #define STEP_1  1.315789
                 ;// #define STEP_2  1.298701
                 ;// #define STEP_3  1.226994
                 ;// #define STEP_4  1.190476
                 ;// #define STEP_5  1.123596
                 ;// #define STEP_6  1
                 ;
                 ;#define CALIB   0
                 ;#define CALIB2   1
                 ;
                 ;#define NUM_SAMPLE  30
                 ;#define NUM_FILTER  7
                 ;
                 ;#define TIME_UPDATE_DISPLAY  200
                 ;#define SPEED_BUZZER    200
                 ;// Declare your global variables here
                 ;unsigned long   Ul_Voltage_Buff[NUM_SAMPLE];
                 ;unsigned long   Ul_Current_Buff[NUM_SAMPLE];
                 ;
                 ;
                 ;unsigned int    Uint_Voltage;
                 ;unsigned int    Uint_Current;
                 ;
                 ;unsigned char   Uc_Buff_Count = 0;
                 ;
                 ;unsigned char   Uc_Buzzer_Count;
                 ;
                 ;bit Bit_En_Meas = 0;
                 ;
                 ;unsigned int   Uc_Voltage_Duty = 0;
                 ;
                 ;unsigned int   Uc_Timer_Update_Display=0;
                 ;
                 ;void    PWM_PHASE1(unsigned int duty);
                 ;void    PWM_PHASE2(unsigned int duty);
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0056 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0057     ADMUX=adc_input | ADC_VREF_TYPE;
00005c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00005d 81e8      	LD   R30,Y
00005e 6ce0      	ORI  R30,LOW(0xC0)
00005f 93e0 007c 	STS  124,R30
                 ; 0000 0058     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0059     delay_us(10);
                +
000061 e580     +LDI R24 , LOW ( 80 )
                +__DELAY_USB_LOOP :
000062 958a     +DEC R24
000063 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 80
                 ; 0000 005A     // Start the AD conversion
                 ; 0000 005B     ADCSRA|=(1<<ADSC);
000064 91e0 007a 	LDS  R30,122
000066 64e0      	ORI  R30,0x40
000067 93e0 007a 	STS  122,R30
                 ; 0000 005C     // Wait for the AD conversion to complete
                 ; 0000 005D     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000069 91e0 007a 	LDS  R30,122
00006b 71e0      	ANDI R30,LOW(0x10)
00006c f3e1      	BREQ _0x3
                 ; 0000 005E     ADCSRA|=(1<<ADIF);
00006d 91e0 007a 	LDS  R30,122
00006f 61e0      	ORI  R30,0x10
000070 93e0 007a 	STS  122,R30
                 ; 0000 005F     return ADCW;
000072 91e0 0078 	LDS  R30,120
000074 91f0 0079 	LDS  R31,120+1
000076 9621      	ADIW R28,1
000077 9508      	RET
                 ; 0000 0060 }
                 ; .FEND
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0063 {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000078 920a      	ST   -Y,R0
000079 921a      	ST   -Y,R1
00007a 92fa      	ST   -Y,R15
00007b 936a      	ST   -Y,R22
00007c 937a      	ST   -Y,R23
00007d 938a      	ST   -Y,R24
00007e 939a      	ST   -Y,R25
00007f 93aa      	ST   -Y,R26
000080 93ba      	ST   -Y,R27
000081 93ea      	ST   -Y,R30
000082 93fa      	ST   -Y,R31
000083 b7ef      	IN   R30,SREG
000084 93ea      	ST   -Y,R30
                 ; 0000 0064     // Reinitialize Timer2 value
                 ; 0000 0065     TCNT2=0x7E;
000085 e7ee      	LDI  R30,LOW(126)
000086 93e0 00b2 	STS  178,R30
                 ; 0000 0066      if(Uc_Timer_Update_Display < TIME_UPDATE_DISPLAY)   Uc_Timer_Update_Display++;
000088 ece8      	LDI  R30,LOW(200)
000089 e0f0      	LDI  R31,HIGH(200)
00008a 16de      	CP   R13,R30
00008b 06ef      	CPC  R14,R31
00008c f420      	BRSH _0x6
00008d e0e1      	LDI  R30,LOW(1)
00008e e0f0      	LDI  R31,HIGH(1)
                +
00008f 0ede     +ADD R13 , R30
000090 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
                 ; 0000 0067     // Place your code here
                 ; 0000 0068     SCAN_LED();
                 _0x6:
000091 d3d3      	RCALL _SCAN_LED
                 ; 0000 0069     Uc_Buzzer_Count++;
000092 9493      	INC  R9
                 ; 0000 006A     if(Uc_Buzzer_Count > SPEED_BUZZER)      Uc_Buzzer_Count = 0;
000093 ece8      	LDI  R30,LOW(200)
000094 15e9      	CP   R30,R9
000095 f408      	BRSH _0x7
000096 2499      	CLR  R9
                 ; 0000 006B     Bit_En_Meas = 1;
                 _0x7:
000097 9af2      	SBI  0x1E,2
                 ; 0000 006C 
                 ; 0000 006D }
000098 91e9      	LD   R30,Y+
000099 bfef      	OUT  SREG,R30
00009a 91f9      	LD   R31,Y+
00009b 91e9      	LD   R30,Y+
00009c 91b9      	LD   R27,Y+
00009d 91a9      	LD   R26,Y+
00009e 9199      	LD   R25,Y+
00009f 9189      	LD   R24,Y+
0000a0 9179      	LD   R23,Y+
0000a1 9169      	LD   R22,Y+
0000a2 90f9      	LD   R15,Y+
0000a3 9019      	LD   R1,Y+
0000a4 9009      	LD   R0,Y+
0000a5 9518      	RETI
                 ; .FEND
                 ;
                 ;void    PWM_PHASE1(unsigned int duty)
                 ; 0000 0070 {
                 _PWM_PHASE1:
                 ; .FSTART _PWM_PHASE1
                 ; 0000 0071     if(duty <= 1)
0000a6 93ba      	ST   -Y,R27
0000a7 93aa      	ST   -Y,R26
                 ;	duty -> Y+0
0000a8 81a8      	LD   R26,Y
0000a9 81b9      	LDD  R27,Y+1
0000aa 9712      	SBIW R26,2
0000ab f420      	BRSH _0xA
                 ; 0000 0072     {
                 ; 0000 0073         OCR1AH=0x00;
0000ac e0e0      	LDI  R30,LOW(0)
0000ad 93e0 0089 	STS  137,R30
                 ; 0000 0074         OCR1AL=0;
0000af c004      	RJMP _0x55
                 ; 0000 0075     }
                 ; 0000 0076     else
                 _0xA:
                 ; 0000 0077     {
                 ; 0000 0078         OCR1AH=(duty>>8) & 0xff;
0000b0 81e9      	LDD  R30,Y+1
0000b1 93e0 0089 	STS  137,R30
                 ; 0000 0079         OCR1AL= duty & 0xff;
0000b3 81e8      	LD   R30,Y
                 _0x55:
0000b4 93e0 0088 	STS  136,R30
                 ; 0000 007A     }
                 ; 0000 007B }
0000b6 c010      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void    PWM_PHASE2(unsigned int duty)
                 ; 0000 007E {
                 _PWM_PHASE2:
                 ; .FSTART _PWM_PHASE2
                 ; 0000 007F     if(duty <= 1)
0000b7 93ba      	ST   -Y,R27
0000b8 93aa      	ST   -Y,R26
                 ;	duty -> Y+0
0000b9 81a8      	LD   R26,Y
0000ba 81b9      	LDD  R27,Y+1
0000bb 9712      	SBIW R26,2
0000bc f420      	BRSH _0xC
                 ; 0000 0080     {
                 ; 0000 0081         OCR1BH=0x00;
0000bd e0e0      	LDI  R30,LOW(0)
0000be 93e0 008b 	STS  139,R30
                 ; 0000 0082         OCR1BL=0;
0000c0 c004      	RJMP _0x56
                 ; 0000 0083     }
                 ; 0000 0084     else
                 _0xC:
                 ; 0000 0085     {
                 ; 0000 0086         OCR1BH=(duty>>8) & 0xff;
0000c1 81e9      	LDD  R30,Y+1
0000c2 93e0 008b 	STS  139,R30
                 ; 0000 0087         OCR1BL=duty & 0xff;
0000c4 81e8      	LD   R30,Y
                 _0x56:
0000c5 93e0 008a 	STS  138,R30
                 ; 0000 0088     }
                 ; 0000 0089 }
                 _0x2000003:
0000c7 9622      	ADIW R28,2
0000c8 9508      	RET
                 ; .FEND
                 ;
                 ;void    CONTROL_VOLTAGE(void)
                 ; 0000 008C {
                 _CONTROL_VOLTAGE:
                 ; .FSTART _CONTROL_VOLTAGE
                 ; 0000 008D     unsigned int    Uint_Vr_Set_Voltage;
                 ; 0000 008E 
                 ; 0000 008F     Uint_Vr_Set_Voltage = read_adc(ADC_SET_VOLTAGE);
0000c9 d668      	RCALL __SAVELOCR2
                 ;	Uint_Vr_Set_Voltage -> R16,R17
0000ca e0a1      	LDI  R26,LOW(1)
0000cb df90      	RCALL _read_adc
0000cc 018f      	MOVW R16,R30
                 ; 0000 0090     Uc_Voltage_Duty = (unsigned int)((unsigned long)Uint_Vr_Set_Voltage*255/1023);
0000cd 01d8      	MOVW R26,R16
0000ce 2788      	CLR  R24
0000cf 2799      	CLR  R25
                +
0000d0 efef     +LDI R30 , LOW ( 0xFF )
0000d1 e0f0     +LDI R31 , HIGH ( 0xFF )
0000d2 e060     +LDI R22 , BYTE3 ( 0xFF )
0000d3 e070     +LDI R23 , BYTE4 ( 0xFF )
                 	__GETD1N 0xFF
0000d4 d5e9      	RCALL __MULD12U
0000d5 01df      	MOVW R26,R30
0000d6 01cb      	MOVW R24,R22
                +
0000d7 efef     +LDI R30 , LOW ( 0x3FF )
0000d8 e0f3     +LDI R31 , HIGH ( 0x3FF )
0000d9 e060     +LDI R22 , BYTE3 ( 0x3FF )
0000da e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0000db d615      	RCALL __DIVD21U
                +
0000dc 2ebe     +MOV R11 , R30
0000dd 2ecf     +MOV R12 , R31
                 	__PUTW1R 11,12
                 ; 0000 0091     PWM_PHASE2(Uc_Voltage_Duty);
                +
0000de 2dab     +MOV R26 , R11
0000df 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
0000e0 dfd6      	RCALL _PWM_PHASE2
                 ; 0000 0092     PWM_PHASE1(Uc_Voltage_Duty);
                +
0000e1 2dab     +MOV R26 , R11
0000e2 2dbc     +MOV R27 , R12
                 	__GETW2R 11,12
0000e3 dfc2      	RCALL _PWM_PHASE1
                 ; 0000 0093     // Uint_data_led1 = Uc_Voltage_Duty;
                 ; 0000 0094     // Uint_data_led2 = Uint_Vr_Set_Voltage;
                 ; 0000 0095 }
0000e4 c26a      	RJMP _0x2000002
                 ; .FEND
                 ;/*
                 ;Doc thong so dien ap va dong dien, loc nhieu.
                 ;Loc nhieu va tinh toan ra gia tri thuc cua dong dien va dien ap.
                 ;Cap nhat cac thong so len led hien thi
                 ;*/
                 ;void    READ_CURRENT_INFO(void)
                 ; 0000 009C {
                 _READ_CURRENT_INFO:
                 ; .FSTART _READ_CURRENT_INFO
                 ; 0000 009D     unsigned long   Ul_Buff[NUM_SAMPLE];
                 ; 0000 009E     unsigned char   Uc_loop = 0,Uc_loop2 = 0;
                 ; 0000 009F     unsigned long   Ul_temp;
                 ; 0000 00A0 
                 ; 0000 00A1     Ul_Voltage_Buff[Uc_Buff_Count] = ADE7753_READ(1,VRMS);
0000e5 97ef      	SBIW R28,63
0000e6 97ed      	SBIW R28,61
0000e7 d64a      	RCALL __SAVELOCR2
                 ;	Ul_Buff -> Y+6
                 ;	Uc_loop -> R17
                 ;	Uc_loop2 -> R16
                 ;	Ul_temp -> Y+2
0000e8 e010      	LDI  R17,0
0000e9 e000      	LDI  R16,0
0000ea 2dea      	MOV  R30,R10
0000eb e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
0000ec e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
0000ed e0f0      	LDI  R31,0
0000ee d5c5      	RCALL __LSLW2
0000ef 0fea      	ADD  R30,R26
0000f0 1ffb      	ADC  R31,R27
0000f1 93ff      	PUSH R31
0000f2 93ef      	PUSH R30
0000f3 e0e1      	LDI  R30,LOW(1)
0000f4 93ea      	ST   -Y,R30
0000f5 e1e7      	LDI  R30,LOW(23)
0000f6 93ea      	ST   -Y,R30
0000f7 e0a3      	LDI  R26,LOW(3)
0000f8 d2a2      	RCALL _ADE7753_READ
0000f9 91af      	POP  R26
0000fa 91bf      	POP  R27
0000fb d623      	RCALL __PUTDP1
                 ; 0000 00A2     delay_ms(10);
0000fc e0aa      	LDI  R26,LOW(10)
0000fd e0b0      	LDI  R27,0
0000fe d4b1      	RCALL _delay_ms
                 ; 0000 00A3     /* Tinh toan va loc nhieu gia tri dien ap */
                 ; 0000 00A4     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
0000ff e010      	LDI  R17,LOW(0)
                 _0xF:
000100 311e      	CPI  R17,30
000101 f4a0      	BRSH _0x10
                 ; 0000 00A5     {
                 ; 0000 00A6         Ul_Buff[Uc_loop] = Ul_Voltage_Buff[Uc_loop];
000102 2fe1      	MOV  R30,R17
000103 e0f0      	LDI  R31,0
000104 01de      	MOVW R26,R28
000105 9616      	ADIW R26,6
000106 d5ad      	RCALL __LSLW2
000107 0fea      	ADD  R30,R26
000108 1ffb      	ADC  R31,R27
000109 010f      	MOVW R0,R30
00010a 2fe1      	MOV  R30,R17
00010b e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
00010c e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
00010d e0f0      	LDI  R31,0
00010e d5a5      	RCALL __LSLW2
00010f 0fae      	ADD  R26,R30
000110 1fbf      	ADC  R27,R31
000111 d607      	RCALL __GETD1P
000112 01d0      	MOVW R26,R0
000113 d60b      	RCALL __PUTDP1
                 ; 0000 00A7     }
000114 5f1f      	SUBI R17,-1
000115 cfea      	RJMP _0xF
                 _0x10:
                 ; 0000 00A8     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
000116 e010      	LDI  R17,LOW(0)
                 _0x12:
000117 311e      	CPI  R17,30
000118 f008      	BRLO PC+2
000119 c04c      	RJMP _0x13
                 ; 0000 00A9     {
                 ; 0000 00AA         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
00011a 2f01      	MOV  R16,R17
                 _0x15:
00011b 310e      	CPI  R16,30
00011c f008      	BRLO PC+2
00011d c046      	RJMP _0x16
                 ; 0000 00AB         {
                 ; 0000 00AC             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
00011e 2fe1      	MOV  R30,R17
00011f e0f0      	LDI  R31,0
000120 01de      	MOVW R26,R28
000121 9616      	ADIW R26,6
000122 d591      	RCALL __LSLW2
000123 0fae      	ADD  R26,R30
000124 1fbf      	ADC  R27,R31
000125 d5f3      	RCALL __GETD1P
000126 937f      	PUSH R23
000127 936f      	PUSH R22
000128 93ff      	PUSH R31
000129 93ef      	PUSH R30
00012a 2fe0      	MOV  R30,R16
00012b e0f0      	LDI  R31,0
00012c 01de      	MOVW R26,R28
00012d 9616      	ADIW R26,6
00012e d585      	RCALL __LSLW2
00012f 0fae      	ADD  R26,R30
000130 1fbf      	ADC  R27,R31
000131 d5e7      	RCALL __GETD1P
000132 91af      	POP  R26
000133 91bf      	POP  R27
000134 918f      	POP  R24
000135 919f      	POP  R25
000136 d5f2      	RCALL __CPD12
000137 f550      	BRSH _0x17
                 ; 0000 00AD             {
                 ; 0000 00AE                 Ul_temp = Ul_Buff[Uc_loop];
000138 2fe1      	MOV  R30,R17
000139 e0f0      	LDI  R31,0
00013a 01de      	MOVW R26,R28
00013b 9616      	ADIW R26,6
00013c d577      	RCALL __LSLW2
00013d 0fae      	ADD  R26,R30
00013e 1fbf      	ADC  R27,R31
00013f d5d9      	RCALL __GETD1P
                +
000140 83ea     +STD Y + 2 , R30
000141 83fb     +STD Y + 2 + 1 , R31
000142 836c     +STD Y + 2 + 2 , R22
000143 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00AF                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
000144 2fe1      	MOV  R30,R17
000145 e0f0      	LDI  R31,0
000146 01de      	MOVW R26,R28
000147 9616      	ADIW R26,6
000148 d56b      	RCALL __LSLW2
000149 0fea      	ADD  R30,R26
00014a 1ffb      	ADC  R31,R27
00014b 010f      	MOVW R0,R30
00014c 2fe0      	MOV  R30,R16
00014d e0f0      	LDI  R31,0
00014e 01de      	MOVW R26,R28
00014f 9616      	ADIW R26,6
000150 d563      	RCALL __LSLW2
000151 0fae      	ADD  R26,R30
000152 1fbf      	ADC  R27,R31
000153 d5c5      	RCALL __GETD1P
000154 01d0      	MOVW R26,R0
000155 d5c9      	RCALL __PUTDP1
                 ; 0000 00B0                 Ul_Buff[Uc_loop2] = Ul_temp;
000156 2fe0      	MOV  R30,R16
000157 e0f0      	LDI  R31,0
000158 01de      	MOVW R26,R28
000159 9616      	ADIW R26,6
00015a d559      	RCALL __LSLW2
00015b 0fea      	ADD  R30,R26
00015c 1ffb      	ADC  R31,R27
                +
00015d 81aa     +LDD R26 , Y + 2
00015e 81bb     +LDD R27 , Y + 2 + 1
00015f 818c     +LDD R24 , Y + 2 + 2
000160 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000161 d5c2      	RCALL __PUTDZ20
                 ; 0000 00B1             }
                 ; 0000 00B2         }
                 _0x17:
000162 5f0f      	SUBI R16,-1
000163 cfb7      	RJMP _0x15
                 _0x16:
                 ; 0000 00B3     }
000164 5f1f      	SUBI R17,-1
000165 cfb1      	RJMP _0x12
                 _0x13:
                 ; 0000 00B4     Ul_temp = 0;
000166 e0e0      	LDI  R30,LOW(0)
                +
000167 83ea     +STD Y + 2 , R30
000168 83eb     +STD Y + 2 + 1 , R30
000169 83ec     +STD Y + 2 + 2 , R30
00016a 83ed     +STD Y + 2 + 3 , R30
                 	__CLRD1S 2
                 ; 0000 00B5     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
00016b e017      	LDI  R17,LOW(7)
                 _0x19:
00016c 3117      	CPI  R17,23
00016d f498      	BRSH _0x1A
                 ; 0000 00B6     {
                 ; 0000 00B7         Ul_temp += Ul_Buff[Uc_loop];
00016e 2fe1      	MOV  R30,R17
00016f e0f0      	LDI  R31,0
000170 01de      	MOVW R26,R28
000171 9616      	ADIW R26,6
000172 d541      	RCALL __LSLW2
000173 0fae      	ADD  R26,R30
000174 1fbf      	ADC  R27,R31
000175 d5a3      	RCALL __GETD1P
                +
000176 81aa     +LDD R26 , Y + 2
000177 81bb     +LDD R27 , Y + 2 + 1
000178 818c     +LDD R24 , Y + 2 + 2
000179 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00017a d518      	RCALL __ADDD12
                +
00017b 83ea     +STD Y + 2 , R30
00017c 83fb     +STD Y + 2 + 1 , R31
00017d 836c     +STD Y + 2 + 2 , R22
00017e 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00B8     }
00017f 5f1f      	SUBI R17,-1
000180 cfeb      	RJMP _0x19
                 _0x1A:
                 ; 0000 00B9     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
                +
000181 81aa     +LDD R26 , Y + 2
000182 81bb     +LDD R27 , Y + 2 + 1
000183 818c     +LDD R24 , Y + 2 + 2
000184 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000185 e1e0     +LDI R30 , LOW ( 0x10 )
000186 e0f0     +LDI R31 , HIGH ( 0x10 )
000187 e060     +LDI R22 , BYTE3 ( 0x10 )
000188 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
000189 d567      	RCALL __DIVD21U
                +
00018a 83ea     +STD Y + 2 , R30
00018b 83fb     +STD Y + 2 + 1 , R31
00018c 836c     +STD Y + 2 + 2 , R22
00018d 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00BA 
                 ; 0000 00BB     #if CALIB
                 ; 0000 00BC     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
                 ; 0000 00BD     {
                 ; 0000 00BE         Uint_data_led1 = Ul_temp /10000;
                 ; 0000 00BF         Uint_data_led2 = Ul_temp %10000;
                 ; 0000 00C0     }
                 ; 0000 00C1     #endif
                 ; 0000 00C2     Uint_Voltage = (unsigned int)((float)Ul_temp/VOLTAGE_RATIO);
00018e d48f      	RCALL __CDF1U
00018f 01df      	MOVW R26,R30
000190 01cb      	MOVW R24,R22
                +
000191 e0e0     +LDI R30 , LOW ( 0x45BCE800 )
000192 eef8     +LDI R31 , HIGH ( 0x45BCE800 )
000193 eb6c     +LDI R22 , BYTE3 ( 0x45BCE800 )
000194 e475     +LDI R23 , BYTE4 ( 0x45BCE800 )
                 	__GETD1N 0x45BCE800
000195 d4b8      	RCALL __DIVF21
000196 d450      	RCALL __CFD1U
                +
000197 2e5e     +MOV R5 , R30
000198 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 00C3 
                 ; 0000 00C4     // #if !CALIB2
                 ; 0000 00C5     // if(Uint_Voltage < 50)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*STEP_1));
                 ; 0000 00C6     // else if(Uint_Voltage < 100)     Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_1 - (Uint_Volta ...
                 ; 0000 00C7     // else if(Uint_Voltage < 200)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_2 - (Uint_Voltage ...
                 ; 0000 00C8     // else if(Uint_Voltage < 300)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_3 - (Uint_Voltage ...
                 ; 0000 00C9     // else if(Uint_Voltage < 400)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_4 - (Uint_Voltage ...
                 ; 0000 00CA     // else if(Uint_Voltage < 500)   Uint_Voltage = (unsigned int)((float)Ul_temp/(VOLTAGE_RATIO*(STEP_5 - (Uint_Voltage ...
                 ; 0000 00CB     // #endif
                 ; 0000 00CC 
                 ; 0000 00CD     #if !CALIB
                 ; 0000 00CE     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)    Uint_data_led1 = Uint_Voltage;
000199 ece8      	LDI  R30,LOW(200)
00019a e0f0      	LDI  R31,HIGH(200)
00019b 16de      	CP   R13,R30
00019c 06ef      	CPC  R14,R31
00019d f020      	BRLO _0x1B
                +
00019e 9250 0200+STS _Uint_data_led1 + ( 0 ) , R5
0001a0 9260 0201+STS _Uint_data_led1 + ( 0 ) + 1 , R6
                 	__PUTWMRN _Uint_data_led1,0,5,6
                 ; 0000 00CF     #endif
                 ; 0000 00D0     if(Uint_Voltage > 380)
                 _0x1B:
0001a2 e7ec      	LDI  R30,LOW(380)
0001a3 e0f1      	LDI  R31,HIGH(380)
0001a4 15e5      	CP   R30,R5
0001a5 05f6      	CPC  R31,R6
0001a6 f410      	BRSH _0x1C
                 ; 0000 00D1     {
                 ; 0000 00D2         Bit_Led1_Warning = 1;
0001a7 9af0      	SBI  0x1E,0
                 ; 0000 00D3     }
                 ; 0000 00D4     else    Bit_Led1_Warning = 0;
0001a8 c001      	RJMP _0x1F
                 _0x1C:
0001a9 98f0      	CBI  0x1E,0
                 ; 0000 00D5 
                 ; 0000 00D6     Ul_Current_Buff[Uc_Buff_Count] = ADE7753_READ(1,IRMS);
                 _0x1F:
0001aa 2dea      	MOV  R30,R10
0001ab e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0001ac e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0001ad e0f0      	LDI  R31,0
0001ae d505      	RCALL __LSLW2
0001af 0fea      	ADD  R30,R26
0001b0 1ffb      	ADC  R31,R27
0001b1 93ff      	PUSH R31
0001b2 93ef      	PUSH R30
0001b3 e0e1      	LDI  R30,LOW(1)
0001b4 93ea      	ST   -Y,R30
0001b5 e1e6      	LDI  R30,LOW(22)
0001b6 93ea      	ST   -Y,R30
0001b7 e0a3      	LDI  R26,LOW(3)
0001b8 d1e2      	RCALL _ADE7753_READ
0001b9 91af      	POP  R26
0001ba 91bf      	POP  R27
0001bb d563      	RCALL __PUTDP1
                 ; 0000 00D7     delay_ms(10);
0001bc e0aa      	LDI  R26,LOW(10)
0001bd e0b0      	LDI  R27,0
0001be d3f1      	RCALL _delay_ms
                 ; 0000 00D8     /* Tinh toan va loc nhieu gia tri dong dien */
                 ; 0000 00D9     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
0001bf e010      	LDI  R17,LOW(0)
                 _0x23:
0001c0 311e      	CPI  R17,30
0001c1 f4a0      	BRSH _0x24
                 ; 0000 00DA     {
                 ; 0000 00DB         Ul_Buff[Uc_loop] = Ul_Current_Buff[Uc_loop];
0001c2 2fe1      	MOV  R30,R17
0001c3 e0f0      	LDI  R31,0
0001c4 01de      	MOVW R26,R28
0001c5 9616      	ADIW R26,6
0001c6 d4ed      	RCALL __LSLW2
0001c7 0fea      	ADD  R30,R26
0001c8 1ffb      	ADC  R31,R27
0001c9 010f      	MOVW R0,R30
0001ca 2fe1      	MOV  R30,R17
0001cb e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0001cc e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0001cd e0f0      	LDI  R31,0
0001ce d4e5      	RCALL __LSLW2
0001cf 0fae      	ADD  R26,R30
0001d0 1fbf      	ADC  R27,R31
0001d1 d547      	RCALL __GETD1P
0001d2 01d0      	MOVW R26,R0
0001d3 d54b      	RCALL __PUTDP1
                 ; 0000 00DC     }
0001d4 5f1f      	SUBI R17,-1
0001d5 cfea      	RJMP _0x23
                 _0x24:
                 ; 0000 00DD     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
0001d6 e010      	LDI  R17,LOW(0)
                 _0x26:
0001d7 311e      	CPI  R17,30
0001d8 f008      	BRLO PC+2
0001d9 c04c      	RJMP _0x27
                 ; 0000 00DE     {
                 ; 0000 00DF         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
0001da 2f01      	MOV  R16,R17
                 _0x29:
0001db 310e      	CPI  R16,30
0001dc f008      	BRLO PC+2
0001dd c046      	RJMP _0x2A
                 ; 0000 00E0         {
                 ; 0000 00E1             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
0001de 2fe1      	MOV  R30,R17
0001df e0f0      	LDI  R31,0
0001e0 01de      	MOVW R26,R28
0001e1 9616      	ADIW R26,6
0001e2 d4d1      	RCALL __LSLW2
0001e3 0fae      	ADD  R26,R30
0001e4 1fbf      	ADC  R27,R31
0001e5 d533      	RCALL __GETD1P
0001e6 937f      	PUSH R23
0001e7 936f      	PUSH R22
0001e8 93ff      	PUSH R31
0001e9 93ef      	PUSH R30
0001ea 2fe0      	MOV  R30,R16
0001eb e0f0      	LDI  R31,0
0001ec 01de      	MOVW R26,R28
0001ed 9616      	ADIW R26,6
0001ee d4c5      	RCALL __LSLW2
0001ef 0fae      	ADD  R26,R30
0001f0 1fbf      	ADC  R27,R31
0001f1 d527      	RCALL __GETD1P
0001f2 91af      	POP  R26
0001f3 91bf      	POP  R27
0001f4 918f      	POP  R24
0001f5 919f      	POP  R25
0001f6 d532      	RCALL __CPD12
0001f7 f550      	BRSH _0x2B
                 ; 0000 00E2             {
                 ; 0000 00E3                 Ul_temp = Ul_Buff[Uc_loop];
0001f8 2fe1      	MOV  R30,R17
0001f9 e0f0      	LDI  R31,0
0001fa 01de      	MOVW R26,R28
0001fb 9616      	ADIW R26,6
0001fc d4b7      	RCALL __LSLW2
0001fd 0fae      	ADD  R26,R30
0001fe 1fbf      	ADC  R27,R31
0001ff d519      	RCALL __GETD1P
                +
000200 83ea     +STD Y + 2 , R30
000201 83fb     +STD Y + 2 + 1 , R31
000202 836c     +STD Y + 2 + 2 , R22
000203 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00E4                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
000204 2fe1      	MOV  R30,R17
000205 e0f0      	LDI  R31,0
000206 01de      	MOVW R26,R28
000207 9616      	ADIW R26,6
000208 d4ab      	RCALL __LSLW2
000209 0fea      	ADD  R30,R26
00020a 1ffb      	ADC  R31,R27
00020b 010f      	MOVW R0,R30
00020c 2fe0      	MOV  R30,R16
00020d e0f0      	LDI  R31,0
00020e 01de      	MOVW R26,R28
00020f 9616      	ADIW R26,6
000210 d4a3      	RCALL __LSLW2
000211 0fae      	ADD  R26,R30
000212 1fbf      	ADC  R27,R31
000213 d505      	RCALL __GETD1P
000214 01d0      	MOVW R26,R0
000215 d509      	RCALL __PUTDP1
                 ; 0000 00E5                 Ul_Buff[Uc_loop2] = Ul_temp;
000216 2fe0      	MOV  R30,R16
000217 e0f0      	LDI  R31,0
000218 01de      	MOVW R26,R28
000219 9616      	ADIW R26,6
00021a d499      	RCALL __LSLW2
00021b 0fea      	ADD  R30,R26
00021c 1ffb      	ADC  R31,R27
                +
00021d 81aa     +LDD R26 , Y + 2
00021e 81bb     +LDD R27 , Y + 2 + 1
00021f 818c     +LDD R24 , Y + 2 + 2
000220 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000221 d502      	RCALL __PUTDZ20
                 ; 0000 00E6             }
                 ; 0000 00E7         }
                 _0x2B:
000222 5f0f      	SUBI R16,-1
000223 cfb7      	RJMP _0x29
                 _0x2A:
                 ; 0000 00E8     }
000224 5f1f      	SUBI R17,-1
000225 cfb1      	RJMP _0x26
                 _0x27:
                 ; 0000 00E9     Ul_temp = 0;
000226 e0e0      	LDI  R30,LOW(0)
                +
000227 83ea     +STD Y + 2 , R30
000228 83eb     +STD Y + 2 + 1 , R30
000229 83ec     +STD Y + 2 + 2 , R30
00022a 83ed     +STD Y + 2 + 3 , R30
                 	__CLRD1S 2
                 ; 0000 00EA     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
00022b e017      	LDI  R17,LOW(7)
                 _0x2D:
00022c 3117      	CPI  R17,23
00022d f498      	BRSH _0x2E
                 ; 0000 00EB     {
                 ; 0000 00EC         Ul_temp += Ul_Buff[Uc_loop];
00022e 2fe1      	MOV  R30,R17
00022f e0f0      	LDI  R31,0
000230 01de      	MOVW R26,R28
000231 9616      	ADIW R26,6
000232 d481      	RCALL __LSLW2
000233 0fae      	ADD  R26,R30
000234 1fbf      	ADC  R27,R31
000235 d4e3      	RCALL __GETD1P
                +
000236 81aa     +LDD R26 , Y + 2
000237 81bb     +LDD R27 , Y + 2 + 1
000238 818c     +LDD R24 , Y + 2 + 2
000239 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00023a d458      	RCALL __ADDD12
                +
00023b 83ea     +STD Y + 2 , R30
00023c 83fb     +STD Y + 2 + 1 , R31
00023d 836c     +STD Y + 2 + 2 , R22
00023e 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00ED     }
00023f 5f1f      	SUBI R17,-1
000240 cfeb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00EE     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
                +
000241 81aa     +LDD R26 , Y + 2
000242 81bb     +LDD R27 , Y + 2 + 1
000243 818c     +LDD R24 , Y + 2 + 2
000244 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000245 e1e0     +LDI R30 , LOW ( 0x10 )
000246 e0f0     +LDI R31 , HIGH ( 0x10 )
000247 e060     +LDI R22 , BYTE3 ( 0x10 )
000248 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
000249 d4a7      	RCALL __DIVD21U
                +
00024a 83ea     +STD Y + 2 , R30
00024b 83fb     +STD Y + 2 + 1 , R31
00024c 836c     +STD Y + 2 + 2 , R22
00024d 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00EF     Uint_Current = (unsigned int)((float)Ul_temp/CURRENT_RATIO);
00024e d3cf      	RCALL __CDF1U
00024f 01df      	MOVW R26,R30
000250 01cb      	MOVW R24,R22
                +
000251 e0e0     +LDI R30 , LOW ( 0x440D8000 )
000252 e8f0     +LDI R31 , HIGH ( 0x440D8000 )
000253 e06d     +LDI R22 , BYTE3 ( 0x440D8000 )
000254 e474     +LDI R23 , BYTE4 ( 0x440D8000 )
                 	__GETD1N 0x440D8000
000255 d3f8      	RCALL __DIVF21
000256 d390      	RCALL __CFD1U
                +
000257 2e7e     +MOV R7 , R30
000258 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00F0     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
000259 ece8      	LDI  R30,LOW(200)
00025a e0f0      	LDI  R31,HIGH(200)
00025b 16de      	CP   R13,R30
00025c 06ef      	CPC  R14,R31
00025d f030      	BRLO _0x2F
                 ; 0000 00F1     {
                 ; 0000 00F2         #if !CALIB
                 ; 0000 00F3         Uint_data_led2 = Uint_Current;
                +
00025e 9270 0202+STS _Uint_data_led2 + ( 0 ) , R7
000260 9280 0203+STS _Uint_data_led2 + ( 0 ) + 1 , R8
                 	__PUTWMRN _Uint_data_led2,0,7,8
                 ; 0000 00F4         #endif
                 ; 0000 00F5         Uc_Timer_Update_Display = 0;
000262 24dd      	CLR  R13
000263 24ee      	CLR  R14
                 ; 0000 00F6     }
                 ; 0000 00F7     if(Uint_Current > 550)  Bit_Led2_Warning = 1;
                 _0x2F:
000264 e2e6      	LDI  R30,LOW(550)
000265 e0f2      	LDI  R31,HIGH(550)
000266 15e7      	CP   R30,R7
000267 05f8      	CPC  R31,R8
000268 f410      	BRSH _0x30
000269 9af1      	SBI  0x1E,1
                 ; 0000 00F8     else    Bit_Led2_Warning = 0;
00026a c001      	RJMP _0x33
                 _0x30:
00026b 98f1      	CBI  0x1E,1
                 ; 0000 00F9 
                 ; 0000 00FA 
                 ; 0000 00FB     Uc_Buff_Count++;
                 _0x33:
00026c 94a3      	INC  R10
                 ; 0000 00FC     if(Uc_Buff_Count >= NUM_SAMPLE) Uc_Buff_Count = 0;
00026d e1ee      	LDI  R30,LOW(30)
00026e 16ae      	CP   R10,R30
00026f f008      	BRLO _0x36
000270 24aa      	CLR  R10
                 ; 0000 00FD }
                 _0x36:
000271 d4c7      	RCALL __LOADLOCR2
000272 96ef      	ADIW R28,63
000273 96ef      	ADIW R28,63
000274 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0100 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0101 // Declare your local variables here
                 ; 0000 0102 
                 ; 0000 0103 // Crystal Oscillator division factor: 1
                 ; 0000 0104 #pragma optsize-
                 ; 0000 0105 CLKPR=(1<<CLKPCE);
000275 e8e0      	LDI  R30,LOW(128)
000276 93e0 0061 	STS  97,R30
                 ; 0000 0106 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000278 e0e0      	LDI  R30,LOW(0)
000279 93e0 0061 	STS  97,R30
                 ; 0000 0107 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0108 #pragma optsize+
                 ; 0000 0109 #endif
                 ; 0000 010A 
                 ; 0000 010B // Input/Output Ports initialization
                 ; 0000 010C // Port B initialization
                 ; 0000 010D // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=Out
                 ; 0000 010E DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00027b e3ef      	LDI  R30,LOW(63)
00027c b9e4      	OUT  0x4,R30
                 ; 0000 010F // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=0
                 ; 0000 0110 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00027d e0e0      	LDI  R30,LOW(0)
00027e b9e5      	OUT  0x5,R30
                 ; 0000 0111 
                 ; 0000 0112 // Port C initialization
                 ; 0000 0113 // Function: Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0114 DDRC=(0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
00027f e2e1      	LDI  R30,LOW(33)
000280 b9e7      	OUT  0x7,R30
                 ; 0000 0115 // State: Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0116 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000281 e0e0      	LDI  R30,LOW(0)
000282 b9e8      	OUT  0x8,R30
                 ; 0000 0117 
                 ; 0000 0118 // Port D initialization
                 ; 0000 0119 // Function: Bit7=Out Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 011A DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000283 eae0      	LDI  R30,LOW(160)
000284 b9ea      	OUT  0xA,R30
                 ; 0000 011B // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 011C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000285 e0e0      	LDI  R30,LOW(0)
000286 b9eb      	OUT  0xB,R30
                 ; 0000 011D 
                 ; 0000 011E 
                 ; 0000 011F // Timer/Counter 0 initialization
                 ; 0000 0120 // Clock source: System Clock
                 ; 0000 0121 // Clock value: Timer 0 Stopped
                 ; 0000 0122 // Mode: Normal top=0xFF
                 ; 0000 0123 // OC0A output: Disconnected
                 ; 0000 0124 // OC0B output: Disconnected
                 ; 0000 0125 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000287 bde4      	OUT  0x24,R30
                 ; 0000 0126 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000288 bde5      	OUT  0x25,R30
                 ; 0000 0127 TCNT0=0x00;
000289 bde6      	OUT  0x26,R30
                 ; 0000 0128 OCR0A=0x00;
00028a bde7      	OUT  0x27,R30
                 ; 0000 0129 OCR0B=0x00;
00028b bde8      	OUT  0x28,R30
                 ; 0000 012A 
                 ; 0000 012B // Timer/Counter 1 initialization
                 ; 0000 012C // Clock source: System Clock
                 ; 0000 012D // Clock value: 20000.000 kHz
                 ; 0000 012E // Mode: Ph. correct PWM top=0x01FF
                 ; 0000 012F // OC1A output: Non-Inverted PWM
                 ; 0000 0130 // OC1B output: Inverted PWM
                 ; 0000 0131 // Noise Canceler: Off
                 ; 0000 0132 // Input Capture on Falling Edge
                 ; 0000 0133 // Timer Period: 0.0511 ms
                 ; 0000 0134 // Output Pulse(s):
                 ; 0000 0135 // OC1A Period: 0.0511 ms Width: 0 us
                 ; 0000 0136 // OC1B Period: 0.0511 ms Width: 0.0511 ms
                 ; 0000 0137 // Timer1 Overflow Interrupt: Off
                 ; 0000 0138 // Input Capture Interrupt: Off
                 ; 0000 0139 // Compare A Match Interrupt: Off
                 ; 0000 013A // Compare B Match Interrupt: Off
                 ; 0000 013B TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00028c ebe1      	LDI  R30,LOW(177)
00028d 93e0 0080 	STS  128,R30
                 ; 0000 013C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00028f e0e1      	LDI  R30,LOW(1)
000290 93e0 0081 	STS  129,R30
                 ; 0000 013D TCNT1H=0x00;
000292 e0e0      	LDI  R30,LOW(0)
000293 93e0 0085 	STS  133,R30
                 ; 0000 013E TCNT1L=0x00;
000295 93e0 0084 	STS  132,R30
                 ; 0000 013F ICR1H=0x00;
000297 93e0 0087 	STS  135,R30
                 ; 0000 0140 ICR1L=0x00;
000299 93e0 0086 	STS  134,R30
                 ; 0000 0141 OCR1AH=0x00;
00029b 93e0 0089 	STS  137,R30
                 ; 0000 0142 OCR1AL=0x00;
00029d 93e0 0088 	STS  136,R30
                 ; 0000 0143 OCR1BH=0x00;
00029f 93e0 008b 	STS  139,R30
                 ; 0000 0144 OCR1BL=0x00;
0002a1 93e0 008a 	STS  138,R30
                 ; 0000 0145 
                 ; 0000 0146 // Timer/Counter 2 initialization
                 ; 0000 0147 // Clock source: System Clock
                 ; 0000 0148 // Clock value: 43,200 kHz
                 ; 0000 0149 // Mode: Normal top=0xFF
                 ; 0000 014A // OC2A output: Disconnected
                 ; 0000 014B // OC2B output: Disconnected
                 ; 0000 014C // Timer Period: 3,0093 ms
                 ; 0000 014D ASSR=(0<<EXCLK) | (0<<AS2);
0002a3 93e0 00b6 	STS  182,R30
                 ; 0000 014E TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0002a5 93e0 00b0 	STS  176,R30
                 ; 0000 014F TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0002a7 e0e6      	LDI  R30,LOW(6)
0002a8 93e0 00b1 	STS  177,R30
                 ; 0000 0150 TCNT2=0x7E;
0002aa e7ee      	LDI  R30,LOW(126)
0002ab 93e0 00b2 	STS  178,R30
                 ; 0000 0151 OCR2A=0x00;
0002ad e0e0      	LDI  R30,LOW(0)
0002ae 93e0 00b3 	STS  179,R30
                 ; 0000 0152 OCR2B=0x00;
0002b0 93e0 00b4 	STS  180,R30
                 ; 0000 0153 
                 ; 0000 0154 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0155 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0002b2 93e0 006e 	STS  110,R30
                 ; 0000 0156 
                 ; 0000 0157 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0158 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0002b4 93e0 006f 	STS  111,R30
                 ; 0000 0159 
                 ; 0000 015A // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 015B TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
0002b6 e0e1      	LDI  R30,LOW(1)
0002b7 93e0 0070 	STS  112,R30
                 ; 0000 015C 
                 ; 0000 015D // External Interrupt(s) initialization
                 ; 0000 015E // INT0: Off
                 ; 0000 015F // INT1: Off
                 ; 0000 0160 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0161 // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0162 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0163 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 93e0 0069 	STS  105,R30
                 ; 0000 0164 EIMSK=(0<<INT1) | (0<<INT0);
0002bc bbed      	OUT  0x1D,R30
                 ; 0000 0165 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0002bd 93e0 0068 	STS  104,R30
                 ; 0000 0166 
                 ; 0000 0167 // USART initialization
                 ; 0000 0168 // USART disabled
                 ; 0000 0169 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0002bf 93e0 00c1 	STS  193,R30
                 ; 0000 016A 
                 ; 0000 016B // Analog Comparator initialization
                 ; 0000 016C // Analog Comparator: Off
                 ; 0000 016D // The Analog Comparator's positive input is
                 ; 0000 016E // connected to the AIN0 pin
                 ; 0000 016F // The Analog Comparator's negative input is
                 ; 0000 0170 // connected to the AIN1 pin
                 ; 0000 0171 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0002c1 e8e0      	LDI  R30,LOW(128)
0002c2 bfe0      	OUT  0x30,R30
                 ; 0000 0172 // Digital input buffer on AIN0: On
                 ; 0000 0173 // Digital input buffer on AIN1: On
                 ; 0000 0174 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 93e0 007f 	STS  127,R30
                 ; 0000 0175 
                 ; 0000 0176 // ADC initialization
                 ; 0000 0177 // ADC Clock frequency: 691,200 kHz
                 ; 0000 0178 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0179 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 017A // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 017B // ADC4: On, ADC5: On
                 ; 0000 017C DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0002c6 93e0 007e 	STS  126,R30
                 ; 0000 017D ADMUX=ADC_VREF_TYPE;
0002c8 ece0      	LDI  R30,LOW(192)
0002c9 93e0 007c 	STS  124,R30
                 ; 0000 017E ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0002cb e8e4      	LDI  R30,LOW(132)
0002cc 93e0 007a 	STS  122,R30
                 ; 0000 017F ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0002ce e0e0      	LDI  R30,LOW(0)
0002cf 93e0 007b 	STS  123,R30
                 ; 0000 0180 
                 ; 0000 0181 
                 ; 0000 0182 // SPI initialization
                 ; 0000 0183 // SPI disabled
                 ; 0000 0184 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0002d1 bdec      	OUT  0x2C,R30
                 ; 0000 0185 
                 ; 0000 0186 // TWI initialization
                 ; 0000 0187 // TWI disabled
                 ; 0000 0188 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0002d2 93e0 00bc 	STS  188,R30
                 ; 0000 0189 // Global enable interrupts
                 ; 0000 018A #asm("sei")
0002d4 9478      	sei
                 ; 0000 018B 
                 ; 0000 018C ADE7753_INIT();
0002d5 d142      	RCALL _ADE7753_INIT
                 ; 0000 018D PWM_PHASE2(255);
0002d6 efaf      	LDI  R26,LOW(255)
0002d7 e0b0      	LDI  R27,0
0002d8 ddde      	RCALL _PWM_PHASE2
                 ; 0000 018E PWM_PHASE1(255);
0002d9 efaf      	LDI  R26,LOW(255)
0002da e0b0      	LDI  R27,0
0002db ddca      	RCALL _PWM_PHASE1
                 ; 0000 018F for(Uc_Buff_Count = 0; Uc_Buff_Count < NUM_SAMPLE; Uc_Buff_Count++)
0002dc 24aa      	CLR  R10
                 _0x38:
0002dd e1ee      	LDI  R30,LOW(30)
0002de 16ae      	CP   R10,R30
0002df f4d0      	BRSH _0x39
                 ; 0000 0190 {
                 ; 0000 0191     Ul_Voltage_Buff[Uc_Buff_Count] = 0;
0002e0 2dea      	MOV  R30,R10
0002e1 e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
0002e2 e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
0002e3 e0f0      	LDI  R31,0
0002e4 d3cf      	RCALL __LSLW2
0002e5 0fae      	ADD  R26,R30
0002e6 1fbf      	ADC  R27,R31
                +
0002e7 e0e0     +LDI R30 , LOW ( 0x0 )
0002e8 e0f0     +LDI R31 , HIGH ( 0x0 )
0002e9 e060     +LDI R22 , BYTE3 ( 0x0 )
0002ea e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002eb d433      	RCALL __PUTDP1
                 ; 0000 0192     Ul_Current_Buff[Uc_Buff_Count] = 0;
0002ec 2dea      	MOV  R30,R10
0002ed e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0002ee e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0002ef e0f0      	LDI  R31,0
0002f0 d3c3      	RCALL __LSLW2
0002f1 0fae      	ADD  R26,R30
0002f2 1fbf      	ADC  R27,R31
                +
0002f3 e0e0     +LDI R30 , LOW ( 0x0 )
0002f4 e0f0     +LDI R31 , HIGH ( 0x0 )
0002f5 e060     +LDI R22 , BYTE3 ( 0x0 )
0002f6 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002f7 d427      	RCALL __PUTDP1
                 ; 0000 0193 }
0002f8 94a3      	INC  R10
0002f9 cfe3      	RJMP _0x38
                 _0x39:
                 ; 0000 0194 Uc_Buff_Count = 0;
0002fa 24aa      	CLR  R10
                 ; 0000 0195 delay_ms(2000);
0002fb eda0      	LDI  R26,LOW(2000)
0002fc e0b7      	LDI  R27,HIGH(2000)
0002fd d2b2      	RCALL _delay_ms
                 ; 0000 0196 BUZZER_ON;
0002fe 9a45      	SBI  0x8,5
                 ; 0000 0197 delay_ms(100);
0002ff e6a4      	LDI  R26,LOW(100)
000300 e0b0      	LDI  R27,0
000301 d2ae      	RCALL _delay_ms
                 ; 0000 0198 BUZZER_OFF;
000302 9845      	CBI  0x8,5
                 ; 0000 0199 delay_ms(100);
000303 e6a4      	LDI  R26,LOW(100)
000304 e0b0      	LDI  R27,0
000305 d2aa      	RCALL _delay_ms
                 ; 0000 019A BUZZER_ON;
000306 9a45      	SBI  0x8,5
                 ; 0000 019B delay_ms(100);
000307 e6a4      	LDI  R26,LOW(100)
000308 e0b0      	LDI  R27,0
000309 d2a6      	RCALL _delay_ms
                 ; 0000 019C BUZZER_OFF;
00030a 9845      	CBI  0x8,5
                 ; 0000 019D while (1)
                 _0x42:
                 ; 0000 019E       {
                 ; 0000 019F       // Place your code here
                 ; 0000 01A0         if(Bit_En_Meas)
00030b 9bf2      	SBIS 0x1E,2
00030c c002      	RJMP _0x45
                 ; 0000 01A1         {
                 ; 0000 01A2                 Bit_En_Meas = 0;
00030d 98f2      	CBI  0x1E,2
                 ; 0000 01A3                 READ_CURRENT_INFO();
00030e ddd6      	RCALL _READ_CURRENT_INFO
                 ; 0000 01A4         }
                 ; 0000 01A5         CONTROL_VOLTAGE();
                 _0x45:
00030f ddb9      	RCALL _CONTROL_VOLTAGE
                 ; 0000 01A6         if(Bit_Led2_Warning == 1 || Bit_Led1_Warning)
000310 99f1      	SBIC 0x1E,1
000311 c002      	RJMP _0x49
000312 9bf0      	SBIS 0x1E,0
000313 c007      	RJMP _0x48
                 _0x49:
                 ; 0000 01A7         {
                 ; 0000 01A8             if(Uc_Buzzer_Count < SPEED_BUZZER/2)   BUZZER_ON;
000314 e6e4      	LDI  R30,LOW(100)
000315 169e      	CP   R9,R30
000316 f410      	BRSH _0x4B
000317 9a45      	SBI  0x8,5
                 ; 0000 01A9             else    BUZZER_OFF;
000318 c001      	RJMP _0x4E
                 _0x4B:
000319 9845      	CBI  0x8,5
                 ; 0000 01AA         }
                 _0x4E:
                 ; 0000 01AB         else    BUZZER_OFF;
00031a c001      	RJMP _0x51
                 _0x48:
00031b 9845      	CBI  0x8,5
                 ; 0000 01AC       }
                 _0x51:
00031c cfee      	RJMP _0x42
                 ; 0000 01AD }
                 _0x54:
00031d cfff      	RJMP _0x54
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;#include "scan_led.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0001 0008     unsigned char   cnt;
                 ; 0001 0009     unsigned char   tmp = data;
                 ; 0001 000A 
                 ; 0001 000B     for(cnt = 0;cnt < 8; cnt++)
00031e 93aa      	ST   -Y,R26
00031f d412      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
000320 810a      	LDD  R16,Y+2
000321 e010      	LDI  R17,LOW(0)
                 _0x20004:
000322 3018      	CPI  R17,8
000323 f4a0      	BRSH _0x20005
                 ; 0001 000C     {
                 ; 0001 000D         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
000324 2fe0      	MOV  R30,R16
000325 78e0      	ANDI R30,LOW(0x80)
000326 38e0      	CPI  R30,LOW(0x80)
000327 f411      	BRNE _0x20006
000328 9a5d      	SBI  0xB,5
                 ; 0001 000E         else SPI_MOSI_LOW;
000329 c001      	RJMP _0x20009
                 _0x20006:
00032a 985d      	CBI  0xB,5
                 ; 0001 000F 
                 ; 0001 0010         SPI_SCK_HIGHT;
                 _0x20009:
00032b 9a5f      	SBI  0xB,7
                 ; 0001 0011         delay_us(50);
                +
00032c e28c     +LDI R24 , LOW ( 300 )
00032d e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
00032e 9701     +SBIW R24 , 1
00032f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
                 ; 0001 0012         SPI_SCK_LOW;
000330 985f      	CBI  0xB,7
                 ; 0001 0013         delay_us(50);
                +
000331 e28c     +LDI R24 , LOW ( 300 )
000332 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000333 9701     +SBIW R24 , 1
000334 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
                 ; 0001 0014         tmp <<= 1;
000335 0f00      	LSL  R16
                 ; 0001 0015     }
000336 5f1f      	SUBI R17,-1
000337 cfea      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0016 }
000338 d400      	RCALL __LOADLOCR2
000339 c274      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0001 0019 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0001 001A     unsigned char cnt;
                 ; 0001 001B     unsigned char data;
                 ; 0001 001C     data = 0;
00033a d3f7      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
00033b e000      	LDI  R16,LOW(0)
                 ; 0001 001D     for(cnt = 0;cnt < 8; cnt++)
00033c e010      	LDI  R17,LOW(0)
                 _0x20011:
00033d 3018      	CPI  R17,8
00033e f478      	BRSH _0x20012
                 ; 0001 001E     {
                 ; 0001 001F         data <<= 1;
00033f 0f00      	LSL  R16
                 ; 0001 0020         SPI_SCK_HIGHT;
000340 9a5f      	SBI  0xB,7
                 ; 0001 0021         delay_us(50);
                +
000341 e28c     +LDI R24 , LOW ( 300 )
000342 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
000343 9701     +SBIW R24 , 1
000344 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
                 ; 0001 0022         if(SPI_MISO_HIGHT)
000345 994e      	SBIC 0x9,6
                 ; 0001 0023         {
                 ; 0001 0024             data += 1;
000346 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0025         }
                 ; 0001 0026         SPI_SCK_LOW;
000347 985f      	CBI  0xB,7
                 ; 0001 0027         delay_us(50);
                +
000348 e28c     +LDI R24 , LOW ( 300 )
000349 e091     +LDI R25 , HIGH ( 300 )
                +__DELAY_USW_LOOP :
00034a 9701     +SBIW R24 , 1
00034b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 300
                 ; 0001 0028     }
00034c 5f1f      	SUBI R17,-1
00034d cfef      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0029     return data;
00034e 2fe0      	MOV  R30,R16
                 _0x2000002:
00034f 9109      	LD   R16,Y+
000350 9119      	LD   R17,Y+
000351 9508      	RET
                 ; 0001 002A }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 002D {
                 _ADE7753_WRITE:
                 ; .FSTART _ADE7753_WRITE
                 ; 0001 002E     unsigned char data[4];
                 ; 0001 002F     unsigned char   i;
                 ; 0001 0030     data[0] = data_1;
000352 93aa      	ST   -Y,R26
000353 9724      	SBIW R28,4
000354 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
000355 81ef      	LDD  R30,Y+7
000356 83e9      	STD  Y+1,R30
                 ; 0001 0031     data[1] = data_2;
000357 81ee      	LDD  R30,Y+6
000358 83ea      	STD  Y+2,R30
                 ; 0001 0032     data[2] = data_3;
000359 81ed      	LDD  R30,Y+5
00035a 83eb      	STD  Y+3,R30
                 ; 0001 0033 
                 ; 0001 0034     switch (IC_CS)
00035b 85ea      	LDD  R30,Y+10
00035c e0f0      	LDI  R31,0
                 ; 0001 0035     {
                 ; 0001 0036         case 1:
00035d 30e1      	CPI  R30,LOW(0x1)
00035e e0a0      	LDI  R26,HIGH(0x1)
00035f 07fa      	CPC  R31,R26
000360 f421      	BRNE _0x2001B
                 ; 0001 0037         {
                 ; 0001 0038             PHASE_1_ON;
000361 9828      	CBI  0x5,0
                 ; 0001 0039             PHASE_2_OFF;
000362 9a59      	SBI  0xB,1
                 ; 0001 003A             PHASE_3_OFF;
000363 9a59      	SBI  0xB,1
                 ; 0001 003B             break;
000364 c00f      	RJMP _0x2001A
                 ; 0001 003C         }
                 ; 0001 003D         case 2:
                 _0x2001B:
000365 30e2      	CPI  R30,LOW(0x2)
000366 e0a0      	LDI  R26,HIGH(0x2)
000367 07fa      	CPC  R31,R26
000368 f421      	BRNE _0x20022
                 ; 0001 003E         {
                 ; 0001 003F             PHASE_1_OFF;
000369 9a28      	SBI  0x5,0
                 ; 0001 0040             PHASE_2_ON;
00036a 9859      	CBI  0xB,1
                 ; 0001 0041             PHASE_3_OFF;
00036b 9a59      	SBI  0xB,1
                 ; 0001 0042             break;
00036c c007      	RJMP _0x2001A
                 ; 0001 0043         }
                 ; 0001 0044         case 3:
                 _0x20022:
00036d 30e3      	CPI  R30,LOW(0x3)
00036e e0a0      	LDI  R26,HIGH(0x3)
00036f 07fa      	CPC  R31,R26
000370 f419      	BRNE _0x2001A
                 ; 0001 0045         {
                 ; 0001 0046             PHASE_1_OFF;
000371 9a28      	SBI  0x5,0
                 ; 0001 0047             PHASE_2_OFF;
000372 9a59      	SBI  0xB,1
                 ; 0001 0048             PHASE_3_ON;
000373 9859      	CBI  0xB,1
                 ; 0001 0049             break;
                 ; 0001 004A         }
                 ; 0001 004B     }
                 _0x2001A:
                 ; 0001 004C     addr &= 0x3F;
000374 85e9      	LDD  R30,Y+9
000375 73ef      	ANDI R30,LOW(0x3F)
000376 87e9      	STD  Y+9,R30
                 ; 0001 004D     addr |= 0x80;
000377 68e0      	ORI  R30,0x80
000378 87e9      	STD  Y+9,R30
                 ; 0001 004E     delay_us(100);
                +
000379 e588     +LDI R24 , LOW ( 600 )
00037a e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
00037b 9701     +SBIW R24 , 1
00037c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 004F     SPI_7753_SEND(addr);
00037d 85a9      	LDD  R26,Y+9
00037e df9f      	RCALL _SPI_7753_SEND
                 ; 0001 0050     delay_us(100);
                +
00037f e588     +LDI R24 , LOW ( 600 )
000380 e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
000381 9701     +SBIW R24 , 1
000382 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 0051     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
000383 e010      	LDI  R17,LOW(0)
                 _0x20031:
000384 85e8      	LDD  R30,Y+8
000385 171e      	CP   R17,R30
000386 f450      	BRSH _0x20032
000387 2fe1      	MOV  R30,R17
000388 e0f0      	LDI  R31,0
000389 01de      	MOVW R26,R28
00038a 9611      	ADIW R26,1
00038b 0fae      	ADD  R26,R30
00038c 1fbf      	ADC  R27,R31
00038d 91ac      	LD   R26,X
00038e df8f      	RCALL _SPI_7753_SEND
00038f 5f1f      	SUBI R17,-1
000390 cff3      	RJMP _0x20031
                 _0x20032:
                 ; 0001 0052 delay_us(100);
                +
000391 e588     +LDI R24 , LOW ( 600 )
000392 e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
000393 9701     +SBIW R24 , 1
000394 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 0053     PHASE_1_OFF;
000395 9a28      	SBI  0x5,0
                 ; 0001 0054     PHASE_2_OFF;
000396 9a59      	SBI  0xB,1
                 ; 0001 0055     PHASE_3_OFF;
000397 9a59      	SBI  0xB,1
                 ; 0001 0056 }
000398 8118      	LDD  R17,Y+0
000399 962b      	ADIW R28,11
00039a 9508      	RET
                 ; .FEND
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0058 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0001 0059     unsigned char   i;
                 ; 0001 005A     unsigned char   data[4];
                 ; 0001 005B     unsigned long int res;
                 ; 0001 005C     for(i=0;i<4;i++)    data[i] = 0;
00039b 93aa      	ST   -Y,R26
00039c 9728      	SBIW R28,8
00039d 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
00039e e010      	LDI  R17,LOW(0)
                 _0x2003A:
00039f 3014      	CPI  R17,4
0003a0 f450      	BRSH _0x2003B
0003a1 2fe1      	MOV  R30,R17
0003a2 e0f0      	LDI  R31,0
0003a3 01de      	MOVW R26,R28
0003a4 9615      	ADIW R26,5
0003a5 0fae      	ADD  R26,R30
0003a6 1fbf      	ADC  R27,R31
0003a7 e0e0      	LDI  R30,LOW(0)
0003a8 93ec      	ST   X,R30
0003a9 5f1f      	SUBI R17,-1
0003aa cff4      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 005D switch (IC_CS)
0003ab 85eb      	LDD  R30,Y+11
0003ac e0f0      	LDI  R31,0
                 ; 0001 005E     {
                 ; 0001 005F         case 1:
0003ad 30e1      	CPI  R30,LOW(0x1)
0003ae e0a0      	LDI  R26,HIGH(0x1)
0003af 07fa      	CPC  R31,R26
0003b0 f421      	BRNE _0x2003F
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_ON;
0003b1 9828      	CBI  0x5,0
                 ; 0001 0062             PHASE_2_OFF;
0003b2 9a59      	SBI  0xB,1
                 ; 0001 0063             PHASE_3_OFF;
0003b3 9a59      	SBI  0xB,1
                 ; 0001 0064             break;
0003b4 c00f      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 2:
                 _0x2003F:
0003b5 30e2      	CPI  R30,LOW(0x2)
0003b6 e0a0      	LDI  R26,HIGH(0x2)
0003b7 07fa      	CPC  R31,R26
0003b8 f421      	BRNE _0x20046
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
0003b9 9a28      	SBI  0x5,0
                 ; 0001 0069             PHASE_2_ON;
0003ba 9859      	CBI  0xB,1
                 ; 0001 006A             PHASE_3_OFF;
0003bb 9a59      	SBI  0xB,1
                 ; 0001 006B             break;
0003bc c007      	RJMP _0x2003E
                 ; 0001 006C         }
                 ; 0001 006D         case 3:
                 _0x20046:
0003bd 30e3      	CPI  R30,LOW(0x3)
0003be e0a0      	LDI  R26,HIGH(0x3)
0003bf 07fa      	CPC  R31,R26
0003c0 f419      	BRNE _0x2003E
                 ; 0001 006E         {
                 ; 0001 006F             PHASE_1_OFF;
0003c1 9a28      	SBI  0x5,0
                 ; 0001 0070             PHASE_2_OFF;
0003c2 9a59      	SBI  0xB,1
                 ; 0001 0071             PHASE_3_ON;
0003c3 9859      	CBI  0xB,1
                 ; 0001 0072             break;
                 ; 0001 0073         }
                 ; 0001 0074     }
                 _0x2003E:
                 ; 0001 0075     delay_us(100);
                +
0003c4 e588     +LDI R24 , LOW ( 600 )
0003c5 e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
0003c6 9701     +SBIW R24 , 1
0003c7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 0076     addr &= 0x3F;
0003c8 85ea      	LDD  R30,Y+10
0003c9 73ef      	ANDI R30,LOW(0x3F)
0003ca 87ea      	STD  Y+10,R30
                 ; 0001 0077     SPI_7753_SEND(addr);
0003cb 85aa      	LDD  R26,Y+10
0003cc df51      	RCALL _SPI_7753_SEND
                 ; 0001 0078     delay_us(100);
                +
0003cd e588     +LDI R24 , LOW ( 600 )
0003ce e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
0003cf 9701     +SBIW R24 , 1
0003d0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 0079     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
0003d1 e010      	LDI  R17,LOW(0)
                 _0x20055:
0003d2 85e9      	LDD  R30,Y+9
0003d3 171e      	CP   R17,R30
0003d4 f470      	BRSH _0x20056
0003d5 2fe1      	MOV  R30,R17
0003d6 e0f0      	LDI  R31,0
0003d7 01de      	MOVW R26,R28
0003d8 9615      	ADIW R26,5
0003d9 0fea      	ADD  R30,R26
0003da 1ffb      	ADC  R31,R27
0003db 93ff      	PUSH R31
0003dc 93ef      	PUSH R30
0003dd df5c      	RCALL _SPI_7753_RECEIVE
0003de 91af      	POP  R26
0003df 91bf      	POP  R27
0003e0 93ec      	ST   X,R30
0003e1 5f1f      	SUBI R17,-1
0003e2 cfef      	RJMP _0x20055
                 _0x20056:
                 ; 0001 007A delay_us(100);
                +
0003e3 e588     +LDI R24 , LOW ( 600 )
0003e4 e092     +LDI R25 , HIGH ( 600 )
                +__DELAY_USW_LOOP :
0003e5 9701     +SBIW R24 , 1
0003e6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 600
                 ; 0001 007B     PHASE_1_OFF;
0003e7 9a28      	SBI  0x5,0
                 ; 0001 007C     PHASE_2_OFF;
0003e8 9a59      	SBI  0xB,1
                 ; 0001 007D     PHASE_3_OFF;
0003e9 9a59      	SBI  0xB,1
                 ; 0001 007E     res = 0;
0003ea e0e0      	LDI  R30,LOW(0)
                +
0003eb 83e9     +STD Y + 1 , R30
0003ec 83ea     +STD Y + 1 + 1 , R30
0003ed 83eb     +STD Y + 1 + 2 , R30
0003ee 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 007F     for(i=0;i<num_data;i++)
0003ef e010      	LDI  R17,LOW(0)
                 _0x2005E:
0003f0 85e9      	LDD  R30,Y+9
0003f1 171e      	CP   R17,R30
0003f2 f4f0      	BRSH _0x2005F
                 ; 0001 0080     {
                 ; 0001 0081         res <<= 8;
                +
0003f3 81a9     +LDD R26 , Y + 1
0003f4 81ba     +LDD R27 , Y + 1 + 1
0003f5 818b     +LDD R24 , Y + 1 + 2
0003f6 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0003f7 e0e8      	LDI  R30,LOW(8)
0003f8 d2af      	RCALL __LSLD12
                +
0003f9 83e9     +STD Y + 1 , R30
0003fa 83fa     +STD Y + 1 + 1 , R31
0003fb 836b     +STD Y + 1 + 2 , R22
0003fc 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0001 0082         res += data[i];
0003fd 2fe1      	MOV  R30,R17
0003fe e0f0      	LDI  R31,0
0003ff 01de      	MOVW R26,R28
000400 9615      	ADIW R26,5
000401 0fae      	ADD  R26,R30
000402 1fbf      	ADC  R27,R31
000403 91ec      	LD   R30,X
000404 e0f0      	LDI  R31,0
                +
000405 81a9     +LDD R26 , Y + 1
000406 81ba     +LDD R27 , Y + 1 + 1
000407 818b     +LDD R24 , Y + 1 + 2
000408 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000409 d2af      	RCALL __CWD1
00040a d288      	RCALL __ADDD12
                +
00040b 83e9     +STD Y + 1 , R30
00040c 83fa     +STD Y + 1 + 1 , R31
00040d 836b     +STD Y + 1 + 2 , R22
00040e 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0001 0083     }
00040f 5f1f      	SUBI R17,-1
000410 cfdf      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 0084     return res;
                +
000411 81e9     +LDD R30 , Y + 1
000412 81fa     +LDD R31 , Y + 1 + 1
000413 816b     +LDD R22 , Y + 1 + 2
000414 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000415 8118      	LDD  R17,Y+0
000416 962c      	ADIW R28,12
000417 9508      	RET
                 ; 0001 0085 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0001 0088 {
                 _ADE7753_INIT:
                 ; .FSTART _ADE7753_INIT
                 ; 0001 0089     unsigned long   res;
                 ; 0001 008A     ADE7753_WRITE(1,MODE,0x00,0x4C,0x00);
000418 9724      	SBIW R28,4
                 ;	res -> Y+0
000419 e0e1      	LDI  R30,LOW(1)
00041a 93ea      	ST   -Y,R30
00041b e0e9      	LDI  R30,LOW(9)
00041c 93ea      	ST   -Y,R30
00041d e0e2      	LDI  R30,LOW(2)
00041e 93ea      	ST   -Y,R30
00041f e0e0      	LDI  R30,LOW(0)
000420 93ea      	ST   -Y,R30
000421 e4ec      	LDI  R30,LOW(76)
000422 93ea      	ST   -Y,R30
000423 e0a0      	LDI  R26,LOW(0)
000424 df2d      	RCALL _ADE7753_WRITE
                 ; 0001 008B     delay_ms(200);
000425 eca8      	LDI  R26,LOW(200)
000426 e0b0      	LDI  R27,0
000427 d188      	RCALL _delay_ms
                 ; 0001 008C     // ADE7753_WRITE(1,MODE,0x80,0x0C,0x00);
                 ; 0001 008D     delay_ms(200);
000428 eca8      	LDI  R26,LOW(200)
000429 e0b0      	LDI  R27,0
00042a d185      	RCALL _delay_ms
                 ; 0001 008E     // ADE7753_WRITE(1,RSTSTATUS,0x00,0x00,0x00);
                 ; 0001 008F     // delay_ms(200);
                 ; 0001 0090     // ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0001 0091     // res = ADE7753_READ(1,SAGLVL);
                 ; 0001 0092     // delay_ms(200);
                 ; 0001 0093     // ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0001 0094     // res = ADE7753_READ(1,SAGCYC);
                 ; 0001 0095     // delay_ms(200);
                 ; 0001 0096 }
00042b 9624      	ADIW R28,4
00042c 9508      	RET
                 ; .FEND
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned char   Uc_led_count = 1;
                 
                 	.DSEG
                 ;unsigned char   Uc_led_data = 0;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;bit   Bit_Led1_Warning = 0;
                 ;bit   Bit_Led2_Warning = 0;
                 ;
                 ;unsigned int   Uint_Warning_Count = 0;
                 ;
                 ;unsigned char   BCDLED[11]={0xEE,0x88,0xB6,0xBC,0xD8,0x7C,0x7E,0xA8,0xFE,0xFC,0x00};
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_first,unsigned char  byte_second,unsigned char  byte_t ...
                 ; 0002 001B {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 001C     unsigned char   i;
                 ; 0002 001D     unsigned char   data[4];
                 ; 0002 001E     for(i=0;i<4;i++)    data[i] = 0;
00042d 93aa      	ST   -Y,R26
00042e 9724      	SBIW R28,4
00042f 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+8
                 ;	byte_first -> Y+7
                 ;	byte_second -> Y+6
                 ;	byte_third -> Y+5
                 ;	i -> R17
                 ;	data -> Y+1
000430 e010      	LDI  R17,LOW(0)
                 _0x40007:
000431 3014      	CPI  R17,4
000432 f450      	BRSH _0x40008
000433 2fe1      	MOV  R30,R17
000434 e0f0      	LDI  R31,0
000435 01de      	MOVW R26,R28
000436 9611      	ADIW R26,1
000437 0fae      	ADD  R26,R30
000438 1fbf      	ADC  R27,R31
000439 e0e0      	LDI  R30,LOW(0)
00043a 93ec      	ST   X,R30
00043b 5f1f      	SUBI R17,-1
00043c cff4      	RJMP _0x40007
                 _0x40008:
                 ; 0002 001F data[0] = byte_first;
00043d 81ef      	LDD  R30,Y+7
00043e 83e9      	STD  Y+1,R30
                 ; 0002 0020     data[1] = byte_second;
00043f 81ee      	LDD  R30,Y+6
000440 83ea      	STD  Y+2,R30
                 ; 0002 0021     data[2] = byte_third;
000441 81ed      	LDD  R30,Y+5
000442 83eb      	STD  Y+3,R30
                 ; 0002 0022 
                 ; 0002 0023     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
000443 e010      	LDI  R17,LOW(0)
                 _0x4000A:
000444 85e8      	LDD  R30,Y+8
000445 e0f0      	LDI  R31,0
000446 9731      	SBIW R30,1
000447 2fa1      	MOV  R26,R17
000448 e0b0      	LDI  R27,0
000449 17ae      	CP   R26,R30
00044a 07bf      	CPC  R27,R31
00044b f464      	BRGE _0x4000B
00044c 2fe1      	MOV  R30,R17
00044d e0f0      	LDI  R31,0
00044e 01de      	MOVW R26,R28
00044f 9611      	ADIW R26,1
000450 0fae      	ADD  R26,R30
000451 1fbf      	ADC  R27,R31
000452 91ec      	LD   R30,X
000453 93ea      	ST   -Y,R30
000454 e0a0      	LDI  R26,LOW(0)
000455 d13f      	RCALL _SPI_SENDBYTE
000456 5f1f      	SUBI R17,-1
000457 cfec      	RJMP _0x4000A
                 _0x4000B:
                 ; 0002 0024 SPI_SENDBYTE(data[i],1);
000458 2fe1      	MOV  R30,R17
000459 e0f0      	LDI  R31,0
00045a 01de      	MOVW R26,R28
00045b 9611      	ADIW R26,1
00045c 0fae      	ADD  R26,R30
00045d 1fbf      	ADC  R27,R31
00045e 91ec      	LD   R30,X
00045f 93ea      	ST   -Y,R30
000460 e0a1      	LDI  R26,LOW(1)
000461 d133      	RCALL _SPI_SENDBYTE
                 ; 0002 0025 }
000462 8118      	LDD  R17,Y+0
000463 9629      	ADIW R28,9
000464 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0002 002E {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 002F     unsigned char   byte1,byte2,byte3;
                 ; 0002 0030     unsigned char    data;
                 ; 0002 0031     unsigned char   bit_left;
                 ; 0002 0032     bit_left = 0x01;
000465 d2c8      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
000466 e051      	LDI  R21,LOW(1)
                 ; 0002 0033     byte1 = 0;
000467 e010      	LDI  R17,LOW(0)
                 ; 0002 0034     byte2 = 0;
000468 e000      	LDI  R16,LOW(0)
                 ; 0002 0035     byte3 = 0;
000469 e030      	LDI  R19,LOW(0)
                 ; 0002 0036 
                 ; 0002 0037     Uc_Select_led++;
00046a 91e0 02f4 	LDS  R30,_Uc_Select_led
00046c 5fef      	SUBI R30,-LOW(1)
00046d 93e0 02f4 	STS  _Uc_Select_led,R30
                 ; 0002 0038     bit_left <<= (Uc_Select_led-1);
00046f 50e1      	SUBI R30,LOW(1)
000470 2fa5      	MOV  R26,R21
000471 d22e      	RCALL __LSLB12
000472 2f5e      	MOV  R21,R30
                 ; 0002 0039     if(Uc_Select_led > 8)
000473 91a0 02f4 	LDS  R26,_Uc_Select_led
000475 30a9      	CPI  R26,LOW(0x9)
000476 f020      	BRLO _0x4000C
                 ; 0002 003A     {
                 ; 0002 003B         Uc_Select_led = 1;
000477 e0e1      	LDI  R30,LOW(1)
000478 93e0 02f4 	STS  _Uc_Select_led,R30
                 ; 0002 003C         bit_left = 0x01;
00047a e051      	LDI  R21,LOW(1)
                 ; 0002 003D     }
                 ; 0002 003E     /* 7-seg 1*/
                 ; 0002 003F     data = Uint_data_led1/1000;
                 _0x4000C:
00047b 91a0 0200 	LDS  R26,_Uint_data_led1
00047d 91b0 0201 	LDS  R27,_Uint_data_led1+1
00047f eee8      	LDI  R30,LOW(1000)
000480 e0f3      	LDI  R31,HIGH(1000)
000481 d25c      	RCALL __DIVW21U
000482 2f2e      	MOV  R18,R30
                 ; 0002 0040     byte1 = BCDLED[data];
000483 e0f0      	LDI  R31,0
000484 50e9      	SUBI R30,LOW(-_BCDLED)
000485 4ffd      	SBCI R31,HIGH(-_BCDLED)
000486 8110      	LD   R17,Z
                 ; 0002 0041     if(Bit_Led1_Warning && Uint_Warning_Count > TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000487 9bf0      	SBIS 0x1E,0
000488 c008      	RJMP _0x4000E
000489 91a0 02f5 	LDS  R26,_Uint_Warning_Count
00048b 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
00048d 3ca9      	CPI  R26,LOW(0xC9)
00048e e0e0      	LDI  R30,HIGH(0xC9)
00048f 07be      	CPC  R27,R30
000490 f408      	BRSH _0x4000F
                 _0x4000E:
000491 c002      	RJMP _0x4000D
                 _0x4000F:
                +
000492 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0042     if(byte1 & bit_left) byte3 |= 0x20;
                 _0x4000D:
000494 2fe5      	MOV  R30,R21
000495 23e1      	AND  R30,R17
000496 f009      	BREQ _0x40010
000497 6230      	ORI  R19,LOW(32)
                 ; 0002 0043     data = Uint_data_led1/100%10;
                 _0x40010:
000498 91a0 0200 	LDS  R26,_Uint_data_led1
00049a 91b0 0201 	LDS  R27,_Uint_data_led1+1
00049c e6e4      	LDI  R30,LOW(100)
00049d e0f0      	LDI  R31,HIGH(100)
00049e d23f      	RCALL __DIVW21U
00049f 01df      	MOVW R26,R30
0004a0 e0ea      	LDI  R30,LOW(10)
0004a1 e0f0      	LDI  R31,HIGH(10)
0004a2 d273      	RCALL __MODW21U
0004a3 2f2e      	MOV  R18,R30
                 ; 0002 0044     byte1 = BCDLED[data];
0004a4 e0f0      	LDI  R31,0
0004a5 50e9      	SUBI R30,LOW(-_BCDLED)
0004a6 4ffd      	SBCI R31,HIGH(-_BCDLED)
0004a7 8110      	LD   R17,Z
                 ; 0002 0045     if(Bit_Led1_Warning && Uint_Warning_Count > TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
0004a8 9bf0      	SBIS 0x1E,0
0004a9 c008      	RJMP _0x40012
0004aa 91a0 02f5 	LDS  R26,_Uint_Warning_Count
0004ac 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
0004ae 3ca9      	CPI  R26,LOW(0xC9)
0004af e0e0      	LDI  R30,HIGH(0xC9)
0004b0 07be      	CPC  R27,R30
0004b1 f408      	BRSH _0x40013
                 _0x40012:
0004b2 c002      	RJMP _0x40011
                 _0x40013:
                +
0004b3 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0046     if(byte1 & bit_left) byte3 |= 0x40;
                 _0x40011:
0004b5 2fe5      	MOV  R30,R21
0004b6 23e1      	AND  R30,R17
0004b7 f009      	BREQ _0x40014
0004b8 6430      	ORI  R19,LOW(64)
                 ; 0002 0047     data = Uint_data_led1/10%10;
                 _0x40014:
0004b9 91a0 0200 	LDS  R26,_Uint_data_led1
0004bb 91b0 0201 	LDS  R27,_Uint_data_led1+1
0004bd e0ea      	LDI  R30,LOW(10)
0004be e0f0      	LDI  R31,HIGH(10)
0004bf d21e      	RCALL __DIVW21U
0004c0 01df      	MOVW R26,R30
0004c1 e0ea      	LDI  R30,LOW(10)
0004c2 e0f0      	LDI  R31,HIGH(10)
0004c3 d252      	RCALL __MODW21U
0004c4 2f2e      	MOV  R18,R30
                 ; 0002 0048     byte1 = BCDLED[data];
0004c5 e0f0      	LDI  R31,0
0004c6 50e9      	SUBI R30,LOW(-_BCDLED)
0004c7 4ffd      	SBCI R31,HIGH(-_BCDLED)
0004c8 8110      	LD   R17,Z
                 ; 0002 0049     byte1 |= 0x01;
0004c9 6011      	ORI  R17,LOW(1)
                 ; 0002 004A     if(Bit_Led1_Warning && Uint_Warning_Count > TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
0004ca 9bf0      	SBIS 0x1E,0
0004cb c008      	RJMP _0x40016
0004cc 91a0 02f5 	LDS  R26,_Uint_Warning_Count
0004ce 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
0004d0 3ca9      	CPI  R26,LOW(0xC9)
0004d1 e0e0      	LDI  R30,HIGH(0xC9)
0004d2 07be      	CPC  R27,R30
0004d3 f408      	BRSH _0x40017
                 _0x40016:
0004d4 c002      	RJMP _0x40015
                 _0x40017:
                +
0004d5 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 004B     if(byte1 & bit_left) byte3 |= 0x80;
                 _0x40015:
0004d7 2fe5      	MOV  R30,R21
0004d8 23e1      	AND  R30,R17
0004d9 f009      	BREQ _0x40018
0004da 6830      	ORI  R19,LOW(128)
                 ; 0002 004C     data = Uint_data_led1%10;
                 _0x40018:
0004db 91a0 0200 	LDS  R26,_Uint_data_led1
0004dd 91b0 0201 	LDS  R27,_Uint_data_led1+1
0004df e0ea      	LDI  R30,LOW(10)
0004e0 e0f0      	LDI  R31,HIGH(10)
0004e1 d234      	RCALL __MODW21U
0004e2 2f2e      	MOV  R18,R30
                 ; 0002 004D     byte1 = BCDLED[data];
0004e3 e0f0      	LDI  R31,0
0004e4 50e9      	SUBI R30,LOW(-_BCDLED)
0004e5 4ffd      	SBCI R31,HIGH(-_BCDLED)
0004e6 8110      	LD   R17,Z
                 ; 0002 004E     if(Bit_Led1_Warning && Uint_Warning_Count > TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
0004e7 9bf0      	SBIS 0x1E,0
0004e8 c008      	RJMP _0x4001A
0004e9 91a0 02f5 	LDS  R26,_Uint_Warning_Count
0004eb 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
0004ed 3ca9      	CPI  R26,LOW(0xC9)
0004ee e0e0      	LDI  R30,HIGH(0xC9)
0004ef 07be      	CPC  R27,R30
0004f0 f408      	BRSH _0x4001B
                 _0x4001A:
0004f1 c002      	RJMP _0x40019
                 _0x4001B:
                +
0004f2 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 004F     if(byte1 & bit_left) byte3 |= 0x10;
                 _0x40019:
0004f4 2fe5      	MOV  R30,R21
0004f5 23e1      	AND  R30,R17
0004f6 f009      	BREQ _0x4001C
0004f7 6130      	ORI  R19,LOW(16)
                 ; 0002 0050     /* 7-seg 2 */
                 ; 0002 0051     data = Uint_data_led2/1000;
                 _0x4001C:
0004f8 91a0 0202 	LDS  R26,_Uint_data_led2
0004fa 91b0 0203 	LDS  R27,_Uint_data_led2+1
0004fc eee8      	LDI  R30,LOW(1000)
0004fd e0f3      	LDI  R31,HIGH(1000)
0004fe d1df      	RCALL __DIVW21U
0004ff 2f2e      	MOV  R18,R30
                 ; 0002 0052     byte1 = BCDLED[data];
000500 e0f0      	LDI  R31,0
000501 50e9      	SUBI R30,LOW(-_BCDLED)
000502 4ffd      	SBCI R31,HIGH(-_BCDLED)
000503 8110      	LD   R17,Z
                 ; 0002 0053     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000504 9bf1      	SBIS 0x1E,1
000505 c008      	RJMP _0x4001E
000506 91a0 02f5 	LDS  R26,_Uint_Warning_Count
000508 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
00050a 3ca8      	CPI  R26,LOW(0xC8)
00050b e0e0      	LDI  R30,HIGH(0xC8)
00050c 07be      	CPC  R27,R30
00050d f008      	BRLO _0x4001F
                 _0x4001E:
00050e c002      	RJMP _0x4001D
                 _0x4001F:
                +
00050f 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0054     if(byte1 & bit_left) byte3 |= 0x08;
                 _0x4001D:
000511 2fe5      	MOV  R30,R21
000512 23e1      	AND  R30,R17
000513 f009      	BREQ _0x40020
000514 6038      	ORI  R19,LOW(8)
                 ; 0002 0055     data = Uint_data_led2/100%10;
                 _0x40020:
000515 91a0 0202 	LDS  R26,_Uint_data_led2
000517 91b0 0203 	LDS  R27,_Uint_data_led2+1
000519 e6e4      	LDI  R30,LOW(100)
00051a e0f0      	LDI  R31,HIGH(100)
00051b d1c2      	RCALL __DIVW21U
00051c 01df      	MOVW R26,R30
00051d e0ea      	LDI  R30,LOW(10)
00051e e0f0      	LDI  R31,HIGH(10)
00051f d1f6      	RCALL __MODW21U
000520 2f2e      	MOV  R18,R30
                 ; 0002 0056     byte1 = BCDLED[data];
000521 e0f0      	LDI  R31,0
000522 50e9      	SUBI R30,LOW(-_BCDLED)
000523 4ffd      	SBCI R31,HIGH(-_BCDLED)
000524 8110      	LD   R17,Z
                 ; 0002 0057     byte1 |= 0x01;
000525 6011      	ORI  R17,LOW(1)
                 ; 0002 0058     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000526 9bf1      	SBIS 0x1E,1
000527 c008      	RJMP _0x40022
000528 91a0 02f5 	LDS  R26,_Uint_Warning_Count
00052a 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
00052c 3ca8      	CPI  R26,LOW(0xC8)
00052d e0e0      	LDI  R30,HIGH(0xC8)
00052e 07be      	CPC  R27,R30
00052f f008      	BRLO _0x40023
                 _0x40022:
000530 c002      	RJMP _0x40021
                 _0x40023:
                +
000531 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0059     if(byte1 & bit_left) byte3 |= 0x04;
                 _0x40021:
000533 2fe5      	MOV  R30,R21
000534 23e1      	AND  R30,R17
000535 f009      	BREQ _0x40024
000536 6034      	ORI  R19,LOW(4)
                 ; 0002 005A     data = Uint_data_led2/10%10;
                 _0x40024:
000537 91a0 0202 	LDS  R26,_Uint_data_led2
000539 91b0 0203 	LDS  R27,_Uint_data_led2+1
00053b e0ea      	LDI  R30,LOW(10)
00053c e0f0      	LDI  R31,HIGH(10)
00053d d1a0      	RCALL __DIVW21U
00053e 01df      	MOVW R26,R30
00053f e0ea      	LDI  R30,LOW(10)
000540 e0f0      	LDI  R31,HIGH(10)
000541 d1d4      	RCALL __MODW21U
000542 2f2e      	MOV  R18,R30
                 ; 0002 005B     byte1 = BCDLED[data];
000543 e0f0      	LDI  R31,0
000544 50e9      	SUBI R30,LOW(-_BCDLED)
000545 4ffd      	SBCI R31,HIGH(-_BCDLED)
000546 8110      	LD   R17,Z
                 ; 0002 005C     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000547 9bf1      	SBIS 0x1E,1
000548 c008      	RJMP _0x40026
000549 91a0 02f5 	LDS  R26,_Uint_Warning_Count
00054b 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
00054d 3ca8      	CPI  R26,LOW(0xC8)
00054e e0e0      	LDI  R30,HIGH(0xC8)
00054f 07be      	CPC  R27,R30
000550 f008      	BRLO _0x40027
                 _0x40026:
000551 c002      	RJMP _0x40025
                 _0x40027:
                +
000552 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 005D     if(byte1 & bit_left) byte3 |= 0x02;
                 _0x40025:
000554 2fe5      	MOV  R30,R21
000555 23e1      	AND  R30,R17
000556 f009      	BREQ _0x40028
000557 6032      	ORI  R19,LOW(2)
                 ; 0002 005E     data = Uint_data_led2%10;
                 _0x40028:
000558 91a0 0202 	LDS  R26,_Uint_data_led2
00055a 91b0 0203 	LDS  R27,_Uint_data_led2+1
00055c e0ea      	LDI  R30,LOW(10)
00055d e0f0      	LDI  R31,HIGH(10)
00055e d1b7      	RCALL __MODW21U
00055f 2f2e      	MOV  R18,R30
                 ; 0002 005F     byte1 = BCDLED[data];
000560 e0f0      	LDI  R31,0
000561 50e9      	SUBI R30,LOW(-_BCDLED)
000562 4ffd      	SBCI R31,HIGH(-_BCDLED)
000563 8110      	LD   R17,Z
                 ; 0002 0060     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000564 9bf1      	SBIS 0x1E,1
000565 c008      	RJMP _0x4002A
000566 91a0 02f5 	LDS  R26,_Uint_Warning_Count
000568 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
00056a 3ca8      	CPI  R26,LOW(0xC8)
00056b e0e0      	LDI  R30,HIGH(0xC8)
00056c 07be      	CPC  R27,R30
00056d f008      	BRLO _0x4002B
                 _0x4002A:
00056e c002      	RJMP _0x40029
                 _0x4002B:
                +
00056f 9110 0301+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0061     if(byte1 & bit_left) byte3 |= 0x01;
                 _0x40029:
000571 2fe5      	MOV  R30,R21
000572 23e1      	AND  R30,R17
000573 f009      	BREQ _0x4002C
000574 6031      	ORI  R19,LOW(1)
                 ; 0002 0062     bit_left = 0xff - bit_left;
                 _0x4002C:
000575 efef      	LDI  R30,LOW(255)
000576 1be5      	SUB  R30,R21
000577 2f5e      	MOV  R21,R30
                 ; 0002 0063     // SEND_DATA_LED(2,bit_left,byte3,byte2);
                 ; 0002 0064     SEND_DATA_LED(2,byte3,bit_left,byte2);
000578 e0e2      	LDI  R30,LOW(2)
000579 93ea      	ST   -Y,R30
00057a 933a      	ST   -Y,R19
00057b 935a      	ST   -Y,R21
00057c 2fa0      	MOV  R26,R16
00057d deaf      	RCALL _SEND_DATA_LED
                 ; 0002 0065 
                 ; 0002 0066     Uint_Warning_Count++;
00057e efa5      	LDI  R26,LOW(_Uint_Warning_Count)
00057f e0b2      	LDI  R27,HIGH(_Uint_Warning_Count)
000580 91ed      	LD   R30,X+
000581 91fd      	LD   R31,X+
000582 9631      	ADIW R30,1
000583 93fe      	ST   -X,R31
000584 93ee      	ST   -X,R30
                 ; 0002 0067     if(Uint_Warning_Count > TIME_WARNING_DISPLAY)  Uint_Warning_Count = 0;
000585 91a0 02f5 	LDS  R26,_Uint_Warning_Count
000587 91b0 02f6 	LDS  R27,_Uint_Warning_Count+1
000589 39a1      	CPI  R26,LOW(0x191)
00058a e0e1      	LDI  R30,HIGH(0x191)
00058b 07be      	CPC  R27,R30
00058c f028      	BRLO _0x4002D
00058d e0e0      	LDI  R30,LOW(0)
00058e 93e0 02f5 	STS  _Uint_Warning_Count,R30
000590 93e0 02f6 	STS  _Uint_Warning_Count+1,R30
                 ; 0002 0068 }
                 _0x4002D:
000592 d1a2      	RCALL __LOADLOCR6
000593 9626      	ADIW R28,6
000594 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;// void    SELECT_LED(unsigned char num_led,unsigned char    data)
                 ;// {
                 ;//     unsigned char   byte1,byte2,byte3;
                 ;//     byte1 = 0;
                 ;//     byte2 = 0;
                 ;//     byte3 = 0;
                 ;//     switch(num_led)
                 ;//     {
                 ;//         case    1:
                 ;//         {
                 ;//             byte3 = 0x01;
                 ;//             byte2 = 0x01;
                 ;//             break;
                 ;//         }
                 ;//         case    2:
                 ;//         {
                 ;//             byte3 = 0x02;
                 ;//             byte2 = 0x02;
                 ;//             //byte1 = 0x04;
                 ;//             break;
                 ;//         }
                 ;//         case    3:
                 ;//         {
                 ;//             byte3 = 0x04;
                 ;//             byte2 = 0x04;
                 ;//             byte1 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    4:
                 ;//         {
                 ;//             byte3 = 0x08;
                 ;//             byte2 = 0x08;
                 ;//             break;
                 ;//         }
                 ;//         case    5:
                 ;//         {
                 ;//             byte3 = 0x40;
                 ;//             byte2 = 0x80;
                 ;//             break;
                 ;//         }
                 ;//         case    6:
                 ;//         {
                 ;//             byte3 = 0x20;
                 ;//             byte2 = 0x40;
                 ;//             byte1 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    7:
                 ;//         {
                 ;//             byte3 = 0x10;
                 ;//             byte2 = 0x20;
                 ;//             break;
                 ;//         }
                 ;//         case    8:
                 ;//         {
                 ;//             byte3 = 0x80;
                 ;//             byte2 = 0x10;
                 ;//             break;
                 ;//         }
                 ;//         case    9:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    10:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x20;
                 ;//             byte1 = 0x04;
                 ;//             break;
                 ;//         }
                 ;//         case    11:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x10;
                 ;//             break;
                 ;//         }
                 ;//         case    12:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x80;
                 ;//             break;
                 ;//         }
                 ;//     }
                 ;//     switch(data)
                 ;//     {
                 ;//         case    0:
                 ;//         {
                 ;//             byte1 |= 0xB7;
                 ;//             break;
                 ;//         }
                 ;//         case    1:
                 ;//         {
                 ;//             byte1 |= 0x81;
                 ;//             break;
                 ;//         }
                 ;//         case    2:
                 ;//         {
                 ;//             byte1 |= 0x3D;
                 ;//             break;
                 ;//         }
                 ;//         case    3:
                 ;//         {
                 ;//             byte1 |= 0xAD;
                 ;//             break;
                 ;//         }
                 ;//         case    4:
                 ;//         {
                 ;//             byte1 |= 0x8B;
                 ;//             break;
                 ;//         }
                 ;//         case    5:
                 ;//         {
                 ;//             byte1 |= 0xAE;
                 ;//             break;
                 ;//         }
                 ;//         case    6:
                 ;//         {
                 ;//             byte1 |= 0xBE;
                 ;//             break;
                 ;//         }
                 ;//         case    7:
                 ;//         {
                 ;//             byte1 |= 0x85;
                 ;//             break;
                 ;//         }
                 ;//         case    8:
                 ;//         {
                 ;//             byte1 |= 0xBF;
                 ;//             break;
                 ;//         }
                 ;//         case    9:
                 ;//         {
                 ;//             byte1 |= 0xAF;
                 ;//             break;
                 ;//         }
                 ;//     }
                 ;//     SEND_DATA_LED(2,byte1,byte2,byte3);
                 ;// }
                 ;
                 ;// void SCAN_LED(void)
                 ;// {
                 ;//     if(Uc_led_count == 1)   Uc_led_data = Uint_data_led1/1000;
                 ;//     else if(Uc_led_count == 2)   Uc_led_data = (Uint_data_led1/100)%10;
                 ;//     else if(Uc_led_count == 3)   Uc_led_data = (Uint_data_led1/10)%10;
                 ;//     else if(Uc_led_count == 4)   Uc_led_data = (Uint_data_led1%10);
                 ;//     else if(Uc_led_count == 5)   Uc_led_data = Uint_data_led2/1000;
                 ;//     else if(Uc_led_count == 6)   Uc_led_data = (Uint_data_led2/100)%10;
                 ;//     else if(Uc_led_count == 7)   Uc_led_data = (Uint_data_led2/10)%10;
                 ;//     else if(Uc_led_count == 8)   Uc_led_data = (Uint_data_led2%10);
                 ;//     else if(Uc_led_count == 9)   Uc_led_data = Uint_data_led3/1000;
                 ;//     else if(Uc_led_count == 10)   Uc_led_data = (Uint_data_led3/100)%10;
                 ;//     else if(Uc_led_count == 11)   Uc_led_data = (Uint_data_led3/10)%10;
                 ;//     else if(Uc_led_count == 12)   Uc_led_data = (Uint_data_led3%10);
                 ;//     SELECT_LED(Uc_led_count,Uc_led_data);
                 ;//     Uc_led_count++;
                 ;//     if(Uc_led_count > NUM_LED_SCAN*4)    Uc_led_count = 1;
                 ;// }
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0003 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0003 0006     unsigned char   i;
                 ; 0003 0007     for(i=0;i<8;i++)
000595 93aa      	ST   -Y,R26
000596 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
000597 e010      	LDI  R17,LOW(0)
                 _0x60004:
000598 3018      	CPI  R17,8
000599 f470      	BRSH _0x60005
                 ; 0003 0008     {
                 ; 0003 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
00059a 81ea      	LDD  R30,Y+2
00059b 78e0      	ANDI R30,LOW(0x80)
00059c 38e0      	CPI  R30,LOW(0x80)
00059d f411      	BRNE _0x60006
00059e 9a2b      	SBI  0x5,3
                 ; 0003 000A         else    DO_SPI_MOSI = 0;
00059f c001      	RJMP _0x60009
                 _0x60006:
0005a0 982b      	CBI  0x5,3
                 ; 0003 000B         data <<= 1;
                 _0x60009:
0005a1 81ea      	LDD  R30,Y+2
0005a2 0fee      	LSL  R30
0005a3 83ea      	STD  Y+2,R30
                 ; 0003 000C         DO_SPI_SCK = 1;
0005a4 9a2d      	SBI  0x5,5
                 ; 0003 000D         DO_SPI_SCK = 0;
0005a5 982d      	CBI  0x5,5
                 ; 0003 000E     }
0005a6 5f1f      	SUBI R17,-1
0005a7 cff0      	RJMP _0x60004
                 _0x60005:
                 ; 0003 000F     if(action)
0005a8 81e9      	LDD  R30,Y+1
0005a9 30e0      	CPI  R30,0
0005aa f011      	BREQ _0x60010
                 ; 0003 0010     {
                 ; 0003 0011         DO_SPI_LATCH = 1;
0005ab 9a40      	SBI  0x8,0
                 ; 0003 0012         DO_SPI_LATCH = 0;
0005ac 9840      	CBI  0x8,0
                 ; 0003 0013     }
                 ; 0003 0014 }
                 _0x60010:
0005ad 8118      	LDD  R17,Y+0
                 _0x2000001:
0005ae 9623      	ADIW R28,3
0005af 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_data_led1:
000200           	.BYTE 0x2
                 _Uint_data_led2:
000202           	.BYTE 0x2
                 _Ul_Voltage_Buff:
000204           	.BYTE 0x78
                 _Ul_Current_Buff:
00027c           	.BYTE 0x78
                 _Uc_Select_led:
0002f4           	.BYTE 0x1
                 _Uint_Warning_Count:
0002f5           	.BYTE 0x2
                 _BCDLED:
0002f7           	.BYTE 0xB
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
0005b0 9610      	adiw r26,0
0005b1 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0005b2 e780     +LDI R24 , LOW ( 0x1770 )
0005b3 e197     +LDI R25 , HIGH ( 0x1770 )
                +__DELAY_USW_LOOP :
0005b4 9701     +SBIW R24 , 1
0005b5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1770
0005b6 95a8      	wdr
0005b7 9711      	sbiw r26,1
0005b8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0005b9 9508      	ret
                 
                 __ROUND_REPACK:
0005ba 2355      	TST  R21
0005bb f442      	BRPL __REPACK
0005bc 3850      	CPI  R21,0x80
0005bd f411      	BRNE __ROUND_REPACK0
0005be ffe0      	SBRS R30,0
0005bf c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005c0 9631      	ADIW R30,1
0005c1 1f69      	ADC  R22,R25
0005c2 1f79      	ADC  R23,R25
0005c3 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005c4 e850      	LDI  R21,0x80
0005c5 2757      	EOR  R21,R23
0005c6 f411      	BRNE __REPACK0
0005c7 935f      	PUSH R21
0005c8 c073      	RJMP __ZERORES
                 __REPACK0:
0005c9 3f5f      	CPI  R21,0xFF
0005ca f031      	BREQ __REPACK1
0005cb 0f66      	LSL  R22
0005cc 0c00      	LSL  R0
0005cd 9557      	ROR  R21
0005ce 9567      	ROR  R22
0005cf 2f75      	MOV  R23,R21
0005d0 9508      	RET
                 __REPACK1:
0005d1 935f      	PUSH R21
0005d2 2000      	TST  R0
0005d3 f00a      	BRMI __REPACK2
0005d4 c073      	RJMP __MAXRES
                 __REPACK2:
0005d5 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0005d6 e850      	LDI  R21,0x80
0005d7 2e19      	MOV  R1,R25
0005d8 2215      	AND  R1,R21
0005d9 0f88      	LSL  R24
0005da 1f99      	ROL  R25
0005db 2795      	EOR  R25,R21
0005dc 0f55      	LSL  R21
0005dd 9587      	ROR  R24
                 
                 __UNPACK1:
0005de e850      	LDI  R21,0x80
0005df 2e07      	MOV  R0,R23
0005e0 2205      	AND  R0,R21
0005e1 0f66      	LSL  R22
0005e2 1f77      	ROL  R23
0005e3 2775      	EOR  R23,R21
0005e4 0f55      	LSL  R21
0005e5 9567      	ROR  R22
0005e6 9508      	RET
                 
                 __CFD1U:
0005e7 9468      	SET
0005e8 c001      	RJMP __CFD1U0
                 __CFD1:
0005e9 94e8      	CLT
                 __CFD1U0:
0005ea 935f      	PUSH R21
0005eb dff2      	RCALL __UNPACK1
0005ec 3870      	CPI  R23,0x80
0005ed f018      	BRLO __CFD10
0005ee 3f7f      	CPI  R23,0xFF
0005ef f408      	BRCC __CFD10
0005f0 c04b      	RJMP __ZERORES
                 __CFD10:
0005f1 e156      	LDI  R21,22
0005f2 1b57      	SUB  R21,R23
0005f3 f4aa      	BRPL __CFD11
0005f4 9551      	NEG  R21
0005f5 3058      	CPI  R21,8
0005f6 f40e      	BRTC __CFD19
0005f7 3059      	CPI  R21,9
                 __CFD19:
0005f8 f030      	BRLO __CFD17
0005f9 efef      	SER  R30
0005fa efff      	SER  R31
0005fb ef6f      	SER  R22
0005fc e77f      	LDI  R23,0x7F
0005fd f977      	BLD  R23,7
0005fe c01a      	RJMP __CFD15
                 __CFD17:
0005ff 2777      	CLR  R23
000600 2355      	TST  R21
000601 f0b9      	BREQ __CFD15
                 __CFD18:
000602 0fee      	LSL  R30
000603 1fff      	ROL  R31
000604 1f66      	ROL  R22
000605 1f77      	ROL  R23
000606 955a      	DEC  R21
000607 f7d1      	BRNE __CFD18
000608 c010      	RJMP __CFD15
                 __CFD11:
000609 2777      	CLR  R23
                 __CFD12:
00060a 3058      	CPI  R21,8
00060b f028      	BRLO __CFD13
00060c 2fef      	MOV  R30,R31
00060d 2ff6      	MOV  R31,R22
00060e 2f67      	MOV  R22,R23
00060f 5058      	SUBI R21,8
000610 cff9      	RJMP __CFD12
                 __CFD13:
000611 2355      	TST  R21
000612 f031      	BREQ __CFD15
                 __CFD14:
000613 9576      	LSR  R23
000614 9567      	ROR  R22
000615 95f7      	ROR  R31
000616 95e7      	ROR  R30
000617 955a      	DEC  R21
000618 f7d1      	BRNE __CFD14
                 __CFD15:
000619 2000      	TST  R0
00061a f40a      	BRPL __CFD16
00061b d07c      	RCALL __ANEGD1
                 __CFD16:
00061c 915f      	POP  R21
00061d 9508      	RET
                 
                 __CDF1U:
00061e 9468      	SET
00061f c001      	RJMP __CDF1U0
                 __CDF1:
000620 94e8      	CLT
                 __CDF1U0:
000621 9730      	SBIW R30,0
000622 4060      	SBCI R22,0
000623 4070      	SBCI R23,0
000624 f0b1      	BREQ __CDF10
000625 2400      	CLR  R0
000626 f026      	BRTS __CDF11
000627 2377      	TST  R23
000628 f412      	BRPL __CDF11
000629 9400      	COM  R0
00062a d06d      	RCALL __ANEGD1
                 __CDF11:
00062b 2e17      	MOV  R1,R23
00062c e17e      	LDI  R23,30
00062d 2011      	TST  R1
                 __CDF12:
00062e f032      	BRMI __CDF13
00062f 957a      	DEC  R23
000630 0fee      	LSL  R30
000631 1fff      	ROL  R31
000632 1f66      	ROL  R22
000633 1c11      	ROL  R1
000634 cff9      	RJMP __CDF12
                 __CDF13:
000635 2fef      	MOV  R30,R31
000636 2ff6      	MOV  R31,R22
000637 2d61      	MOV  R22,R1
000638 935f      	PUSH R21
000639 df8a      	RCALL __REPACK
00063a 915f      	POP  R21
                 __CDF10:
00063b 9508      	RET
                 
                 __ZERORES:
00063c 27ee      	CLR  R30
00063d 27ff      	CLR  R31
00063e 2766      	CLR  R22
00063f 2777      	CLR  R23
000640 915f      	POP  R21
000641 9508      	RET
                 
                 __MINRES:
000642 efef      	SER  R30
000643 efff      	SER  R31
000644 e76f      	LDI  R22,0x7F
000645 ef7f      	SER  R23
000646 915f      	POP  R21
000647 9508      	RET
                 
                 __MAXRES:
000648 efef      	SER  R30
000649 efff      	SER  R31
00064a e76f      	LDI  R22,0x7F
00064b e77f      	LDI  R23,0x7F
00064c 915f      	POP  R21
00064d 9508      	RET
                 
                 __DIVF21:
00064e 935f      	PUSH R21
00064f df86      	RCALL __UNPACK
000650 3870      	CPI  R23,0x80
000651 f421      	BRNE __DIVF210
000652 2011      	TST  R1
                 __DIVF211:
000653 f40a      	BRPL __DIVF219
000654 cfed      	RJMP __MINRES
                 __DIVF219:
000655 cff2      	RJMP __MAXRES
                 __DIVF210:
000656 3890      	CPI  R25,0x80
000657 f409      	BRNE __DIVF218
                 __DIVF217:
000658 cfe3      	RJMP __ZERORES
                 __DIVF218:
000659 2401      	EOR  R0,R1
00065a 9408      	SEC
00065b 0b97      	SBC  R25,R23
00065c f41b      	BRVC __DIVF216
00065d f3d4      	BRLT __DIVF217
00065e 2000      	TST  R0
00065f cff3      	RJMP __DIVF211
                 __DIVF216:
000660 2f79      	MOV  R23,R25
000661 931f      	PUSH R17
000662 932f      	PUSH R18
000663 933f      	PUSH R19
000664 934f      	PUSH R20
000665 2411      	CLR  R1
000666 2711      	CLR  R17
000667 2722      	CLR  R18
000668 2733      	CLR  R19
000669 2744      	CLR  R20
00066a 2755      	CLR  R21
00066b e290      	LDI  R25,32
                 __DIVF212:
00066c 17ae      	CP   R26,R30
00066d 07bf      	CPC  R27,R31
00066e 0786      	CPC  R24,R22
00066f 0741      	CPC  R20,R17
000670 f030      	BRLO __DIVF213
000671 1bae      	SUB  R26,R30
000672 0bbf      	SBC  R27,R31
000673 0b86      	SBC  R24,R22
000674 0b41      	SBC  R20,R17
000675 9408      	SEC
000676 c001      	RJMP __DIVF214
                 __DIVF213:
000677 9488      	CLC
                 __DIVF214:
000678 1f55      	ROL  R21
000679 1f22      	ROL  R18
00067a 1f33      	ROL  R19
00067b 1c11      	ROL  R1
00067c 1faa      	ROL  R26
00067d 1fbb      	ROL  R27
00067e 1f88      	ROL  R24
00067f 1f44      	ROL  R20
000680 959a      	DEC  R25
000681 f751      	BRNE __DIVF212
000682 01f9      	MOVW R30,R18
000683 2d61      	MOV  R22,R1
000684 914f      	POP  R20
000685 913f      	POP  R19
000686 912f      	POP  R18
000687 911f      	POP  R17
000688 2366      	TST  R22
000689 f032      	BRMI __DIVF215
00068a 0f55      	LSL  R21
00068b 1fee      	ROL  R30
00068c 1fff      	ROL  R31
00068d 1f66      	ROL  R22
00068e 957a      	DEC  R23
00068f f243      	BRVS __DIVF217
                 __DIVF215:
000690 df29      	RCALL __ROUND_REPACK
000691 915f      	POP  R21
000692 9508      	RET
                 
                 __ADDD12:
000693 0fea      	ADD  R30,R26
000694 1ffb      	ADC  R31,R27
000695 1f68      	ADC  R22,R24
000696 1f79      	ADC  R23,R25
000697 9508      	RET
                 
                 __ANEGD1:
000698 95f0      	COM  R31
000699 9560      	COM  R22
00069a 9570      	COM  R23
00069b 95e1      	NEG  R30
00069c 4fff      	SBCI R31,-1
00069d 4f6f      	SBCI R22,-1
00069e 4f7f      	SBCI R23,-1
00069f 9508      	RET
                 
                 __LSLB12:
0006a0 23ee      	TST  R30
0006a1 2e0e      	MOV  R0,R30
0006a2 2fea      	MOV  R30,R26
0006a3 f019      	BREQ __LSLB12R
                 __LSLB12L:
0006a4 0fee      	LSL  R30
0006a5 940a      	DEC  R0
0006a6 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0006a7 9508      	RET
                 
                 __LSLD12:
0006a8 23ee      	TST  R30
0006a9 2e0e      	MOV  R0,R30
0006aa 01fd      	MOVW R30,R26
0006ab 01bc      	MOVW R22,R24
0006ac f031      	BREQ __LSLD12R
                 __LSLD12L:
0006ad 0fee      	LSL  R30
0006ae 1fff      	ROL  R31
0006af 1f66      	ROL  R22
0006b0 1f77      	ROL  R23
0006b1 940a      	DEC  R0
0006b2 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
0006b3 9508      	RET
                 
                 __LSLW2:
0006b4 0fee      	LSL  R30
0006b5 1fff      	ROL  R31
0006b6 0fee      	LSL  R30
0006b7 1fff      	ROL  R31
0006b8 9508      	RET
                 
                 __CWD1:
0006b9 2f6f      	MOV  R22,R31
0006ba 0f66      	ADD  R22,R22
0006bb 0b66      	SBC  R22,R22
0006bc 2f76      	MOV  R23,R22
0006bd 9508      	RET
                 
                 __MULD12U:
0006be 9f7a      	MUL  R23,R26
0006bf 2d70      	MOV  R23,R0
0006c0 9f6b      	MUL  R22,R27
0006c1 0d70      	ADD  R23,R0
0006c2 9ff8      	MUL  R31,R24
0006c3 0d70      	ADD  R23,R0
0006c4 9fe9      	MUL  R30,R25
0006c5 0d70      	ADD  R23,R0
0006c6 9f6a      	MUL  R22,R26
0006c7 2d60      	MOV  R22,R0
0006c8 0d71      	ADD  R23,R1
0006c9 9ffb      	MUL  R31,R27
0006ca 0d60      	ADD  R22,R0
0006cb 1d71      	ADC  R23,R1
0006cc 9fe8      	MUL  R30,R24
0006cd 0d60      	ADD  R22,R0
0006ce 1d71      	ADC  R23,R1
0006cf 2788      	CLR  R24
0006d0 9ffa      	MUL  R31,R26
0006d1 2df0      	MOV  R31,R0
0006d2 0d61      	ADD  R22,R1
0006d3 1f78      	ADC  R23,R24
0006d4 9feb      	MUL  R30,R27
0006d5 0df0      	ADD  R31,R0
0006d6 1d61      	ADC  R22,R1
0006d7 1f78      	ADC  R23,R24
0006d8 9fea      	MUL  R30,R26
0006d9 2de0      	MOV  R30,R0
0006da 0df1      	ADD  R31,R1
0006db 1f68      	ADC  R22,R24
0006dc 1f78      	ADC  R23,R24
0006dd 9508      	RET
                 
                 __DIVW21U:
0006de 2400      	CLR  R0
0006df 2411      	CLR  R1
0006e0 e190      	LDI  R25,16
                 __DIVW21U1:
0006e1 0faa      	LSL  R26
0006e2 1fbb      	ROL  R27
0006e3 1c00      	ROL  R0
0006e4 1c11      	ROL  R1
0006e5 1a0e      	SUB  R0,R30
0006e6 0a1f      	SBC  R1,R31
0006e7 f418      	BRCC __DIVW21U2
0006e8 0e0e      	ADD  R0,R30
0006e9 1e1f      	ADC  R1,R31
0006ea c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0006eb 60a1      	SBR  R26,1
                 __DIVW21U3:
0006ec 959a      	DEC  R25
0006ed f799      	BRNE __DIVW21U1
0006ee 01fd      	MOVW R30,R26
0006ef 01d0      	MOVW R26,R0
0006f0 9508      	RET
                 
                 __DIVD21U:
0006f1 933f      	PUSH R19
0006f2 934f      	PUSH R20
0006f3 935f      	PUSH R21
0006f4 2400      	CLR  R0
0006f5 2411      	CLR  R1
0006f6 2744      	CLR  R20
0006f7 2755      	CLR  R21
0006f8 e230      	LDI  R19,32
                 __DIVD21U1:
0006f9 0faa      	LSL  R26
0006fa 1fbb      	ROL  R27
0006fb 1f88      	ROL  R24
0006fc 1f99      	ROL  R25
0006fd 1c00      	ROL  R0
0006fe 1c11      	ROL  R1
0006ff 1f44      	ROL  R20
000700 1f55      	ROL  R21
000701 1a0e      	SUB  R0,R30
000702 0a1f      	SBC  R1,R31
000703 0b46      	SBC  R20,R22
000704 0b57      	SBC  R21,R23
000705 f428      	BRCC __DIVD21U2
000706 0e0e      	ADD  R0,R30
000707 1e1f      	ADC  R1,R31
000708 1f46      	ADC  R20,R22
000709 1f57      	ADC  R21,R23
00070a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00070b 60a1      	SBR  R26,1
                 __DIVD21U3:
00070c 953a      	DEC  R19
00070d f759      	BRNE __DIVD21U1
00070e 01fd      	MOVW R30,R26
00070f 01bc      	MOVW R22,R24
000710 01d0      	MOVW R26,R0
000711 01ca      	MOVW R24,R20
000712 915f      	POP  R21
000713 914f      	POP  R20
000714 913f      	POP  R19
000715 9508      	RET
                 
                 __MODW21U:
000716 dfc7      	RCALL __DIVW21U
000717 01fd      	MOVW R30,R26
000718 9508      	RET
                 
                 __GETD1P:
000719 91ed      	LD   R30,X+
00071a 91fd      	LD   R31,X+
00071b 916d      	LD   R22,X+
00071c 917c      	LD   R23,X
00071d 9713      	SBIW R26,3
00071e 9508      	RET
                 
                 __PUTDP1:
00071f 93ed      	ST   X+,R30
000720 93fd      	ST   X+,R31
000721 936d      	ST   X+,R22
000722 937c      	ST   X,R23
000723 9508      	RET
                 
                 __PUTDZ20:
000724 83a0      	ST   Z,R26
000725 83b1      	STD  Z+1,R27
000726 8382      	STD  Z+2,R24
000727 8393      	STD  Z+3,R25
000728 9508      	RET
                 
                 __CPD12:
000729 17ea      	CP   R30,R26
00072a 07fb      	CPC  R31,R27
00072b 0768      	CPC  R22,R24
00072c 0779      	CPC  R23,R25
00072d 9508      	RET
                 
                 __SAVELOCR6:
00072e 935a      	ST   -Y,R21
                 __SAVELOCR5:
00072f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000730 933a      	ST   -Y,R19
                 __SAVELOCR3:
000731 932a      	ST   -Y,R18
                 __SAVELOCR2:
000732 931a      	ST   -Y,R17
000733 930a      	ST   -Y,R16
000734 9508      	RET
                 
                 __LOADLOCR6:
000735 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000736 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000737 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000738 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000739 8119      	LDD  R17,Y+1
00073a 8108      	LD   R16,Y
00073b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega88P register use summary:
r0 :  47 r1 :  28 r2 :   0 r3 :   0 r4 :   0 r5 :   3 r6 :   3 r7 :   3 
r8 :   3 r9 :   4 r10:  11 r11:   3 r12:   3 r13:   5 r14:   5 r15:   2 
r16:  27 r17: 110 r18:  15 r19:  20 r20:  15 r21:  63 r22:  73 r23:  70 
r24:  66 r25:  43 r26: 213 r27: 109 r28:  40 r29:   1 r30: 443 r31: 176 
x  :  22 y  : 189 z  :  19 
Registers used: 32 out of 35 (91.4%)

ATmega88P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  46 add   :  43 
adiw  :  36 and   :  10 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  18 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   1 brmi  :   3 brne  :  35 brpl  :   5 brsh  :  26 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 cbi   :  19 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  30 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :  15 
cpc   :  27 cpi   :  41 cpse  :   0 dec   :  11 des   :   0 eor   :   4 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   3 ld    :  38 ldd   :  69 ldi   : 284 lds   :  49 lpm   :   7 
lsl   :  18 lsr   :   1 mov   :  85 movw  :  56 mul   :  10 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :  14 out   :  21 
pop   :  27 push  :  26 rcall : 116 ret   :  35 reti  :   1 rjmp  : 104 
rol   :  34 ror   :   7 sbc   :   9 sbci  :  13 sbi   :  30 sbic  :   2 
sbis  :  10 sbiw  :  26 sbr   :   2 sbrc  :   0 sbrs  :   1 sec   :   2 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  59 std   :  57 
sts   :  48 sub   :   5 subi  :  29 swap  :   0 tst   :  12 wdr   :   1 

Instructions used: 72 out of 114 (63.2%)

ATmega88P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e78   3664     40   3704    8192  45.2%
[.dseg] 0x000100 0x000302      0    258    258    1024  25.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 13 warnings
