
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm Tue Dec 04 21:57:31 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1092): warning: Register r10 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1094): warning: Register r12 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1095): warning: Register r13 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1096): warning: Register r14 already defined by the .DEF directive
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1097): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega88P
                 ;Program type           : Application
                 ;Clock frequency        : 20,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Speed
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega88P
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uint_Voltage=R5
                 	.DEF _Uint_Voltage_msb=R6
                 	.DEF _Uint_Current=R7
                 	.DEF _Uint_Current_msb=R8
                 	.DEF _Uc_Buff_Count=R10
                 	.DEF _Uc_Buzzer_Count=R9
                 	.DEF _Uc_Voltage_Duty=R12
                 	.DEF _Uc_Timer_Update_Display=R13
                 	.DEF _Uc_Timer_Update_Display_msb=R14
                 	.DEF _Uc_Select_led=R11
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c029      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c06a      	RJMP _timer2_ovf_isr
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
000015 cfea      	RJMP 0x00
000016 cfe9      	RJMP 0x00
000017 cfe8      	RJMP 0x00
000018 cfe7      	RJMP 0x00
000019 cfe6      	RJMP 0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001a 0100
00001b 0000      	.DB  0x0,0x1,0x0,0x0
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1139): warning: .cseg .db misalignment - padding zero byte
00001c 0000      	.DB  0x0
                 
                 _0x40003:
D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\AC-power-supply-adj\Debug\List\AC_Power_Supply_Adj.asm(1142): warning: .cseg .db misalignment - padding zero byte
00001d 0001      	.DB  0x1
                 _0x40004:
00001e 88ee
00001f bcb6
000020 7cd8
000021 a87e      	.DB  0xEE,0x88,0xB6,0xBC,0xD8,0x7C,0x7E,0xA8
000022 fcfe      	.DB  0xFE,0xFC
                 
                 __GLOBAL_INI_TBL:
000023 0005      	.DW  0x05
000024 000a      	.DW  0x0A
000025 0034      	.DW  __REG_VARS*2
                 
000026 000a      	.DW  0x0A
000027 02f6      	.DW  _BCDLED
000028 003c      	.DW  _0x40004*2
                 
                 _0xFFFFFFFF:
000029 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bff5      	OUT  MCUCR,R31
00002f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
000032 27bb      	CLR  R27
                 __CLEAR_REG:
000033 93ed      	ST   X+,R30
000034 958a      	DEC  R24
000035 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000036 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000037 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000038 e0a0      	LDI  R26,LOW(__SRAM_START)
000039 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 9701      	SBIW R24,1
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00004f e0e0      	LDI  R30,__GPIOR0_INIT
000050 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000051 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000052 bfed      	OUT  SPL,R30
000053 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000054 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000056 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000057 c21d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : AC_Power_Supply_Adj
                 ;Version : 1.0
                 ;Date    : 12/1/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Dieu che dien ap xoay chieu 35VAC
                 ;
                 ;
                 ;Chip type               : ATmega88P
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega88p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include "ADE7753.h"
                 ;#include "scan_led.h"
                 ;#include <delay.h>
                 ;
                 ;
                 ;#define ADC1    2
                 ;#define ADC_SET_VOLTAGE    1
                 ;#define ADC3    4
                 ;
                 ;#define ADC_SET_VOLTAGE_VALUE_MIN   100
                 ;#define ADC_SET_VOLTAGE_VALUE_MAX   1000
                 ;#define ADC_SET_VOLTAGE_RATIO   350
                 ;
                 ;#define BUZZER  PORTC.5
                 ;
                 ;#define BUZZER_ON   BUZZER = 1
                 ;#define BUZZER_OFF  BUZZER = 0
                 ;
                 ;
                 ;
                 ;#define PHASE_1 PORTB.1
                 ;#define PHASE_2 PORTB.2
                 ;
                 ;#define VOLTAGE_RATIO   12765
                 ;#define CURRENT_RATIO   566
                 ;
                 ;#define NUM_SAMPLE  30
                 ;#define NUM_FILTER  7
                 ;
                 ;#define TIME_UPDATE_DISPLAY  200
                 ;#define SPEED_BUZZER    200
                 ;// Declare your global variables here
                 ;unsigned long   Ul_Voltage_Buff[NUM_SAMPLE];
                 ;unsigned long   Ul_Current_Buff[NUM_SAMPLE];
                 ;
                 ;
                 ;unsigned int    Uint_Voltage;
                 ;unsigned int    Uint_Current;
                 ;
                 ;unsigned char   Uc_Buff_Count = 0;
                 ;
                 ;unsigned char   Uc_Buzzer_Count;
                 ;
                 ;bit Bit_En_Meas = 0;
                 ;
                 ;unsigned char   Uc_Voltage_Duty = 0;
                 ;
                 ;unsigned int   Uc_Timer_Update_Display=0;
                 ;
                 ;void    PWM_PHASE1(unsigned char duty);
                 ;void    PWM_PHASE2(unsigned char duty);
                 ;// // Voltage Reference: AREF pin
                 ;// #define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Voltage Reference: Int., cap. on AREF
                 ;#define ADC_VREF_TYPE ((1<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0054 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0055     ADMUX=adc_input | ADC_VREF_TYPE;
000058 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000059 81e8      	LD   R30,Y
00005a 6ce0      	ORI  R30,LOW(0xC0)
00005b 93e0 007c 	STS  124,R30
                 ; 0000 0056     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0057     delay_us(10);
                +
00005d e483     +LDI R24 , LOW ( 67 )
                +__DELAY_USB_LOOP :
00005e 958a     +DEC R24
00005f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 67
                 ; 0000 0058     // Start the AD conversion
                 ; 0000 0059     ADCSRA|=(1<<ADSC);
000060 91e0 007a 	LDS  R30,122
000062 64e0      	ORI  R30,0x40
000063 93e0 007a 	STS  122,R30
                 ; 0000 005A     // Wait for the AD conversion to complete
                 ; 0000 005B     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000065 91e0 007a 	LDS  R30,122
000067 71e0      	ANDI R30,LOW(0x10)
000068 f3e1      	BREQ _0x3
                 ; 0000 005C     ADCSRA|=(1<<ADIF);
000069 91e0 007a 	LDS  R30,122
00006b 61e0      	ORI  R30,0x10
00006c 93e0 007a 	STS  122,R30
                 ; 0000 005D     return ADCW;
00006e 91e0 0078 	LDS  R30,120
000070 91f0 0079 	LDS  R31,120+1
000072 9621      	ADIW R28,1
000073 9508      	RET
                 ; 0000 005E }
                 ; .FEND
                 ;// Timer2 overflow interrupt service routine
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0061 {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
000074 920a      	ST   -Y,R0
000075 921a      	ST   -Y,R1
000076 92fa      	ST   -Y,R15
000077 936a      	ST   -Y,R22
000078 937a      	ST   -Y,R23
000079 938a      	ST   -Y,R24
00007a 939a      	ST   -Y,R25
00007b 93aa      	ST   -Y,R26
00007c 93ba      	ST   -Y,R27
00007d 93ea      	ST   -Y,R30
00007e 93fa      	ST   -Y,R31
00007f b7ef      	IN   R30,SREG
000080 93ea      	ST   -Y,R30
                 ; 0000 0062     // Reinitialize Timer2 value
                 ; 0000 0063     TCNT2=0x7E;
000081 e7ee      	LDI  R30,LOW(126)
000082 93e0 00b2 	STS  178,R30
                 ; 0000 0064      if(Uc_Timer_Update_Display < TIME_UPDATE_DISPLAY)   Uc_Timer_Update_Display++;
000084 ece8      	LDI  R30,LOW(200)
000085 e0f0      	LDI  R31,HIGH(200)
000086 16de      	CP   R13,R30
000087 06ef      	CPC  R14,R31
000088 f420      	BRSH _0x6
000089 e0e1      	LDI  R30,LOW(1)
00008a e0f0      	LDI  R31,HIGH(1)
                +
00008b 0ede     +ADD R13 , R30
00008c 1eef     +ADC R14 , R31
                 	__ADDWRR 13,14,30,31
                 ; 0000 0065     // Place your code here
                 ; 0000 0066     SCAN_LED();
                 _0x6:
00008d d370      	RCALL _SCAN_LED
                 ; 0000 0067     Uc_Buzzer_Count++;
00008e 9493      	INC  R9
                 ; 0000 0068     if(Uc_Buzzer_Count > SPEED_BUZZER)      Uc_Buzzer_Count = 0;
00008f ece8      	LDI  R30,LOW(200)
000090 15e9      	CP   R30,R9
000091 f408      	BRSH _0x7
000092 2499      	CLR  R9
                 ; 0000 0069     Bit_En_Meas = 1;
                 _0x7:
000093 9af2      	SBI  0x1E,2
                 ; 0000 006A 
                 ; 0000 006B }
000094 91e9      	LD   R30,Y+
000095 bfef      	OUT  SREG,R30
000096 91f9      	LD   R31,Y+
000097 91e9      	LD   R30,Y+
000098 91b9      	LD   R27,Y+
000099 91a9      	LD   R26,Y+
00009a 9199      	LD   R25,Y+
00009b 9189      	LD   R24,Y+
00009c 9179      	LD   R23,Y+
00009d 9169      	LD   R22,Y+
00009e 90f9      	LD   R15,Y+
00009f 9019      	LD   R1,Y+
0000a0 9009      	LD   R0,Y+
0000a1 9518      	RETI
                 ; .FEND
                 ;
                 ;void    PWM_PHASE1(unsigned char duty)
                 ; 0000 006E {
                 _PWM_PHASE1:
                 ; .FSTART _PWM_PHASE1
                 ; 0000 006F     unsigned char   pwm = duty*255/100;
                 ; 0000 0070     if(duty <= 1)
0000a2 93aa      	ST   -Y,R26
0000a3 931a      	ST   -Y,R17
                 ;	duty -> Y+1
                 ;	pwm -> R17
0000a4 81a9      	LDD  R26,Y+1
0000a5 efef      	LDI  R30,LOW(255)
0000a6 9fea      	MUL  R30,R26
0000a7 01f0      	MOVW R30,R0
0000a8 01df      	MOVW R26,R30
0000a9 e6e4      	LDI  R30,LOW(100)
0000aa e0f0      	LDI  R31,HIGH(100)
0000ab d5a9      	RCALL __DIVW21
0000ac 2f1e      	MOV  R17,R30
0000ad 81a9      	LDD  R26,Y+1
0000ae 30a2      	CPI  R26,LOW(0x2)
0000af f430      	BRSH _0xA
                 ; 0000 0071     {
                 ; 0000 0072         // TCCR1A &= (0<<COM1B1);
                 ; 0000 0073         OCR1AH=0x00;
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 93e0 0089 	STS  137,R30
                 ; 0000 0074         OCR1AL=0;
0000b3 93e0 0088 	STS  136,R30
                 ; 0000 0075     }
                 ; 0000 0076     else
0000b5 c005      	RJMP _0xB
                 _0xA:
                 ; 0000 0077     {
                 ; 0000 0078         // TCCR1A |= (1<<COM1B1);
                 ; 0000 0079         OCR1AH=0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93e0 0089 	STS  137,R30
                 ; 0000 007A         OCR1AL=pwm;
0000b9 9310 0088 	STS  136,R17
                 ; 0000 007B     }
                 _0xB:
                 ; 0000 007C }
0000bb c019      	RJMP _0x2000003
                 ; .FEND
                 ;
                 ;void    PWM_PHASE2(unsigned char duty)
                 ; 0000 007F {
                 _PWM_PHASE2:
                 ; .FSTART _PWM_PHASE2
                 ; 0000 0080     unsigned char   pwm = (duty)*255/100;
                 ; 0000 0081     // OCR1BH=0x00;
                 ; 0000 0082     // OCR1BL=pwm;
                 ; 0000 0083     if(duty <= 1)
0000bc 93aa      	ST   -Y,R26
0000bd 931a      	ST   -Y,R17
                 ;	duty -> Y+1
                 ;	pwm -> R17
0000be 81a9      	LDD  R26,Y+1
0000bf efef      	LDI  R30,LOW(255)
0000c0 9fea      	MUL  R30,R26
0000c1 01f0      	MOVW R30,R0
0000c2 01df      	MOVW R26,R30
0000c3 e6e4      	LDI  R30,LOW(100)
0000c4 e0f0      	LDI  R31,HIGH(100)
0000c5 d58f      	RCALL __DIVW21
0000c6 2f1e      	MOV  R17,R30
0000c7 81a9      	LDD  R26,Y+1
0000c8 30a2      	CPI  R26,LOW(0x2)
0000c9 f430      	BRSH _0xC
                 ; 0000 0084     {
                 ; 0000 0085         // TCCR1A &= (0<<COM1A1);
                 ; 0000 0086         OCR1BH=0x00;
0000ca e0e0      	LDI  R30,LOW(0)
0000cb 93e0 008b 	STS  139,R30
                 ; 0000 0087         OCR1BL=0;
0000cd 93e0 008a 	STS  138,R30
                 ; 0000 0088     }
                 ; 0000 0089     else
0000cf c005      	RJMP _0xD
                 _0xC:
                 ; 0000 008A     {
                 ; 0000 008B         // TCCR1A |= (1<<COM1A1);
                 ; 0000 008C         OCR1BH=0x00;
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 008b 	STS  139,R30
                 ; 0000 008D         OCR1BL=pwm;
0000d3 9310 008a 	STS  138,R17
                 ; 0000 008E     }
                 _0xD:
                 ; 0000 008F }
                 _0x2000003:
0000d5 8118      	LDD  R17,Y+0
0000d6 9622      	ADIW R28,2
0000d7 9508      	RET
                 ; .FEND
                 ;
                 ;void    CONTROL_VOLTAGE(void)
                 ; 0000 0092 {
                 _CONTROL_VOLTAGE:
                 ; .FSTART _CONTROL_VOLTAGE
                 ; 0000 0093     unsigned int    Uint_Vr_Set_Voltage;
                 ; 0000 0094 
                 ; 0000 0095     Uint_Vr_Set_Voltage = read_adc(ADC_SET_VOLTAGE);
0000d8 d5d0      	RCALL __SAVELOCR2
                 ;	Uint_Vr_Set_Voltage -> R16,R17
0000d9 e0a1      	LDI  R26,LOW(1)
0000da df7d      	RCALL _read_adc
0000db 018f      	MOVW R16,R30
                 ; 0000 0096     Uc_Voltage_Duty = (unsigned long)Uint_Vr_Set_Voltage*100/1023;
0000dc 01d8      	MOVW R26,R16
0000dd 2788      	CLR  R24
0000de 2799      	CLR  R25
                +
0000df e6e4     +LDI R30 , LOW ( 0x64 )
0000e0 e0f0     +LDI R31 , HIGH ( 0x64 )
0000e1 e060     +LDI R22 , BYTE3 ( 0x64 )
0000e2 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0000e3 d53e      	RCALL __MULD12U
0000e4 01df      	MOVW R26,R30
0000e5 01cb      	MOVW R24,R22
                +
0000e6 efef     +LDI R30 , LOW ( 0x3FF )
0000e7 e0f3     +LDI R31 , HIGH ( 0x3FF )
0000e8 e060     +LDI R22 , BYTE3 ( 0x3FF )
0000e9 e070     +LDI R23 , BYTE4 ( 0x3FF )
                 	__GETD1N 0x3FF
0000ea d56f      	RCALL __DIVD21U
0000eb 2ece      	MOV  R12,R30
                 ; 0000 0097     // Uint_data_led1 = Uint_Vr_Set_Voltage;
                 ; 0000 0098     // Uint_data_led2 = Uc_Voltage_Duty;
                 ; 0000 0099     // Uint_data_led2 = Uc_Voltage_Duty;
                 ; 0000 009A     PWM_PHASE2(Uc_Voltage_Duty);
0000ec 2dac      	MOV  R26,R12
0000ed dfce      	RCALL _PWM_PHASE2
                 ; 0000 009B     PWM_PHASE1(Uc_Voltage_Duty);
0000ee 2dac      	MOV  R26,R12
0000ef dfb2      	RCALL _PWM_PHASE1
                 ; 0000 009C }
0000f0 c255      	RJMP _0x2000002
                 ; .FEND
                 ;/*
                 ;Doc thong so dien ap va dong dien, loc nhieu.
                 ;Loc nhieu va tinh toan ra gia tri thuc cua dong dien va dien ap.
                 ;Cap nhat cac thong so len led hien thi
                 ;*/
                 ;void    READ_CURRENT_INFO(void)
                 ; 0000 00A3 {
                 _READ_CURRENT_INFO:
                 ; .FSTART _READ_CURRENT_INFO
                 ; 0000 00A4     unsigned long   Ul_Buff[NUM_SAMPLE];
                 ; 0000 00A5     unsigned char   Uc_loop = 0,Uc_loop2 = 0;
                 ; 0000 00A6     unsigned long   Ul_temp;
                 ; 0000 00A7 
                 ; 0000 00A8     Ul_Voltage_Buff[Uc_Buff_Count] = ADE7753_READ(1,VRMS);
0000f1 97ef      	SBIW R28,63
0000f2 97ed      	SBIW R28,61
0000f3 d5b5      	RCALL __SAVELOCR2
                 ;	Ul_Buff -> Y+6
                 ;	Uc_loop -> R17
                 ;	Uc_loop2 -> R16
                 ;	Ul_temp -> Y+2
0000f4 e010      	LDI  R17,0
0000f5 e000      	LDI  R16,0
0000f6 2dea      	MOV  R30,R10
0000f7 e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
0000f8 e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
0000f9 e0f0      	LDI  R31,0
0000fa d51d      	RCALL __LSLW2
0000fb 0fea      	ADD  R30,R26
0000fc 1ffb      	ADC  R31,R27
0000fd 93ff      	PUSH R31
0000fe 93ef      	PUSH R30
0000ff e0e1      	LDI  R30,LOW(1)
000100 93ea      	ST   -Y,R30
000101 e1e7      	LDI  R30,LOW(23)
000102 93ea      	ST   -Y,R30
000103 e0a3      	LDI  R26,LOW(3)
000104 d244      	RCALL _ADE7753_READ
000105 91af      	POP  R26
000106 91bf      	POP  R27
000107 d58e      	RCALL __PUTDP1
                 ; 0000 00A9     delay_ms(10);
000108 e0aa      	LDI  R26,LOW(10)
000109 e0b0      	LDI  R27,0
00010a d405      	RCALL _delay_ms
                 ; 0000 00AA     /* Tinh toan va loc nhieu gia tri dien ap */
                 ; 0000 00AB     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
00010b e010      	LDI  R17,LOW(0)
                 _0xF:
00010c 311e      	CPI  R17,30
00010d f4a0      	BRSH _0x10
                 ; 0000 00AC     {
                 ; 0000 00AD         Ul_Buff[Uc_loop] = Ul_Voltage_Buff[Uc_loop];
00010e 2fe1      	MOV  R30,R17
00010f e0f0      	LDI  R31,0
000110 01de      	MOVW R26,R28
000111 9616      	ADIW R26,6
000112 d505      	RCALL __LSLW2
000113 0fea      	ADD  R30,R26
000114 1ffb      	ADC  R31,R27
000115 010f      	MOVW R0,R30
000116 2fe1      	MOV  R30,R17
000117 e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
000118 e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
000119 e0f0      	LDI  R31,0
00011a d4fd      	RCALL __LSLW2
00011b 0fae      	ADD  R26,R30
00011c 1fbf      	ADC  R27,R31
00011d d572      	RCALL __GETD1P
00011e 01d0      	MOVW R26,R0
00011f d576      	RCALL __PUTDP1
                 ; 0000 00AE     }
000120 5f1f      	SUBI R17,-1
000121 cfea      	RJMP _0xF
                 _0x10:
                 ; 0000 00AF     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
000122 e010      	LDI  R17,LOW(0)
                 _0x12:
000123 311e      	CPI  R17,30
000124 f008      	BRLO PC+2
000125 c04c      	RJMP _0x13
                 ; 0000 00B0     {
                 ; 0000 00B1         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
000126 2f01      	MOV  R16,R17
                 _0x15:
000127 310e      	CPI  R16,30
000128 f008      	BRLO PC+2
000129 c046      	RJMP _0x16
                 ; 0000 00B2         {
                 ; 0000 00B3             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
00012a 2fe1      	MOV  R30,R17
00012b e0f0      	LDI  R31,0
00012c 01de      	MOVW R26,R28
00012d 9616      	ADIW R26,6
00012e d4e9      	RCALL __LSLW2
00012f 0fae      	ADD  R26,R30
000130 1fbf      	ADC  R27,R31
000131 d55e      	RCALL __GETD1P
000132 937f      	PUSH R23
000133 936f      	PUSH R22
000134 93ff      	PUSH R31
000135 93ef      	PUSH R30
000136 2fe0      	MOV  R30,R16
000137 e0f0      	LDI  R31,0
000138 01de      	MOVW R26,R28
000139 9616      	ADIW R26,6
00013a d4dd      	RCALL __LSLW2
00013b 0fae      	ADD  R26,R30
00013c 1fbf      	ADC  R27,R31
00013d d552      	RCALL __GETD1P
00013e 91af      	POP  R26
00013f 91bf      	POP  R27
000140 918f      	POP  R24
000141 919f      	POP  R25
000142 d55d      	RCALL __CPD12
000143 f550      	BRSH _0x17
                 ; 0000 00B4             {
                 ; 0000 00B5                 Ul_temp = Ul_Buff[Uc_loop];
000144 2fe1      	MOV  R30,R17
000145 e0f0      	LDI  R31,0
000146 01de      	MOVW R26,R28
000147 9616      	ADIW R26,6
000148 d4cf      	RCALL __LSLW2
000149 0fae      	ADD  R26,R30
00014a 1fbf      	ADC  R27,R31
00014b d544      	RCALL __GETD1P
                +
00014c 83ea     +STD Y + 2 , R30
00014d 83fb     +STD Y + 2 + 1 , R31
00014e 836c     +STD Y + 2 + 2 , R22
00014f 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00B6                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
000150 2fe1      	MOV  R30,R17
000151 e0f0      	LDI  R31,0
000152 01de      	MOVW R26,R28
000153 9616      	ADIW R26,6
000154 d4c3      	RCALL __LSLW2
000155 0fea      	ADD  R30,R26
000156 1ffb      	ADC  R31,R27
000157 010f      	MOVW R0,R30
000158 2fe0      	MOV  R30,R16
000159 e0f0      	LDI  R31,0
00015a 01de      	MOVW R26,R28
00015b 9616      	ADIW R26,6
00015c d4bb      	RCALL __LSLW2
00015d 0fae      	ADD  R26,R30
00015e 1fbf      	ADC  R27,R31
00015f d530      	RCALL __GETD1P
000160 01d0      	MOVW R26,R0
000161 d534      	RCALL __PUTDP1
                 ; 0000 00B7                 Ul_Buff[Uc_loop2] = Ul_temp;
000162 2fe0      	MOV  R30,R16
000163 e0f0      	LDI  R31,0
000164 01de      	MOVW R26,R28
000165 9616      	ADIW R26,6
000166 d4b1      	RCALL __LSLW2
000167 0fea      	ADD  R30,R26
000168 1ffb      	ADC  R31,R27
                +
000169 81aa     +LDD R26 , Y + 2
00016a 81bb     +LDD R27 , Y + 2 + 1
00016b 818c     +LDD R24 , Y + 2 + 2
00016c 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00016d d52d      	RCALL __PUTDZ20
                 ; 0000 00B8             }
                 ; 0000 00B9         }
                 _0x17:
00016e 5f0f      	SUBI R16,-1
00016f cfb7      	RJMP _0x15
                 _0x16:
                 ; 0000 00BA     }
000170 5f1f      	SUBI R17,-1
000171 cfb1      	RJMP _0x12
                 _0x13:
                 ; 0000 00BB     Ul_temp = 0;
000172 e0e0      	LDI  R30,LOW(0)
                +
000173 83ea     +STD Y + 2 , R30
000174 83eb     +STD Y + 2 + 1 , R30
000175 83ec     +STD Y + 2 + 2 , R30
000176 83ed     +STD Y + 2 + 3 , R30
                 	__CLRD1S 2
                 ; 0000 00BC     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
000177 e017      	LDI  R17,LOW(7)
                 _0x19:
000178 3117      	CPI  R17,23
000179 f498      	BRSH _0x1A
                 ; 0000 00BD     {
                 ; 0000 00BE         Ul_temp += Ul_Buff[Uc_loop];
00017a 2fe1      	MOV  R30,R17
00017b e0f0      	LDI  R31,0
00017c 01de      	MOVW R26,R28
00017d 9616      	ADIW R26,6
00017e d499      	RCALL __LSLW2
00017f 0fae      	ADD  R26,R30
000180 1fbf      	ADC  R27,R31
000181 d50e      	RCALL __GETD1P
                +
000182 81aa     +LDD R26 , Y + 2
000183 81bb     +LDD R27 , Y + 2 + 1
000184 818c     +LDD R24 , Y + 2 + 2
000185 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000186 d46c      	RCALL __ADDD12
                +
000187 83ea     +STD Y + 2 , R30
000188 83fb     +STD Y + 2 + 1 , R31
000189 836c     +STD Y + 2 + 2 , R22
00018a 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00BF     }
00018b 5f1f      	SUBI R17,-1
00018c cfeb      	RJMP _0x19
                 _0x1A:
                 ; 0000 00C0     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
                +
00018d 81aa     +LDD R26 , Y + 2
00018e 81bb     +LDD R27 , Y + 2 + 1
00018f 818c     +LDD R24 , Y + 2 + 2
000190 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000191 e1e0     +LDI R30 , LOW ( 0x10 )
000192 e0f0     +LDI R31 , HIGH ( 0x10 )
000193 e060     +LDI R22 , BYTE3 ( 0x10 )
000194 e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
000195 d4c4      	RCALL __DIVD21U
                +
000196 83ea     +STD Y + 2 , R30
000197 83fb     +STD Y + 2 + 1 , R31
000198 836c     +STD Y + 2 + 2 , R22
000199 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00C1     // Ul_temp = Ul_temp / 100;
                 ; 0000 00C2     // Uint_Voltage = (unsigned int)((float)(Ul_temp*(0.015233297 + Ul_temp*(0.0000003453386290397 - Ul_temp*0.000000000 ...
                 ; 0000 00C3     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
                 ; 0000 00C4     {
                 ; 0000 00C5         // Uint_data_led1 = Ul_temp /10000;
                 ; 0000 00C6         // Uint_data_led2 = Ul_temp %10000;
                 ; 0000 00C7     }
                 ; 0000 00C8     Uint_Voltage = (unsigned int)((float)Ul_temp/VOLTAGE_RATIO);
00019a d3e3      	RCALL __CDF1U
00019b 01df      	MOVW R26,R30
00019c 01cb      	MOVW R24,R22
                +
00019d e0e0     +LDI R30 , LOW ( 0x46477400 )
00019e e7f4     +LDI R31 , HIGH ( 0x46477400 )
00019f e467     +LDI R22 , BYTE3 ( 0x46477400 )
0001a0 e476     +LDI R23 , BYTE4 ( 0x46477400 )
                 	__GETD1N 0x46477400
0001a1 d40c      	RCALL __DIVF21
0001a2 d3a4      	RCALL __CFD1U
                +
0001a3 2e5e     +MOV R5 , R30
0001a4 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 00C9     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)    Uint_data_led1 = Uint_Voltage;
0001a5 ece8      	LDI  R30,LOW(200)
0001a6 e0f0      	LDI  R31,HIGH(200)
0001a7 16de      	CP   R13,R30
0001a8 06ef      	CPC  R14,R31
0001a9 f020      	BRLO _0x1C
                +
0001aa 9250 0200+STS _Uint_data_led1 + ( 0 ) , R5
0001ac 9260 0201+STS _Uint_data_led1 + ( 0 ) + 1 , R6
                 	__PUTWMRN _Uint_data_led1,0,5,6
                 ; 0000 00CA 
                 ; 0000 00CB     Ul_Current_Buff[Uc_Buff_Count] = ADE7753_READ(1,IRMS);
                 _0x1C:
0001ae 2dea      	MOV  R30,R10
0001af e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0001b0 e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0001b1 e0f0      	LDI  R31,0
0001b2 d465      	RCALL __LSLW2
0001b3 0fea      	ADD  R30,R26
0001b4 1ffb      	ADC  R31,R27
0001b5 93ff      	PUSH R31
0001b6 93ef      	PUSH R30
0001b7 e0e1      	LDI  R30,LOW(1)
0001b8 93ea      	ST   -Y,R30
0001b9 e1e6      	LDI  R30,LOW(22)
0001ba 93ea      	ST   -Y,R30
0001bb e0a3      	LDI  R26,LOW(3)
0001bc d18c      	RCALL _ADE7753_READ
0001bd 91af      	POP  R26
0001be 91bf      	POP  R27
0001bf d4d6      	RCALL __PUTDP1
                 ; 0000 00CC     delay_ms(10);
0001c0 e0aa      	LDI  R26,LOW(10)
0001c1 e0b0      	LDI  R27,0
0001c2 d34d      	RCALL _delay_ms
                 ; 0000 00CD     /* Tinh toan va loc nhieu gia tri dong dien */
                 ; 0000 00CE     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
0001c3 e010      	LDI  R17,LOW(0)
                 _0x1E:
0001c4 311e      	CPI  R17,30
0001c5 f4a0      	BRSH _0x1F
                 ; 0000 00CF     {
                 ; 0000 00D0         Ul_Buff[Uc_loop] = Ul_Current_Buff[Uc_loop];
0001c6 2fe1      	MOV  R30,R17
0001c7 e0f0      	LDI  R31,0
0001c8 01de      	MOVW R26,R28
0001c9 9616      	ADIW R26,6
0001ca d44d      	RCALL __LSLW2
0001cb 0fea      	ADD  R30,R26
0001cc 1ffb      	ADC  R31,R27
0001cd 010f      	MOVW R0,R30
0001ce 2fe1      	MOV  R30,R17
0001cf e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0001d0 e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0001d1 e0f0      	LDI  R31,0
0001d2 d445      	RCALL __LSLW2
0001d3 0fae      	ADD  R26,R30
0001d4 1fbf      	ADC  R27,R31
0001d5 d4ba      	RCALL __GETD1P
0001d6 01d0      	MOVW R26,R0
0001d7 d4be      	RCALL __PUTDP1
                 ; 0000 00D1     }
0001d8 5f1f      	SUBI R17,-1
0001d9 cfea      	RJMP _0x1E
                 _0x1F:
                 ; 0000 00D2     for(Uc_loop = 0; Uc_loop < NUM_SAMPLE; Uc_loop++)
0001da e010      	LDI  R17,LOW(0)
                 _0x21:
0001db 311e      	CPI  R17,30
0001dc f008      	BRLO PC+2
0001dd c04c      	RJMP _0x22
                 ; 0000 00D3     {
                 ; 0000 00D4         for(Uc_loop2 = Uc_loop; Uc_loop2 < NUM_SAMPLE; Uc_loop2++)
0001de 2f01      	MOV  R16,R17
                 _0x24:
0001df 310e      	CPI  R16,30
0001e0 f008      	BRLO PC+2
0001e1 c046      	RJMP _0x25
                 ; 0000 00D5         {
                 ; 0000 00D6             if(Ul_Buff[Uc_loop] > Ul_Buff[Uc_loop2])
0001e2 2fe1      	MOV  R30,R17
0001e3 e0f0      	LDI  R31,0
0001e4 01de      	MOVW R26,R28
0001e5 9616      	ADIW R26,6
0001e6 d431      	RCALL __LSLW2
0001e7 0fae      	ADD  R26,R30
0001e8 1fbf      	ADC  R27,R31
0001e9 d4a6      	RCALL __GETD1P
0001ea 937f      	PUSH R23
0001eb 936f      	PUSH R22
0001ec 93ff      	PUSH R31
0001ed 93ef      	PUSH R30
0001ee 2fe0      	MOV  R30,R16
0001ef e0f0      	LDI  R31,0
0001f0 01de      	MOVW R26,R28
0001f1 9616      	ADIW R26,6
0001f2 d425      	RCALL __LSLW2
0001f3 0fae      	ADD  R26,R30
0001f4 1fbf      	ADC  R27,R31
0001f5 d49a      	RCALL __GETD1P
0001f6 91af      	POP  R26
0001f7 91bf      	POP  R27
0001f8 918f      	POP  R24
0001f9 919f      	POP  R25
0001fa d4a5      	RCALL __CPD12
0001fb f550      	BRSH _0x26
                 ; 0000 00D7             {
                 ; 0000 00D8                 Ul_temp = Ul_Buff[Uc_loop];
0001fc 2fe1      	MOV  R30,R17
0001fd e0f0      	LDI  R31,0
0001fe 01de      	MOVW R26,R28
0001ff 9616      	ADIW R26,6
000200 d417      	RCALL __LSLW2
000201 0fae      	ADD  R26,R30
000202 1fbf      	ADC  R27,R31
000203 d48c      	RCALL __GETD1P
                +
000204 83ea     +STD Y + 2 , R30
000205 83fb     +STD Y + 2 + 1 , R31
000206 836c     +STD Y + 2 + 2 , R22
000207 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00D9                 Ul_Buff[Uc_loop] = Ul_Buff[Uc_loop2];
000208 2fe1      	MOV  R30,R17
000209 e0f0      	LDI  R31,0
00020a 01de      	MOVW R26,R28
00020b 9616      	ADIW R26,6
00020c d40b      	RCALL __LSLW2
00020d 0fea      	ADD  R30,R26
00020e 1ffb      	ADC  R31,R27
00020f 010f      	MOVW R0,R30
000210 2fe0      	MOV  R30,R16
000211 e0f0      	LDI  R31,0
000212 01de      	MOVW R26,R28
000213 9616      	ADIW R26,6
000214 d403      	RCALL __LSLW2
000215 0fae      	ADD  R26,R30
000216 1fbf      	ADC  R27,R31
000217 d478      	RCALL __GETD1P
000218 01d0      	MOVW R26,R0
000219 d47c      	RCALL __PUTDP1
                 ; 0000 00DA                 Ul_Buff[Uc_loop2] = Ul_temp;
00021a 2fe0      	MOV  R30,R16
00021b e0f0      	LDI  R31,0
00021c 01de      	MOVW R26,R28
00021d 9616      	ADIW R26,6
00021e d3f9      	RCALL __LSLW2
00021f 0fea      	ADD  R30,R26
000220 1ffb      	ADC  R31,R27
                +
000221 81aa     +LDD R26 , Y + 2
000222 81bb     +LDD R27 , Y + 2 + 1
000223 818c     +LDD R24 , Y + 2 + 2
000224 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000225 d475      	RCALL __PUTDZ20
                 ; 0000 00DB             }
                 ; 0000 00DC         }
                 _0x26:
000226 5f0f      	SUBI R16,-1
000227 cfb7      	RJMP _0x24
                 _0x25:
                 ; 0000 00DD     }
000228 5f1f      	SUBI R17,-1
000229 cfb1      	RJMP _0x21
                 _0x22:
                 ; 0000 00DE     Ul_temp = 0;
00022a e0e0      	LDI  R30,LOW(0)
                +
00022b 83ea     +STD Y + 2 , R30
00022c 83eb     +STD Y + 2 + 1 , R30
00022d 83ec     +STD Y + 2 + 2 , R30
00022e 83ed     +STD Y + 2 + 3 , R30
                 	__CLRD1S 2
                 ; 0000 00DF     for(Uc_loop = NUM_FILTER; Uc_loop < NUM_SAMPLE - NUM_FILTER; Uc_loop++)
00022f e017      	LDI  R17,LOW(7)
                 _0x28:
000230 3117      	CPI  R17,23
000231 f498      	BRSH _0x29
                 ; 0000 00E0     {
                 ; 0000 00E1         Ul_temp += Ul_Buff[Uc_loop];
000232 2fe1      	MOV  R30,R17
000233 e0f0      	LDI  R31,0
000234 01de      	MOVW R26,R28
000235 9616      	ADIW R26,6
000236 d3e1      	RCALL __LSLW2
000237 0fae      	ADD  R26,R30
000238 1fbf      	ADC  R27,R31
000239 d456      	RCALL __GETD1P
                +
00023a 81aa     +LDD R26 , Y + 2
00023b 81bb     +LDD R27 , Y + 2 + 1
00023c 818c     +LDD R24 , Y + 2 + 2
00023d 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
00023e d3b4      	RCALL __ADDD12
                +
00023f 83ea     +STD Y + 2 , R30
000240 83fb     +STD Y + 2 + 1 , R31
000241 836c     +STD Y + 2 + 2 , R22
000242 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00E2     }
000243 5f1f      	SUBI R17,-1
000244 cfeb      	RJMP _0x28
                 _0x29:
                 ; 0000 00E3     Ul_temp = Ul_temp/(NUM_SAMPLE - 2*NUM_FILTER);
                +
000245 81aa     +LDD R26 , Y + 2
000246 81bb     +LDD R27 , Y + 2 + 1
000247 818c     +LDD R24 , Y + 2 + 2
000248 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000249 e1e0     +LDI R30 , LOW ( 0x10 )
00024a e0f0     +LDI R31 , HIGH ( 0x10 )
00024b e060     +LDI R22 , BYTE3 ( 0x10 )
00024c e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
00024d d40c      	RCALL __DIVD21U
                +
00024e 83ea     +STD Y + 2 , R30
00024f 83fb     +STD Y + 2 + 1 , R31
000250 836c     +STD Y + 2 + 2 , R22
000251 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0000 00E4     Uint_Current = (unsigned int)((float)Ul_temp/CURRENT_RATIO);
000252 d32b      	RCALL __CDF1U
000253 01df      	MOVW R26,R30
000254 01cb      	MOVW R24,R22
                +
000255 e0e0     +LDI R30 , LOW ( 0x440D8000 )
000256 e8f0     +LDI R31 , HIGH ( 0x440D8000 )
000257 e06d     +LDI R22 , BYTE3 ( 0x440D8000 )
000258 e474     +LDI R23 , BYTE4 ( 0x440D8000 )
                 	__GETD1N 0x440D8000
000259 d354      	RCALL __DIVF21
00025a d2ec      	RCALL __CFD1U
                +
00025b 2e7e     +MOV R7 , R30
00025c 2e8f     +MOV R8 , R31
                 	__PUTW1R 7,8
                 ; 0000 00E5     if(Uc_Timer_Update_Display >= TIME_UPDATE_DISPLAY)
00025d ece8      	LDI  R30,LOW(200)
00025e e0f0      	LDI  R31,HIGH(200)
00025f 16de      	CP   R13,R30
000260 06ef      	CPC  R14,R31
000261 f010      	BRLO _0x2A
                 ; 0000 00E6     {
                 ; 0000 00E7         // Uint_data_led2 = Uint_Current;
                 ; 0000 00E8         Uc_Timer_Update_Display = 0;
000262 24dd      	CLR  R13
000263 24ee      	CLR  R14
                 ; 0000 00E9     }
                 ; 0000 00EA     if(Uint_Current > 550)  Bit_Led2_Warning = 1;
                 _0x2A:
000264 e2e6      	LDI  R30,LOW(550)
000265 e0f2      	LDI  R31,HIGH(550)
000266 15e7      	CP   R30,R7
000267 05f8      	CPC  R31,R8
000268 f410      	BRSH _0x2B
000269 9af1      	SBI  0x1E,1
                 ; 0000 00EB     else    Bit_Led2_Warning = 0;
00026a c001      	RJMP _0x2E
                 _0x2B:
00026b 98f1      	CBI  0x1E,1
                 ; 0000 00EC 
                 ; 0000 00ED 
                 ; 0000 00EE     Uc_Buff_Count++;
                 _0x2E:
00026c 94a3      	INC  R10
                 ; 0000 00EF     if(Uc_Buff_Count >= NUM_SAMPLE) Uc_Buff_Count = 0;
00026d e1ee      	LDI  R30,LOW(30)
00026e 16ae      	CP   R10,R30
00026f f008      	BRLO _0x31
000270 24aa      	CLR  R10
                 ; 0000 00F0 }
                 _0x31:
000271 d43e      	RCALL __LOADLOCR2
000272 96ef      	ADIW R28,63
000273 96ef      	ADIW R28,63
000274 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00F3 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00F4 // Declare your local variables here
                 ; 0000 00F5 
                 ; 0000 00F6 // Crystal Oscillator division factor: 1
                 ; 0000 00F7 #pragma optsize-
                 ; 0000 00F8 CLKPR=(1<<CLKPCE);
000275 e8e0      	LDI  R30,LOW(128)
000276 93e0 0061 	STS  97,R30
                 ; 0000 00F9 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000278 e0e0      	LDI  R30,LOW(0)
000279 93e0 0061 	STS  97,R30
                 ; 0000 00FA #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00FB #pragma optsize+
                 ; 0000 00FC #endif
                 ; 0000 00FD 
                 ; 0000 00FE // Input/Output Ports initialization
                 ; 0000 00FF // Port B initialization
                 ; 0000 0100 // Function: Bit7=In Bit6=In Bit5=In Bit4=Out Bit3=In Bit2=Out Bit1=In Bit0=Out
                 ; 0000 0101 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00027b e3ef      	LDI  R30,LOW(63)
00027c b9e4      	OUT  0x4,R30
                 ; 0000 0102 // State: Bit7=T Bit6=T Bit5=T Bit4=0 Bit3=T Bit2=0 Bit1=T Bit0=0
                 ; 0000 0103 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00027d e0e0      	LDI  R30,LOW(0)
00027e b9e5      	OUT  0x5,R30
                 ; 0000 0104 
                 ; 0000 0105 // Port C initialization
                 ; 0000 0106 // Function: Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 0107 DDRC=(0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
00027f e2e1      	LDI  R30,LOW(33)
000280 b9e7      	OUT  0x7,R30
                 ; 0000 0108 // State: Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 0109 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000281 e0e0      	LDI  R30,LOW(0)
000282 b9e8      	OUT  0x8,R30
                 ; 0000 010A 
                 ; 0000 010B // Port D initialization
                 ; 0000 010C // Function: Bit7=Out Bit6=In Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 010D DDRD=(1<<DDD7) | (0<<DDD6) | (1<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000283 eae0      	LDI  R30,LOW(160)
000284 b9ea      	OUT  0xA,R30
                 ; 0000 010E // State: Bit7=0 Bit6=T Bit5=0 Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 010F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000285 e0e0      	LDI  R30,LOW(0)
000286 b9eb      	OUT  0xB,R30
                 ; 0000 0110 
                 ; 0000 0111 
                 ; 0000 0112 // Timer/Counter 0 initialization
                 ; 0000 0113 // Clock source: System Clock
                 ; 0000 0114 // Clock value: Timer 0 Stopped
                 ; 0000 0115 // Mode: Normal top=0xFF
                 ; 0000 0116 // OC0A output: Disconnected
                 ; 0000 0117 // OC0B output: Disconnected
                 ; 0000 0118 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
000287 bde4      	OUT  0x24,R30
                 ; 0000 0119 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000288 bde5      	OUT  0x25,R30
                 ; 0000 011A TCNT0=0x00;
000289 bde6      	OUT  0x26,R30
                 ; 0000 011B OCR0A=0x00;
00028a bde7      	OUT  0x27,R30
                 ; 0000 011C OCR0B=0x00;
00028b bde8      	OUT  0x28,R30
                 ; 0000 011D 
                 ; 0000 011E // Timer/Counter 1 initialization
                 ; 0000 011F // Clock source: System Clock
                 ; 0000 0120 // Clock value: 11059,200 kHz
                 ; 0000 0121 // Mode: Ph. correct PWM top=0x00FF
                 ; 0000 0122 // OC1A output: Non-Inverted PWM
                 ; 0000 0123 // OC1B output: Non-Inverted PWM
                 ; 0000 0124 // Noise Canceler: Off
                 ; 0000 0125 // Input Capture on Falling Edge
                 ; 0000 0126 // Timer Period: 0,046115 ms
                 ; 0000 0127 // Output Pulse(s):
                 ; 0000 0128 // OC1A Period: 0,046115 ms Width: 0 us
                 ; 0000 0129 // OC1B Period: 0,046115 ms Width: 0 us
                 ; 0000 012A // Timer1 Overflow Interrupt: Off
                 ; 0000 012B // Input Capture Interrupt: Off
                 ; 0000 012C // Compare A Match Interrupt: Off
                 ; 0000 012D // Compare B Match Interrupt: Off
                 ; 0000 012E // TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (1<<WGM10);
                 ; 0000 012F // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
                 ; 0000 0130 // TCNT1H=0x00;
                 ; 0000 0131 // TCNT1L=0x00;
                 ; 0000 0132 // ICR1H=0x00;
                 ; 0000 0133 // ICR1L=0x00;
                 ; 0000 0134 // OCR1AH=0x00;
                 ; 0000 0135 // OCR1AL=0x00;
                 ; 0000 0136 // OCR1BH=0x00;
                 ; 0000 0137 // OCR1BL=0x00;
                 ; 0000 0138 
                 ; 0000 0139 // Timer/Counter 1 initialization
                 ; 0000 013A // Clock source: System Clock
                 ; 0000 013B // Clock value: 11059,200 kHz
                 ; 0000 013C // Mode: Ph. correct PWM top=0x00FF
                 ; 0000 013D // OC1A output: Non-Inverted PWM
                 ; 0000 013E // OC1B output: Inverted PWM
                 ; 0000 013F // Noise Canceler: Off
                 ; 0000 0140 // Input Capture on Falling Edge
                 ; 0000 0141 // Timer Period: 0,046115 ms
                 ; 0000 0142 // Output Pulse(s):
                 ; 0000 0143 // OC1A Period: 0,046115 ms Width: 0 us
                 ; 0000 0144 // OC1B Period: 0,046115 ms Width: 0,046115 ms
                 ; 0000 0145 // Timer1 Overflow Interrupt: Off
                 ; 0000 0146 // Input Capture Interrupt: Off
                 ; 0000 0147 // Compare A Match Interrupt: Off
                 ; 0000 0148 // Compare B Match Interrupt: Off
                 ; 0000 0149 TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (1<<WGM10);
00028c ebe1      	LDI  R30,LOW(177)
00028d 93e0 0080 	STS  128,R30
                 ; 0000 014A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
00028f e0e1      	LDI  R30,LOW(1)
000290 93e0 0081 	STS  129,R30
                 ; 0000 014B TCNT1H=0x00;
000292 e0e0      	LDI  R30,LOW(0)
000293 93e0 0085 	STS  133,R30
                 ; 0000 014C TCNT1L=0x00;
000295 93e0 0084 	STS  132,R30
                 ; 0000 014D ICR1H=0x00;
000297 93e0 0087 	STS  135,R30
                 ; 0000 014E ICR1L=0x00;
000299 93e0 0086 	STS  134,R30
                 ; 0000 014F OCR1AH=0x00;
00029b 93e0 0089 	STS  137,R30
                 ; 0000 0150 OCR1AL=0x00;
00029d 93e0 0088 	STS  136,R30
                 ; 0000 0151 OCR1BH=0x00;
00029f 93e0 008b 	STS  139,R30
                 ; 0000 0152 OCR1BL=0x00;
0002a1 93e0 008a 	STS  138,R30
                 ; 0000 0153 
                 ; 0000 0154 // Timer/Counter 2 initialization
                 ; 0000 0155 // Clock source: System Clock
                 ; 0000 0156 // Clock value: 43,200 kHz
                 ; 0000 0157 // Mode: Normal top=0xFF
                 ; 0000 0158 // OC2A output: Disconnected
                 ; 0000 0159 // OC2B output: Disconnected
                 ; 0000 015A // Timer Period: 3,0093 ms
                 ; 0000 015B ASSR=(0<<EXCLK) | (0<<AS2);
0002a3 93e0 00b6 	STS  182,R30
                 ; 0000 015C TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0002a5 93e0 00b0 	STS  176,R30
                 ; 0000 015D TCCR2B=(0<<WGM22) | (1<<CS22) | (1<<CS21) | (0<<CS20);
0002a7 e0e6      	LDI  R30,LOW(6)
0002a8 93e0 00b1 	STS  177,R30
                 ; 0000 015E TCNT2=0x7E;
0002aa e7ee      	LDI  R30,LOW(126)
0002ab 93e0 00b2 	STS  178,R30
                 ; 0000 015F OCR2A=0x00;
0002ad e0e0      	LDI  R30,LOW(0)
0002ae 93e0 00b3 	STS  179,R30
                 ; 0000 0160 OCR2B=0x00;
0002b0 93e0 00b4 	STS  180,R30
                 ; 0000 0161 
                 ; 0000 0162 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0163 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0002b2 93e0 006e 	STS  110,R30
                 ; 0000 0164 
                 ; 0000 0165 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0166 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0002b4 93e0 006f 	STS  111,R30
                 ; 0000 0167 
                 ; 0000 0168 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0169 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (1<<TOIE2);
0002b6 e0e1      	LDI  R30,LOW(1)
0002b7 93e0 0070 	STS  112,R30
                 ; 0000 016A 
                 ; 0000 016B // External Interrupt(s) initialization
                 ; 0000 016C // INT0: Off
                 ; 0000 016D // INT1: Off
                 ; 0000 016E // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 016F // Interrupt on any change on pins PCINT8-14: Off
                 ; 0000 0170 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0171 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 93e0 0069 	STS  105,R30
                 ; 0000 0172 EIMSK=(0<<INT1) | (0<<INT0);
0002bc bbed      	OUT  0x1D,R30
                 ; 0000 0173 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0002bd 93e0 0068 	STS  104,R30
                 ; 0000 0174 
                 ; 0000 0175 // USART initialization
                 ; 0000 0176 // USART disabled
                 ; 0000 0177 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0002bf 93e0 00c1 	STS  193,R30
                 ; 0000 0178 
                 ; 0000 0179 // Analog Comparator initialization
                 ; 0000 017A // Analog Comparator: Off
                 ; 0000 017B // The Analog Comparator's positive input is
                 ; 0000 017C // connected to the AIN0 pin
                 ; 0000 017D // The Analog Comparator's negative input is
                 ; 0000 017E // connected to the AIN1 pin
                 ; 0000 017F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0002c1 e8e0      	LDI  R30,LOW(128)
0002c2 bfe0      	OUT  0x30,R30
                 ; 0000 0180 // Digital input buffer on AIN0: On
                 ; 0000 0181 // Digital input buffer on AIN1: On
                 ; 0000 0182 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0002c3 e0e0      	LDI  R30,LOW(0)
0002c4 93e0 007f 	STS  127,R30
                 ; 0000 0183 
                 ; 0000 0184 // // ADC initialization
                 ; 0000 0185 // // ADC Clock frequency: 691.200 kHz
                 ; 0000 0186 // // ADC Voltage Reference: AREF pin
                 ; 0000 0187 // // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0188 // // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0189 // // ADC4: On, ADC5: On
                 ; 0000 018A // DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
                 ; 0000 018B // ADMUX=ADC_VREF_TYPE;
                 ; 0000 018C // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
                 ; 0000 018D // ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 018E // ADC initialization
                 ; 0000 018F // ADC Clock frequency: 691,200 kHz
                 ; 0000 0190 // ADC Voltage Reference: Int., cap. on AREF
                 ; 0000 0191 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0192 // Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0193 // ADC4: On, ADC5: On
                 ; 0000 0194 DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (0<<ADC0D);
0002c6 93e0 007e 	STS  126,R30
                 ; 0000 0195 ADMUX=ADC_VREF_TYPE;
0002c8 ece0      	LDI  R30,LOW(192)
0002c9 93e0 007c 	STS  124,R30
                 ; 0000 0196 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0002cb e8e4      	LDI  R30,LOW(132)
0002cc 93e0 007a 	STS  122,R30
                 ; 0000 0197 ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0002ce e0e0      	LDI  R30,LOW(0)
0002cf 93e0 007b 	STS  123,R30
                 ; 0000 0198 
                 ; 0000 0199 
                 ; 0000 019A // SPI initialization
                 ; 0000 019B // SPI disabled
                 ; 0000 019C SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0002d1 bdec      	OUT  0x2C,R30
                 ; 0000 019D 
                 ; 0000 019E // TWI initialization
                 ; 0000 019F // TWI disabled
                 ; 0000 01A0 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0002d2 93e0 00bc 	STS  188,R30
                 ; 0000 01A1 // Global enable interrupts
                 ; 0000 01A2 #asm("sei")
0002d4 9478      	sei
                 ; 0000 01A3 
                 ; 0000 01A4 // ADE7753_INIT();
                 ; 0000 01A5 for(Uc_Buff_Count = 0; Uc_Buff_Count < NUM_SAMPLE; Uc_Buff_Count++)
0002d5 24aa      	CLR  R10
                 _0x33:
0002d6 e1ee      	LDI  R30,LOW(30)
0002d7 16ae      	CP   R10,R30
0002d8 f4d0      	BRSH _0x34
                 ; 0000 01A6 {
                 ; 0000 01A7     Ul_Voltage_Buff[Uc_Buff_Count] = 0;
0002d9 2dea      	MOV  R30,R10
0002da e0a4      	LDI  R26,LOW(_Ul_Voltage_Buff)
0002db e0b2      	LDI  R27,HIGH(_Ul_Voltage_Buff)
0002dc e0f0      	LDI  R31,0
0002dd d33a      	RCALL __LSLW2
0002de 0fae      	ADD  R26,R30
0002df 1fbf      	ADC  R27,R31
                +
0002e0 e0e0     +LDI R30 , LOW ( 0x0 )
0002e1 e0f0     +LDI R31 , HIGH ( 0x0 )
0002e2 e060     +LDI R22 , BYTE3 ( 0x0 )
0002e3 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002e4 d3b1      	RCALL __PUTDP1
                 ; 0000 01A8     Ul_Current_Buff[Uc_Buff_Count] = 0;
0002e5 2dea      	MOV  R30,R10
0002e6 e7ac      	LDI  R26,LOW(_Ul_Current_Buff)
0002e7 e0b2      	LDI  R27,HIGH(_Ul_Current_Buff)
0002e8 e0f0      	LDI  R31,0
0002e9 d32e      	RCALL __LSLW2
0002ea 0fae      	ADD  R26,R30
0002eb 1fbf      	ADC  R27,R31
                +
0002ec e0e0     +LDI R30 , LOW ( 0x0 )
0002ed e0f0     +LDI R31 , HIGH ( 0x0 )
0002ee e060     +LDI R22 , BYTE3 ( 0x0 )
0002ef e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0002f0 d3a5      	RCALL __PUTDP1
                 ; 0000 01A9 }
0002f1 94a3      	INC  R10
0002f2 cfe3      	RJMP _0x33
                 _0x34:
                 ; 0000 01AA Uc_Buff_Count = 0;
0002f3 24aa      	CLR  R10
                 ; 0000 01AB delay_ms(3000);
0002f4 eba8      	LDI  R26,LOW(3000)
0002f5 e0bb      	LDI  R27,HIGH(3000)
0002f6 d219      	RCALL _delay_ms
                 ; 0000 01AC BUZZER_ON;
0002f7 9a45      	SBI  0x8,5
                 ; 0000 01AD delay_ms(100);
0002f8 e6a4      	LDI  R26,LOW(100)
0002f9 e0b0      	LDI  R27,0
0002fa d215      	RCALL _delay_ms
                 ; 0000 01AE BUZZER_OFF;
0002fb 9845      	CBI  0x8,5
                 ; 0000 01AF delay_ms(100);
0002fc e6a4      	LDI  R26,LOW(100)
0002fd e0b0      	LDI  R27,0
0002fe d211      	RCALL _delay_ms
                 ; 0000 01B0 BUZZER_ON;
0002ff 9a45      	SBI  0x8,5
                 ; 0000 01B1 delay_ms(100);
000300 e6a4      	LDI  R26,LOW(100)
000301 e0b0      	LDI  R27,0
000302 d20d      	RCALL _delay_ms
                 ; 0000 01B2 BUZZER_OFF;
000303 9845      	CBI  0x8,5
                 ; 0000 01B3 while (1)
                 _0x3D:
                 ; 0000 01B4       {
                 ; 0000 01B5       // Place your code here
                 ; 0000 01B6         if(Bit_En_Meas)
000304 9bf2      	SBIS 0x1E,2
000305 c002      	RJMP _0x40
                 ; 0000 01B7         {
                 ; 0000 01B8                 Bit_En_Meas = 0;
000306 98f2      	CBI  0x1E,2
                 ; 0000 01B9                 READ_CURRENT_INFO();
000307 dde9      	RCALL _READ_CURRENT_INFO
                 ; 0000 01BA         }
                 ; 0000 01BB         CONTROL_VOLTAGE();
                 _0x40:
000308 ddcf      	RCALL _CONTROL_VOLTAGE
                 ; 0000 01BC         if(Bit_Led2_Warning == 1)
000309 9bf1      	SBIS 0x1E,1
00030a c007      	RJMP _0x43
                 ; 0000 01BD         {
                 ; 0000 01BE             if(Uc_Buzzer_Count < SPEED_BUZZER/2)   BUZZER_ON;
00030b e6e4      	LDI  R30,LOW(100)
00030c 169e      	CP   R9,R30
00030d f410      	BRSH _0x44
00030e 9a45      	SBI  0x8,5
                 ; 0000 01BF             else    BUZZER_OFF;
00030f c001      	RJMP _0x47
                 _0x44:
000310 9845      	CBI  0x8,5
                 ; 0000 01C0         }
                 _0x47:
                 ; 0000 01C1         else    BUZZER_OFF;
000311 c001      	RJMP _0x4A
                 _0x43:
000312 9845      	CBI  0x8,5
                 ; 0000 01C2       }
                 _0x4A:
000313 cff0      	RJMP _0x3D
                 ; 0000 01C3 }
                 _0x4D:
000314 cfff      	RJMP _0x4D
                 ; .FEND
                 ;#include "ADE7753.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;#include "delay.h"
                 ;#include "scan_led.h"
                 ;
                 ;
                 ;void    SPI_7753_SEND(unsigned char data)
                 ; 0001 0007 {
                 
                 	.CSEG
                 _SPI_7753_SEND:
                 ; .FSTART _SPI_7753_SEND
                 ; 0001 0008     unsigned char   cnt;
                 ; 0001 0009     unsigned char   tmp = data;
                 ; 0001 000A 
                 ; 0001 000B     for(cnt = 0;cnt < 8; cnt++)
000315 93aa      	ST   -Y,R26
000316 d392      	RCALL __SAVELOCR2
                 ;	data -> Y+2
                 ;	cnt -> R17
                 ;	tmp -> R16
000317 810a      	LDD  R16,Y+2
000318 e010      	LDI  R17,LOW(0)
                 _0x20004:
000319 3018      	CPI  R17,8
00031a f4a0      	BRSH _0x20005
                 ; 0001 000C     {
                 ; 0001 000D         if((tmp & 0x80) == 0x80)   SPI_MOSI_HIGHT;
00031b 2fe0      	MOV  R30,R16
00031c 78e0      	ANDI R30,LOW(0x80)
00031d 38e0      	CPI  R30,LOW(0x80)
00031e f411      	BRNE _0x20006
00031f 9a5d      	SBI  0xB,5
                 ; 0001 000E         else SPI_MOSI_LOW;
000320 c001      	RJMP _0x20009
                 _0x20006:
000321 985d      	CBI  0xB,5
                 ; 0001 000F 
                 ; 0001 0010         SPI_SCK_HIGHT;
                 _0x20009:
000322 9a5f      	SBI  0xB,7
                 ; 0001 0011         delay_us(50);
                +
000323 ef8a     +LDI R24 , LOW ( 250 )
000324 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000325 9701     +SBIW R24 , 1
000326 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
                 ; 0001 0012         SPI_SCK_LOW;
000327 985f      	CBI  0xB,7
                 ; 0001 0013         delay_us(50);
                +
000328 ef8a     +LDI R24 , LOW ( 250 )
000329 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00032a 9701     +SBIW R24 , 1
00032b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
                 ; 0001 0014         tmp <<= 1;
00032c 0f00      	LSL  R16
                 ; 0001 0015     }
00032d 5f1f      	SUBI R17,-1
00032e cfea      	RJMP _0x20004
                 _0x20005:
                 ; 0001 0016 }
00032f d380      	RCALL __LOADLOCR2
000330 c1dd      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;unsigned char    SPI_7753_RECEIVE(void)
                 ; 0001 0019 {
                 _SPI_7753_RECEIVE:
                 ; .FSTART _SPI_7753_RECEIVE
                 ; 0001 001A     unsigned char cnt;
                 ; 0001 001B     unsigned char data;
                 ; 0001 001C     data = 0;
000331 d377      	RCALL __SAVELOCR2
                 ;	cnt -> R17
                 ;	data -> R16
000332 e000      	LDI  R16,LOW(0)
                 ; 0001 001D     for(cnt = 0;cnt < 8; cnt++)
000333 e010      	LDI  R17,LOW(0)
                 _0x20011:
000334 3018      	CPI  R17,8
000335 f478      	BRSH _0x20012
                 ; 0001 001E     {
                 ; 0001 001F         data <<= 1;
000336 0f00      	LSL  R16
                 ; 0001 0020         SPI_SCK_HIGHT;
000337 9a5f      	SBI  0xB,7
                 ; 0001 0021         delay_us(50);
                +
000338 ef8a     +LDI R24 , LOW ( 250 )
000339 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
00033a 9701     +SBIW R24 , 1
00033b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
                 ; 0001 0022         if(SPI_MISO_HIGHT)
00033c 994e      	SBIC 0x9,6
                 ; 0001 0023         {
                 ; 0001 0024             data += 1;
00033d 5f0f      	SUBI R16,-LOW(1)
                 ; 0001 0025         }
                 ; 0001 0026         SPI_SCK_LOW;
00033e 985f      	CBI  0xB,7
                 ; 0001 0027         delay_us(50);
                +
00033f ef8a     +LDI R24 , LOW ( 250 )
000340 e090     +LDI R25 , HIGH ( 250 )
                +__DELAY_USW_LOOP :
000341 9701     +SBIW R24 , 1
000342 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 250
                 ; 0001 0028     }
000343 5f1f      	SUBI R17,-1
000344 cfef      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0029     return data;
000345 2fe0      	MOV  R30,R16
                 _0x2000002:
000346 9109      	LD   R16,Y+
000347 9119      	LD   R17,Y+
000348 9508      	RET
                 ; 0001 002A }
                 ; .FEND
                 ;
                 ;void    ADE7753_WRITE(unsigned char IC_CS,unsigned char addr,unsigned char num_data,unsigned char data_1,unsigned char d ...
                 ; 0001 002D {
                 ; 0001 002E     unsigned char data[4];
                 ; 0001 002F     unsigned char   i;
                 ; 0001 0030     data[0] = data_1;
                 ;	IC_CS -> Y+10
                 ;	addr -> Y+9
                 ;	num_data -> Y+8
                 ;	data_1 -> Y+7
                 ;	data_2 -> Y+6
                 ;	data_3 -> Y+5
                 ;	data -> Y+1
                 ;	i -> R17
                 ; 0001 0031     data[1] = data_2;
                 ; 0001 0032     data[2] = data_3;
                 ; 0001 0033 
                 ; 0001 0034     switch (IC_CS)
                 ; 0001 0035     {
                 ; 0001 0036         case 1:
                 ; 0001 0037         {
                 ; 0001 0038             PHASE_1_ON;
                 ; 0001 0039             PHASE_2_OFF;
                 ; 0001 003A             PHASE_3_OFF;
                 ; 0001 003B             break;
                 ; 0001 003C         }
                 ; 0001 003D         case 2:
                 ; 0001 003E         {
                 ; 0001 003F             PHASE_1_OFF;
                 ; 0001 0040             PHASE_2_ON;
                 ; 0001 0041             PHASE_3_OFF;
                 ; 0001 0042             break;
                 ; 0001 0043         }
                 ; 0001 0044         case 3:
                 ; 0001 0045         {
                 ; 0001 0046             PHASE_1_OFF;
                 ; 0001 0047             PHASE_2_OFF;
                 ; 0001 0048             PHASE_3_ON;
                 ; 0001 0049             break;
                 ; 0001 004A         }
                 ; 0001 004B     }
                 ; 0001 004C     addr &= 0x3F;
                 ; 0001 004D     addr |= 0x80;
                 ; 0001 004E     delay_us(100);
                 ; 0001 004F     SPI_7753_SEND(addr);
                 ; 0001 0050     delay_us(100);
                 ; 0001 0051     for(i=0;i<num_data;i++)    SPI_7753_SEND(data[i]);
                 ; 0001 0052 delay_us(100);
                 ; 0001 0053     PHASE_1_OFF;
                 ; 0001 0054     PHASE_2_OFF;
                 ; 0001 0055     PHASE_3_OFF;
                 ; 0001 0056 }
                 ;unsigned long int    ADE7753_READ(unsigned char IC_CS,unsigned char addr,unsigned char num_data)
                 ; 0001 0058 {
                 _ADE7753_READ:
                 ; .FSTART _ADE7753_READ
                 ; 0001 0059     unsigned char   i;
                 ; 0001 005A     unsigned char   data[4];
                 ; 0001 005B     unsigned long int res;
                 ; 0001 005C     for(i=0;i<4;i++)    data[i] = 0;
000349 93aa      	ST   -Y,R26
00034a 9728      	SBIW R28,8
00034b 931a      	ST   -Y,R17
                 ;	IC_CS -> Y+11
                 ;	addr -> Y+10
                 ;	num_data -> Y+9
                 ;	i -> R17
                 ;	data -> Y+5
                 ;	res -> Y+1
00034c e010      	LDI  R17,LOW(0)
                 _0x2003A:
00034d 3014      	CPI  R17,4
00034e f450      	BRSH _0x2003B
00034f 2fe1      	MOV  R30,R17
000350 e0f0      	LDI  R31,0
000351 01de      	MOVW R26,R28
000352 9615      	ADIW R26,5
000353 0fae      	ADD  R26,R30
000354 1fbf      	ADC  R27,R31
000355 e0e0      	LDI  R30,LOW(0)
000356 93ec      	ST   X,R30
000357 5f1f      	SUBI R17,-1
000358 cff4      	RJMP _0x2003A
                 _0x2003B:
                 ; 0001 005D switch (IC_CS)
000359 85eb      	LDD  R30,Y+11
00035a e0f0      	LDI  R31,0
                 ; 0001 005E     {
                 ; 0001 005F         case 1:
00035b 30e1      	CPI  R30,LOW(0x1)
00035c e0a0      	LDI  R26,HIGH(0x1)
00035d 07fa      	CPC  R31,R26
00035e f421      	BRNE _0x2003F
                 ; 0001 0060         {
                 ; 0001 0061             PHASE_1_ON;
00035f 9828      	CBI  0x5,0
                 ; 0001 0062             PHASE_2_OFF;
000360 9a59      	SBI  0xB,1
                 ; 0001 0063             PHASE_3_OFF;
000361 9a59      	SBI  0xB,1
                 ; 0001 0064             break;
000362 c00f      	RJMP _0x2003E
                 ; 0001 0065         }
                 ; 0001 0066         case 2:
                 _0x2003F:
000363 30e2      	CPI  R30,LOW(0x2)
000364 e0a0      	LDI  R26,HIGH(0x2)
000365 07fa      	CPC  R31,R26
000366 f421      	BRNE _0x20046
                 ; 0001 0067         {
                 ; 0001 0068             PHASE_1_OFF;
000367 9a28      	SBI  0x5,0
                 ; 0001 0069             PHASE_2_ON;
000368 9859      	CBI  0xB,1
                 ; 0001 006A             PHASE_3_OFF;
000369 9a59      	SBI  0xB,1
                 ; 0001 006B             break;
00036a c007      	RJMP _0x2003E
                 ; 0001 006C         }
                 ; 0001 006D         case 3:
                 _0x20046:
00036b 30e3      	CPI  R30,LOW(0x3)
00036c e0a0      	LDI  R26,HIGH(0x3)
00036d 07fa      	CPC  R31,R26
00036e f419      	BRNE _0x2003E
                 ; 0001 006E         {
                 ; 0001 006F             PHASE_1_OFF;
00036f 9a28      	SBI  0x5,0
                 ; 0001 0070             PHASE_2_OFF;
000370 9a59      	SBI  0xB,1
                 ; 0001 0071             PHASE_3_ON;
000371 9859      	CBI  0xB,1
                 ; 0001 0072             break;
                 ; 0001 0073         }
                 ; 0001 0074     }
                 _0x2003E:
                 ; 0001 0075     delay_us(100);
                +
000372 ef84     +LDI R24 , LOW ( 500 )
000373 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
000374 9701     +SBIW R24 , 1
000375 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
                 ; 0001 0076     addr &= 0x3F;
000376 85ea      	LDD  R30,Y+10
000377 73ef      	ANDI R30,LOW(0x3F)
000378 87ea      	STD  Y+10,R30
                 ; 0001 0077     SPI_7753_SEND(addr);
000379 85aa      	LDD  R26,Y+10
00037a df9a      	RCALL _SPI_7753_SEND
                 ; 0001 0078     delay_us(100);
                +
00037b ef84     +LDI R24 , LOW ( 500 )
00037c e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
00037d 9701     +SBIW R24 , 1
00037e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
                 ; 0001 0079     for(i=0;i<num_data;i++) data[i] = SPI_7753_RECEIVE();
00037f e010      	LDI  R17,LOW(0)
                 _0x20055:
000380 85e9      	LDD  R30,Y+9
000381 171e      	CP   R17,R30
000382 f470      	BRSH _0x20056
000383 2fe1      	MOV  R30,R17
000384 e0f0      	LDI  R31,0
000385 01de      	MOVW R26,R28
000386 9615      	ADIW R26,5
000387 0fea      	ADD  R30,R26
000388 1ffb      	ADC  R31,R27
000389 93ff      	PUSH R31
00038a 93ef      	PUSH R30
00038b dfa5      	RCALL _SPI_7753_RECEIVE
00038c 91af      	POP  R26
00038d 91bf      	POP  R27
00038e 93ec      	ST   X,R30
00038f 5f1f      	SUBI R17,-1
000390 cfef      	RJMP _0x20055
                 _0x20056:
                 ; 0001 007A delay_us(100);
                +
000391 ef84     +LDI R24 , LOW ( 500 )
000392 e091     +LDI R25 , HIGH ( 500 )
                +__DELAY_USW_LOOP :
000393 9701     +SBIW R24 , 1
000394 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 500
                 ; 0001 007B     PHASE_1_OFF;
000395 9a28      	SBI  0x5,0
                 ; 0001 007C     PHASE_2_OFF;
000396 9a59      	SBI  0xB,1
                 ; 0001 007D     PHASE_3_OFF;
000397 9a59      	SBI  0xB,1
                 ; 0001 007E     res = 0;
000398 e0e0      	LDI  R30,LOW(0)
                +
000399 83e9     +STD Y + 1 , R30
00039a 83ea     +STD Y + 1 + 1 , R30
00039b 83eb     +STD Y + 1 + 2 , R30
00039c 83ec     +STD Y + 1 + 3 , R30
                 	__CLRD1S 1
                 ; 0001 007F     for(i=0;i<num_data;i++)
00039d e010      	LDI  R17,LOW(0)
                 _0x2005E:
00039e 85e9      	LDD  R30,Y+9
00039f 171e      	CP   R17,R30
0003a0 f4f0      	BRSH _0x2005F
                 ; 0001 0080     {
                 ; 0001 0081         res <<= 8;
                +
0003a1 81a9     +LDD R26 , Y + 1
0003a2 81ba     +LDD R27 , Y + 1 + 1
0003a3 818b     +LDD R24 , Y + 1 + 2
0003a4 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0003a5 e0e8      	LDI  R30,LOW(8)
0003a6 d265      	RCALL __LSLD12
                +
0003a7 83e9     +STD Y + 1 , R30
0003a8 83fa     +STD Y + 1 + 1 , R31
0003a9 836b     +STD Y + 1 + 2 , R22
0003aa 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0001 0082         res += data[i];
0003ab 2fe1      	MOV  R30,R17
0003ac e0f0      	LDI  R31,0
0003ad 01de      	MOVW R26,R28
0003ae 9615      	ADIW R26,5
0003af 0fae      	ADD  R26,R30
0003b0 1fbf      	ADC  R27,R31
0003b1 91ec      	LD   R30,X
0003b2 e0f0      	LDI  R31,0
                +
0003b3 81a9     +LDD R26 , Y + 1
0003b4 81ba     +LDD R27 , Y + 1 + 1
0003b5 818b     +LDD R24 , Y + 1 + 2
0003b6 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0003b7 d265      	RCALL __CWD1
0003b8 d23a      	RCALL __ADDD12
                +
0003b9 83e9     +STD Y + 1 , R30
0003ba 83fa     +STD Y + 1 + 1 , R31
0003bb 836b     +STD Y + 1 + 2 , R22
0003bc 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0001 0083     }
0003bd 5f1f      	SUBI R17,-1
0003be cfdf      	RJMP _0x2005E
                 _0x2005F:
                 ; 0001 0084     return res;
                +
0003bf 81e9     +LDD R30 , Y + 1
0003c0 81fa     +LDD R31 , Y + 1 + 1
0003c1 816b     +LDD R22 , Y + 1 + 2
0003c2 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0003c3 8118      	LDD  R17,Y+0
0003c4 962c      	ADIW R28,12
0003c5 9508      	RET
                 ; 0001 0085 }
                 ; .FEND
                 ;
                 ;void    ADE7753_INIT(void)
                 ; 0001 0088 {
                 ; 0001 0089     unsigned long   res;
                 ; 0001 008A     ADE7753_WRITE(1,MODE,0x00,0x00,0x00);
                 ;	res -> Y+0
                 ; 0001 008B     delay_ms(200);
                 ; 0001 008C     ADE7753_WRITE(1,IRQEN,0x00,0x10,0x00);
                 ; 0001 008D     res = ADE7753_READ(1,IRQEN);
                 ; 0001 008E     ADE7753_WRITE(1,RSTSTATUS,0x00,0x00,0x00);
                 ; 0001 008F     delay_ms(200);
                 ; 0001 0090     ADE7753_WRITE(1,SAGLVL,0X2a,0X00,0X00);
                 ; 0001 0091     res = ADE7753_READ(1,SAGLVL);
                 ; 0001 0092     delay_ms(200);
                 ; 0001 0093     ADE7753_WRITE(1,SAGCYC,0XFF,0X00,0X00);
                 ; 0001 0094     res = ADE7753_READ(1,SAGCYC);
                 ; 0001 0095     delay_ms(200);
                 ; 0001 0096 }
                 ;#include "scan_led.h"
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;unsigned char   Uc_led_count = 1;
                 
                 	.DSEG
                 ;unsigned char   Uc_led_data = 0;
                 ;unsigned int    Uint_data_led1 = 0;
                 ;unsigned int    Uint_data_led2 = 0;
                 ;unsigned int    Uint_data_led3 = 0;
                 ;unsigned char   Uc_Select_led=1;
                 ;
                 ;bit   Bit_Led1_Warning = 0;
                 ;bit   Bit_Led2_Warning = 0;
                 ;
                 ;unsigned int   Uint_Warning_Count = 0;
                 ;
                 ;unsigned char   BCDLED[11]={0xEE,0x88,0xB6,0xBC,0xD8,0x7C,0x7E,0xA8,0xFE,0xFC,0x00};
                 ;
                 ;/* Day du lieu quet led qua duong spi_software
                 ;Co thẻ day tu 1 den 3 byte du lieu.
                 ;Du lieu sau khi day ra day du moi tien hanh xuat du lieu
                 ;num_bytes : so byte duoc day ra
                 ;data_first : du lieu dau tien
                 ;data_second: du lieu thu 2
                 ;data_third ; du lieu thu 3
                 ;*/
                 ;void    SEND_DATA_LED(unsigned char num_bytes,unsigned char  byte_first,unsigned char  byte_second,unsigned char  byte_t ...
                 ; 0002 001B {
                 
                 	.CSEG
                 _SEND_DATA_LED:
                 ; .FSTART _SEND_DATA_LED
                 ; 0002 001C     unsigned char   i;
                 ; 0002 001D     unsigned char   data[4];
                 ; 0002 001E     for(i=0;i<4;i++)    data[i] = 0;
0003c6 93aa      	ST   -Y,R26
0003c7 9724      	SBIW R28,4
0003c8 931a      	ST   -Y,R17
                 ;	num_bytes -> Y+8
                 ;	byte_first -> Y+7
                 ;	byte_second -> Y+6
                 ;	byte_third -> Y+5
                 ;	i -> R17
                 ;	data -> Y+1
0003c9 e010      	LDI  R17,LOW(0)
                 _0x40006:
0003ca 3014      	CPI  R17,4
0003cb f450      	BRSH _0x40007
0003cc 2fe1      	MOV  R30,R17
0003cd e0f0      	LDI  R31,0
0003ce 01de      	MOVW R26,R28
0003cf 9611      	ADIW R26,1
0003d0 0fae      	ADD  R26,R30
0003d1 1fbf      	ADC  R27,R31
0003d2 e0e0      	LDI  R30,LOW(0)
0003d3 93ec      	ST   X,R30
0003d4 5f1f      	SUBI R17,-1
0003d5 cff4      	RJMP _0x40006
                 _0x40007:
                 ; 0002 001F data[0] = byte_first;
0003d6 81ef      	LDD  R30,Y+7
0003d7 83e9      	STD  Y+1,R30
                 ; 0002 0020     data[1] = byte_second;
0003d8 81ee      	LDD  R30,Y+6
0003d9 83ea      	STD  Y+2,R30
                 ; 0002 0021     data[2] = byte_third;
0003da 81ed      	LDD  R30,Y+5
0003db 83eb      	STD  Y+3,R30
                 ; 0002 0022 
                 ; 0002 0023     for(i=0;i<(num_bytes - 1);i++)    SPI_SENDBYTE(data[i],0);
0003dc e010      	LDI  R17,LOW(0)
                 _0x40009:
0003dd 85e8      	LDD  R30,Y+8
0003de e0f0      	LDI  R31,0
0003df 9731      	SBIW R30,1
0003e0 2fa1      	MOV  R26,R17
0003e1 e0b0      	LDI  R27,0
0003e2 17ae      	CP   R26,R30
0003e3 07bf      	CPC  R27,R31
0003e4 f464      	BRGE _0x4000A
0003e5 2fe1      	MOV  R30,R17
0003e6 e0f0      	LDI  R31,0
0003e7 01de      	MOVW R26,R28
0003e8 9611      	ADIW R26,1
0003e9 0fae      	ADD  R26,R30
0003ea 1fbf      	ADC  R27,R31
0003eb 91ec      	LD   R30,X
0003ec 93ea      	ST   -Y,R30
0003ed e0a0      	LDI  R26,LOW(0)
0003ee d106      	RCALL _SPI_SENDBYTE
0003ef 5f1f      	SUBI R17,-1
0003f0 cfec      	RJMP _0x40009
                 _0x4000A:
                 ; 0002 0024 SPI_SENDBYTE(data[i],1);
0003f1 2fe1      	MOV  R30,R17
0003f2 e0f0      	LDI  R31,0
0003f3 01de      	MOVW R26,R28
0003f4 9611      	ADIW R26,1
0003f5 0fae      	ADD  R26,R30
0003f6 1fbf      	ADC  R27,R31
0003f7 91ec      	LD   R30,X
0003f8 93ea      	ST   -Y,R30
0003f9 e0a1      	LDI  R26,LOW(1)
0003fa d0fa      	RCALL _SPI_SENDBYTE
                 ; 0002 0025 }
0003fb 8118      	LDD  R17,Y+0
0003fc 9629      	ADIW R28,9
0003fd 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;Ham quet led
                 ;num_led: Thu tu led
                 ;data: Du lieu hien thi tren led.
                 ;*/
                 ;void    SCAN_LED(void)
                 ; 0002 002E {
                 _SCAN_LED:
                 ; .FSTART _SCAN_LED
                 ; 0002 002F     unsigned char   byte1,byte2,byte3;
                 ; 0002 0030     unsigned char    data;
                 ; 0002 0031     unsigned char   bit_left;
                 ; 0002 0032     bit_left = 0x01;
0003fe d2a6      	RCALL __SAVELOCR6
                 ;	byte1 -> R17
                 ;	byte2 -> R16
                 ;	byte3 -> R19
                 ;	data -> R18
                 ;	bit_left -> R21
0003ff e051      	LDI  R21,LOW(1)
                 ; 0002 0033     byte1 = 0;
000400 e010      	LDI  R17,LOW(0)
                 ; 0002 0034     byte2 = 0;
000401 e000      	LDI  R16,LOW(0)
                 ; 0002 0035     byte3 = 0;
000402 e030      	LDI  R19,LOW(0)
                 ; 0002 0036 
                 ; 0002 0037     Uc_Select_led++;
000403 94b3      	INC  R11
                 ; 0002 0038     bit_left <<= (Uc_Select_led-1);
000404 2deb      	MOV  R30,R11
000405 50e1      	SUBI R30,LOW(1)
000406 2fa5      	MOV  R26,R21
000407 d1fc      	RCALL __LSLB12
000408 2f5e      	MOV  R21,R30
                 ; 0002 0039     if(Uc_Select_led > 8)
000409 e0e8      	LDI  R30,LOW(8)
00040a 15eb      	CP   R30,R11
00040b f418      	BRSH _0x4000B
                 ; 0002 003A     {
                 ; 0002 003B         Uc_Select_led = 1;
00040c e0e1      	LDI  R30,LOW(1)
00040d 2ebe      	MOV  R11,R30
                 ; 0002 003C         bit_left = 0x01;
00040e e051      	LDI  R21,LOW(1)
                 ; 0002 003D     }
                 ; 0002 003E     /* 7-seg 1*/
                 ; 0002 003F     data = Uint_data_led1/1000;
                 _0x4000B:
00040f 91a0 0200 	LDS  R26,_Uint_data_led1
000411 91b0 0201 	LDS  R27,_Uint_data_led1+1
000413 eee8      	LDI  R30,LOW(1000)
000414 e0f3      	LDI  R31,HIGH(1000)
000415 d22c      	RCALL __DIVW21U
000416 2f2e      	MOV  R18,R30
                 ; 0002 0040     byte1 = BCDLED[data];
000417 e0f0      	LDI  R31,0
000418 50ea      	SUBI R30,LOW(-_BCDLED)
000419 4ffd      	SBCI R31,HIGH(-_BCDLED)
00041a 8110      	LD   R17,Z
                 ; 0002 0041     if(byte1 & bit_left) byte3 |= 0x20;
00041b 2fe5      	MOV  R30,R21
00041c 23e1      	AND  R30,R17
00041d f009      	BREQ _0x4000C
00041e 6230      	ORI  R19,LOW(32)
                 ; 0002 0042     data = Uint_data_led1/100%10;
                 _0x4000C:
00041f 91a0 0200 	LDS  R26,_Uint_data_led1
000421 91b0 0201 	LDS  R27,_Uint_data_led1+1
000423 e6e4      	LDI  R30,LOW(100)
000424 e0f0      	LDI  R31,HIGH(100)
000425 d21c      	RCALL __DIVW21U
000426 01df      	MOVW R26,R30
000427 e0ea      	LDI  R30,LOW(10)
000428 e0f0      	LDI  R31,HIGH(10)
000429 d255      	RCALL __MODW21U
00042a 2f2e      	MOV  R18,R30
                 ; 0002 0043     byte1 = BCDLED[data];
00042b e0f0      	LDI  R31,0
00042c 50ea      	SUBI R30,LOW(-_BCDLED)
00042d 4ffd      	SBCI R31,HIGH(-_BCDLED)
00042e 8110      	LD   R17,Z
                 ; 0002 0044     if(byte1 & bit_left) byte3 |= 0x40;
00042f 2fe5      	MOV  R30,R21
000430 23e1      	AND  R30,R17
000431 f009      	BREQ _0x4000D
000432 6430      	ORI  R19,LOW(64)
                 ; 0002 0045     data = Uint_data_led1/10%10;
                 _0x4000D:
000433 91a0 0200 	LDS  R26,_Uint_data_led1
000435 91b0 0201 	LDS  R27,_Uint_data_led1+1
000437 e0ea      	LDI  R30,LOW(10)
000438 e0f0      	LDI  R31,HIGH(10)
000439 d208      	RCALL __DIVW21U
00043a 01df      	MOVW R26,R30
00043b e0ea      	LDI  R30,LOW(10)
00043c e0f0      	LDI  R31,HIGH(10)
00043d d241      	RCALL __MODW21U
00043e 2f2e      	MOV  R18,R30
                 ; 0002 0046     byte1 = BCDLED[data];
00043f e0f0      	LDI  R31,0
000440 50ea      	SUBI R30,LOW(-_BCDLED)
000441 4ffd      	SBCI R31,HIGH(-_BCDLED)
000442 8110      	LD   R17,Z
                 ; 0002 0047     byte1 |= 0x01;
000443 6011      	ORI  R17,LOW(1)
                 ; 0002 0048     if(byte1 & bit_left) byte3 |= 0x80;
000444 2fe5      	MOV  R30,R21
000445 23e1      	AND  R30,R17
000446 f009      	BREQ _0x4000E
000447 6830      	ORI  R19,LOW(128)
                 ; 0002 0049     data = Uint_data_led1%10;
                 _0x4000E:
000448 91a0 0200 	LDS  R26,_Uint_data_led1
00044a 91b0 0201 	LDS  R27,_Uint_data_led1+1
00044c e0ea      	LDI  R30,LOW(10)
00044d e0f0      	LDI  R31,HIGH(10)
00044e d230      	RCALL __MODW21U
00044f 2f2e      	MOV  R18,R30
                 ; 0002 004A     byte1 = BCDLED[data];
000450 e0f0      	LDI  R31,0
000451 50ea      	SUBI R30,LOW(-_BCDLED)
000452 4ffd      	SBCI R31,HIGH(-_BCDLED)
000453 8110      	LD   R17,Z
                 ; 0002 004B     if(byte1 & bit_left) byte3 |= 0x10;
000454 2fe5      	MOV  R30,R21
000455 23e1      	AND  R30,R17
000456 f009      	BREQ _0x4000F
000457 6130      	ORI  R19,LOW(16)
                 ; 0002 004C     /* 7-seg 2 */
                 ; 0002 004D     data = Uint_data_led2/1000;
                 _0x4000F:
000458 91a0 0202 	LDS  R26,_Uint_data_led2
00045a 91b0 0203 	LDS  R27,_Uint_data_led2+1
00045c eee8      	LDI  R30,LOW(1000)
00045d e0f3      	LDI  R31,HIGH(1000)
00045e d1e3      	RCALL __DIVW21U
00045f 2f2e      	MOV  R18,R30
                 ; 0002 004E     byte1 = BCDLED[data];
000460 e0f0      	LDI  R31,0
000461 50ea      	SUBI R30,LOW(-_BCDLED)
000462 4ffd      	SBCI R31,HIGH(-_BCDLED)
000463 8110      	LD   R17,Z
                 ; 0002 004F     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000464 9bf1      	SBIS 0x1E,1
000465 c008      	RJMP _0x40011
000466 91a0 02f4 	LDS  R26,_Uint_Warning_Count
000468 91b0 02f5 	LDS  R27,_Uint_Warning_Count+1
00046a 3ca8      	CPI  R26,LOW(0xC8)
00046b e0e0      	LDI  R30,HIGH(0xC8)
00046c 07be      	CPC  R27,R30
00046d f008      	BRLO _0x40012
                 _0x40011:
00046e c002      	RJMP _0x40010
                 _0x40012:
                +
00046f 9110 0300+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0050     if(byte1 & bit_left) byte3 |= 0x08;
                 _0x40010:
000471 2fe5      	MOV  R30,R21
000472 23e1      	AND  R30,R17
000473 f009      	BREQ _0x40013
000474 6038      	ORI  R19,LOW(8)
                 ; 0002 0051     data = Uint_data_led2/100%10;
                 _0x40013:
000475 91a0 0202 	LDS  R26,_Uint_data_led2
000477 91b0 0203 	LDS  R27,_Uint_data_led2+1
000479 e6e4      	LDI  R30,LOW(100)
00047a e0f0      	LDI  R31,HIGH(100)
00047b d1c6      	RCALL __DIVW21U
00047c 01df      	MOVW R26,R30
00047d e0ea      	LDI  R30,LOW(10)
00047e e0f0      	LDI  R31,HIGH(10)
00047f d1ff      	RCALL __MODW21U
000480 2f2e      	MOV  R18,R30
                 ; 0002 0052     byte1 = BCDLED[data];
000481 e0f0      	LDI  R31,0
000482 50ea      	SUBI R30,LOW(-_BCDLED)
000483 4ffd      	SBCI R31,HIGH(-_BCDLED)
000484 8110      	LD   R17,Z
                 ; 0002 0053     byte1 |= 0x01;
000485 6011      	ORI  R17,LOW(1)
                 ; 0002 0054     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
000486 9bf1      	SBIS 0x1E,1
000487 c008      	RJMP _0x40015
000488 91a0 02f4 	LDS  R26,_Uint_Warning_Count
00048a 91b0 02f5 	LDS  R27,_Uint_Warning_Count+1
00048c 3ca8      	CPI  R26,LOW(0xC8)
00048d e0e0      	LDI  R30,HIGH(0xC8)
00048e 07be      	CPC  R27,R30
00048f f008      	BRLO _0x40016
                 _0x40015:
000490 c002      	RJMP _0x40014
                 _0x40016:
                +
000491 9110 0300+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0055     if(byte1 & bit_left) byte3 |= 0x04;
                 _0x40014:
000493 2fe5      	MOV  R30,R21
000494 23e1      	AND  R30,R17
000495 f009      	BREQ _0x40017
000496 6034      	ORI  R19,LOW(4)
                 ; 0002 0056     data = Uint_data_led2/10%10;
                 _0x40017:
000497 91a0 0202 	LDS  R26,_Uint_data_led2
000499 91b0 0203 	LDS  R27,_Uint_data_led2+1
00049b e0ea      	LDI  R30,LOW(10)
00049c e0f0      	LDI  R31,HIGH(10)
00049d d1a4      	RCALL __DIVW21U
00049e 01df      	MOVW R26,R30
00049f e0ea      	LDI  R30,LOW(10)
0004a0 e0f0      	LDI  R31,HIGH(10)
0004a1 d1dd      	RCALL __MODW21U
0004a2 2f2e      	MOV  R18,R30
                 ; 0002 0057     byte1 = BCDLED[data];
0004a3 e0f0      	LDI  R31,0
0004a4 50ea      	SUBI R30,LOW(-_BCDLED)
0004a5 4ffd      	SBCI R31,HIGH(-_BCDLED)
0004a6 8110      	LD   R17,Z
                 ; 0002 0058     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
0004a7 9bf1      	SBIS 0x1E,1
0004a8 c008      	RJMP _0x40019
0004a9 91a0 02f4 	LDS  R26,_Uint_Warning_Count
0004ab 91b0 02f5 	LDS  R27,_Uint_Warning_Count+1
0004ad 3ca8      	CPI  R26,LOW(0xC8)
0004ae e0e0      	LDI  R30,HIGH(0xC8)
0004af 07be      	CPC  R27,R30
0004b0 f008      	BRLO _0x4001A
                 _0x40019:
0004b1 c002      	RJMP _0x40018
                 _0x4001A:
                +
0004b2 9110 0300+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 0059     if(byte1 & bit_left) byte3 |= 0x02;
                 _0x40018:
0004b4 2fe5      	MOV  R30,R21
0004b5 23e1      	AND  R30,R17
0004b6 f009      	BREQ _0x4001B
0004b7 6032      	ORI  R19,LOW(2)
                 ; 0002 005A     data = Uint_data_led2%10;
                 _0x4001B:
0004b8 91a0 0202 	LDS  R26,_Uint_data_led2
0004ba 91b0 0203 	LDS  R27,_Uint_data_led2+1
0004bc e0ea      	LDI  R30,LOW(10)
0004bd e0f0      	LDI  R31,HIGH(10)
0004be d1c0      	RCALL __MODW21U
0004bf 2f2e      	MOV  R18,R30
                 ; 0002 005B     byte1 = BCDLED[data];
0004c0 e0f0      	LDI  R31,0
0004c1 50ea      	SUBI R30,LOW(-_BCDLED)
0004c2 4ffd      	SBCI R31,HIGH(-_BCDLED)
0004c3 8110      	LD   R17,Z
                 ; 0002 005C     if(Bit_Led2_Warning && Uint_Warning_Count < TIME_WARNING_DISPLAY/2)    byte1 = BCDLED[10];
0004c4 9bf1      	SBIS 0x1E,1
0004c5 c008      	RJMP _0x4001D
0004c6 91a0 02f4 	LDS  R26,_Uint_Warning_Count
0004c8 91b0 02f5 	LDS  R27,_Uint_Warning_Count+1
0004ca 3ca8      	CPI  R26,LOW(0xC8)
0004cb e0e0      	LDI  R30,HIGH(0xC8)
0004cc 07be      	CPC  R27,R30
0004cd f008      	BRLO _0x4001E
                 _0x4001D:
0004ce c002      	RJMP _0x4001C
                 _0x4001E:
                +
0004cf 9110 0300+LDS R17 , _BCDLED + ( 10 )
                 	__GETBRMN 17,_BCDLED,10
                 ; 0002 005D     if(byte1 & bit_left) byte3 |= 0x01;
                 _0x4001C:
0004d1 2fe5      	MOV  R30,R21
0004d2 23e1      	AND  R30,R17
0004d3 f009      	BREQ _0x4001F
0004d4 6031      	ORI  R19,LOW(1)
                 ; 0002 005E     bit_left = 0xff - bit_left;
                 _0x4001F:
0004d5 efef      	LDI  R30,LOW(255)
0004d6 1be5      	SUB  R30,R21
0004d7 2f5e      	MOV  R21,R30
                 ; 0002 005F     // SEND_DATA_LED(2,bit_left,byte3,byte2);
                 ; 0002 0060     SEND_DATA_LED(2,byte3,bit_left,byte2);
0004d8 e0e2      	LDI  R30,LOW(2)
0004d9 93ea      	ST   -Y,R30
0004da 933a      	ST   -Y,R19
0004db 935a      	ST   -Y,R21
0004dc 2fa0      	MOV  R26,R16
0004dd dee8      	RCALL _SEND_DATA_LED
                 ; 0002 0061 
                 ; 0002 0062     Uint_Warning_Count++;
0004de efa4      	LDI  R26,LOW(_Uint_Warning_Count)
0004df e0b2      	LDI  R27,HIGH(_Uint_Warning_Count)
0004e0 91ed      	LD   R30,X+
0004e1 91fd      	LD   R31,X+
0004e2 9631      	ADIW R30,1
0004e3 93fe      	ST   -X,R31
0004e4 93ee      	ST   -X,R30
                 ; 0002 0063     if(Uint_Warning_Count > TIME_WARNING_DISPLAY)  Uint_Warning_Count = 0;
0004e5 91a0 02f4 	LDS  R26,_Uint_Warning_Count
0004e7 91b0 02f5 	LDS  R27,_Uint_Warning_Count+1
0004e9 39a1      	CPI  R26,LOW(0x191)
0004ea e0e1      	LDI  R30,HIGH(0x191)
0004eb 07be      	CPC  R27,R30
0004ec f028      	BRLO _0x40020
0004ed e0e0      	LDI  R30,LOW(0)
0004ee 93e0 02f4 	STS  _Uint_Warning_Count,R30
0004f0 93e0 02f5 	STS  _Uint_Warning_Count+1,R30
                 ; 0002 0064 }
                 _0x40020:
0004f2 d1b9      	RCALL __LOADLOCR6
0004f3 9626      	ADIW R28,6
0004f4 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;// void    SELECT_LED(unsigned char num_led,unsigned char    data)
                 ;// {
                 ;//     unsigned char   byte1,byte2,byte3;
                 ;//     byte1 = 0;
                 ;//     byte2 = 0;
                 ;//     byte3 = 0;
                 ;//     switch(num_led)
                 ;//     {
                 ;//         case    1:
                 ;//         {
                 ;//             byte3 = 0x01;
                 ;//             byte2 = 0x01;
                 ;//             break;
                 ;//         }
                 ;//         case    2:
                 ;//         {
                 ;//             byte3 = 0x02;
                 ;//             byte2 = 0x02;
                 ;//             //byte1 = 0x04;
                 ;//             break;
                 ;//         }
                 ;//         case    3:
                 ;//         {
                 ;//             byte3 = 0x04;
                 ;//             byte2 = 0x04;
                 ;//             byte1 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    4:
                 ;//         {
                 ;//             byte3 = 0x08;
                 ;//             byte2 = 0x08;
                 ;//             break;
                 ;//         }
                 ;//         case    5:
                 ;//         {
                 ;//             byte3 = 0x40;
                 ;//             byte2 = 0x80;
                 ;//             break;
                 ;//         }
                 ;//         case    6:
                 ;//         {
                 ;//             byte3 = 0x20;
                 ;//             byte2 = 0x40;
                 ;//             byte1 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    7:
                 ;//         {
                 ;//             byte3 = 0x10;
                 ;//             byte2 = 0x20;
                 ;//             break;
                 ;//         }
                 ;//         case    8:
                 ;//         {
                 ;//             byte3 = 0x80;
                 ;//             byte2 = 0x10;
                 ;//             break;
                 ;//         }
                 ;//         case    9:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x40;
                 ;//             break;
                 ;//         }
                 ;//         case    10:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x20;
                 ;//             byte1 = 0x04;
                 ;//             break;
                 ;//         }
                 ;//         case    11:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x10;
                 ;//             break;
                 ;//         }
                 ;//         case    12:
                 ;//         {
                 ;//             byte3 = 0x00;
                 ;//             byte2 = 0x80;
                 ;//             break;
                 ;//         }
                 ;//     }
                 ;//     switch(data)
                 ;//     {
                 ;//         case    0:
                 ;//         {
                 ;//             byte1 |= 0xB7;
                 ;//             break;
                 ;//         }
                 ;//         case    1:
                 ;//         {
                 ;//             byte1 |= 0x81;
                 ;//             break;
                 ;//         }
                 ;//         case    2:
                 ;//         {
                 ;//             byte1 |= 0x3D;
                 ;//             break;
                 ;//         }
                 ;//         case    3:
                 ;//         {
                 ;//             byte1 |= 0xAD;
                 ;//             break;
                 ;//         }
                 ;//         case    4:
                 ;//         {
                 ;//             byte1 |= 0x8B;
                 ;//             break;
                 ;//         }
                 ;//         case    5:
                 ;//         {
                 ;//             byte1 |= 0xAE;
                 ;//             break;
                 ;//         }
                 ;//         case    6:
                 ;//         {
                 ;//             byte1 |= 0xBE;
                 ;//             break;
                 ;//         }
                 ;//         case    7:
                 ;//         {
                 ;//             byte1 |= 0x85;
                 ;//             break;
                 ;//         }
                 ;//         case    8:
                 ;//         {
                 ;//             byte1 |= 0xBF;
                 ;//             break;
                 ;//         }
                 ;//         case    9:
                 ;//         {
                 ;//             byte1 |= 0xAF;
                 ;//             break;
                 ;//         }
                 ;//     }
                 ;//     SEND_DATA_LED(2,byte1,byte2,byte3);
                 ;// }
                 ;
                 ;// void SCAN_LED(void)
                 ;// {
                 ;//     if(Uc_led_count == 1)   Uc_led_data = Uint_data_led1/1000;
                 ;//     else if(Uc_led_count == 2)   Uc_led_data = (Uint_data_led1/100)%10;
                 ;//     else if(Uc_led_count == 3)   Uc_led_data = (Uint_data_led1/10)%10;
                 ;//     else if(Uc_led_count == 4)   Uc_led_data = (Uint_data_led1%10);
                 ;//     else if(Uc_led_count == 5)   Uc_led_data = Uint_data_led2/1000;
                 ;//     else if(Uc_led_count == 6)   Uc_led_data = (Uint_data_led2/100)%10;
                 ;//     else if(Uc_led_count == 7)   Uc_led_data = (Uint_data_led2/10)%10;
                 ;//     else if(Uc_led_count == 8)   Uc_led_data = (Uint_data_led2%10);
                 ;//     else if(Uc_led_count == 9)   Uc_led_data = Uint_data_led3/1000;
                 ;//     else if(Uc_led_count == 10)   Uc_led_data = (Uint_data_led3/100)%10;
                 ;//     else if(Uc_led_count == 11)   Uc_led_data = (Uint_data_led3/10)%10;
                 ;//     else if(Uc_led_count == 12)   Uc_led_data = (Uint_data_led3%10);
                 ;//     SELECT_LED(Uc_led_count,Uc_led_data);
                 ;//     Uc_led_count++;
                 ;//     if(Uc_led_count > NUM_LED_SCAN*4)    Uc_led_count = 1;
                 ;// }
                 ;#include "SPI_SOFTWARE.h"
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void    SPI_SENDBYTE(unsigned char  data,unsigned char action)
                 ; 0003 0005 {
                 
                 	.CSEG
                 _SPI_SENDBYTE:
                 ; .FSTART _SPI_SENDBYTE
                 ; 0003 0006     unsigned char   i;
                 ; 0003 0007     for(i=0;i<8;i++)
0004f5 93aa      	ST   -Y,R26
0004f6 931a      	ST   -Y,R17
                 ;	data -> Y+2
                 ;	action -> Y+1
                 ;	i -> R17
0004f7 e010      	LDI  R17,LOW(0)
                 _0x60004:
0004f8 3018      	CPI  R17,8
0004f9 f470      	BRSH _0x60005
                 ; 0003 0008     {
                 ; 0003 0009         if((data & 0x80) == 0x80)    DO_SPI_MOSI = 1;
0004fa 81ea      	LDD  R30,Y+2
0004fb 78e0      	ANDI R30,LOW(0x80)
0004fc 38e0      	CPI  R30,LOW(0x80)
0004fd f411      	BRNE _0x60006
0004fe 9a2b      	SBI  0x5,3
                 ; 0003 000A         else    DO_SPI_MOSI = 0;
0004ff c001      	RJMP _0x60009
                 _0x60006:
000500 982b      	CBI  0x5,3
                 ; 0003 000B         data <<= 1;
                 _0x60009:
000501 81ea      	LDD  R30,Y+2
000502 0fee      	LSL  R30
000503 83ea      	STD  Y+2,R30
                 ; 0003 000C         DO_SPI_SCK = 1;
000504 9a2d      	SBI  0x5,5
                 ; 0003 000D         DO_SPI_SCK = 0;
000505 982d      	CBI  0x5,5
                 ; 0003 000E     }
000506 5f1f      	SUBI R17,-1
000507 cff0      	RJMP _0x60004
                 _0x60005:
                 ; 0003 000F     if(action)
000508 81e9      	LDD  R30,Y+1
000509 30e0      	CPI  R30,0
00050a f011      	BREQ _0x60010
                 ; 0003 0010     {
                 ; 0003 0011         DO_SPI_LATCH = 1;
00050b 9a40      	SBI  0x8,0
                 ; 0003 0012         DO_SPI_LATCH = 0;
00050c 9840      	CBI  0x8,0
                 ; 0003 0013     }
                 ; 0003 0014 }
                 _0x60010:
00050d 8118      	LDD  R17,Y+0
                 _0x2000001:
00050e 9623      	ADIW R28,3
00050f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Uint_data_led1:
000200           	.BYTE 0x2
                 _Uint_data_led2:
000202           	.BYTE 0x2
                 _Ul_Voltage_Buff:
000204           	.BYTE 0x78
                 _Ul_Current_Buff:
00027c           	.BYTE 0x78
                 _Uint_Warning_Count:
0002f4           	.BYTE 0x2
                 _BCDLED:
0002f6           	.BYTE 0xB
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000510 9610      	adiw r26,0
000511 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000512 e888     +LDI R24 , LOW ( 0x1388 )
000513 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000514 9701     +SBIW R24 , 1
000515 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000516 95a8      	wdr
000517 9711      	sbiw r26,1
000518 f7c9      	brne __delay_ms0
                 __delay_ms1:
000519 9508      	ret
                 
                 __ROUND_REPACK:
00051a 2355      	TST  R21
00051b f442      	BRPL __REPACK
00051c 3850      	CPI  R21,0x80
00051d f411      	BRNE __ROUND_REPACK0
00051e ffe0      	SBRS R30,0
00051f c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000520 9631      	ADIW R30,1
000521 1f69      	ADC  R22,R25
000522 1f79      	ADC  R23,R25
000523 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000524 e850      	LDI  R21,0x80
000525 2757      	EOR  R21,R23
000526 f411      	BRNE __REPACK0
000527 935f      	PUSH R21
000528 c073      	RJMP __ZERORES
                 __REPACK0:
000529 3f5f      	CPI  R21,0xFF
00052a f031      	BREQ __REPACK1
00052b 0f66      	LSL  R22
00052c 0c00      	LSL  R0
00052d 9557      	ROR  R21
00052e 9567      	ROR  R22
00052f 2f75      	MOV  R23,R21
000530 9508      	RET
                 __REPACK1:
000531 935f      	PUSH R21
000532 2000      	TST  R0
000533 f00a      	BRMI __REPACK2
000534 c073      	RJMP __MAXRES
                 __REPACK2:
000535 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000536 e850      	LDI  R21,0x80
000537 2e19      	MOV  R1,R25
000538 2215      	AND  R1,R21
000539 0f88      	LSL  R24
00053a 1f99      	ROL  R25
00053b 2795      	EOR  R25,R21
00053c 0f55      	LSL  R21
00053d 9587      	ROR  R24
                 
                 __UNPACK1:
00053e e850      	LDI  R21,0x80
00053f 2e07      	MOV  R0,R23
000540 2205      	AND  R0,R21
000541 0f66      	LSL  R22
000542 1f77      	ROL  R23
000543 2775      	EOR  R23,R21
000544 0f55      	LSL  R21
000545 9567      	ROR  R22
000546 9508      	RET
                 
                 __CFD1U:
000547 9468      	SET
000548 c001      	RJMP __CFD1U0
                 __CFD1:
000549 94e8      	CLT
                 __CFD1U0:
00054a 935f      	PUSH R21
00054b dff2      	RCALL __UNPACK1
00054c 3870      	CPI  R23,0x80
00054d f018      	BRLO __CFD10
00054e 3f7f      	CPI  R23,0xFF
00054f f408      	BRCC __CFD10
000550 c04b      	RJMP __ZERORES
                 __CFD10:
000551 e156      	LDI  R21,22
000552 1b57      	SUB  R21,R23
000553 f4aa      	BRPL __CFD11
000554 9551      	NEG  R21
000555 3058      	CPI  R21,8
000556 f40e      	BRTC __CFD19
000557 3059      	CPI  R21,9
                 __CFD19:
000558 f030      	BRLO __CFD17
000559 efef      	SER  R30
00055a efff      	SER  R31
00055b ef6f      	SER  R22
00055c e77f      	LDI  R23,0x7F
00055d f977      	BLD  R23,7
00055e c01a      	RJMP __CFD15
                 __CFD17:
00055f 2777      	CLR  R23
000560 2355      	TST  R21
000561 f0b9      	BREQ __CFD15
                 __CFD18:
000562 0fee      	LSL  R30
000563 1fff      	ROL  R31
000564 1f66      	ROL  R22
000565 1f77      	ROL  R23
000566 955a      	DEC  R21
000567 f7d1      	BRNE __CFD18
000568 c010      	RJMP __CFD15
                 __CFD11:
000569 2777      	CLR  R23
                 __CFD12:
00056a 3058      	CPI  R21,8
00056b f028      	BRLO __CFD13
00056c 2fef      	MOV  R30,R31
00056d 2ff6      	MOV  R31,R22
00056e 2f67      	MOV  R22,R23
00056f 5058      	SUBI R21,8
000570 cff9      	RJMP __CFD12
                 __CFD13:
000571 2355      	TST  R21
000572 f031      	BREQ __CFD15
                 __CFD14:
000573 9576      	LSR  R23
000574 9567      	ROR  R22
000575 95f7      	ROR  R31
000576 95e7      	ROR  R30
000577 955a      	DEC  R21
000578 f7d1      	BRNE __CFD14
                 __CFD15:
000579 2000      	TST  R0
00057a f40a      	BRPL __CFD16
00057b d080      	RCALL __ANEGD1
                 __CFD16:
00057c 915f      	POP  R21
00057d 9508      	RET
                 
                 __CDF1U:
00057e 9468      	SET
00057f c001      	RJMP __CDF1U0
                 __CDF1:
000580 94e8      	CLT
                 __CDF1U0:
000581 9730      	SBIW R30,0
000582 4060      	SBCI R22,0
000583 4070      	SBCI R23,0
000584 f0b1      	BREQ __CDF10
000585 2400      	CLR  R0
000586 f026      	BRTS __CDF11
000587 2377      	TST  R23
000588 f412      	BRPL __CDF11
000589 9400      	COM  R0
00058a d071      	RCALL __ANEGD1
                 __CDF11:
00058b 2e17      	MOV  R1,R23
00058c e17e      	LDI  R23,30
00058d 2011      	TST  R1
                 __CDF12:
00058e f032      	BRMI __CDF13
00058f 957a      	DEC  R23
000590 0fee      	LSL  R30
000591 1fff      	ROL  R31
000592 1f66      	ROL  R22
000593 1c11      	ROL  R1
000594 cff9      	RJMP __CDF12
                 __CDF13:
000595 2fef      	MOV  R30,R31
000596 2ff6      	MOV  R31,R22
000597 2d61      	MOV  R22,R1
000598 935f      	PUSH R21
000599 df8a      	RCALL __REPACK
00059a 915f      	POP  R21
                 __CDF10:
00059b 9508      	RET
                 
                 __ZERORES:
00059c 27ee      	CLR  R30
00059d 27ff      	CLR  R31
00059e 2766      	CLR  R22
00059f 2777      	CLR  R23
0005a0 915f      	POP  R21
0005a1 9508      	RET
                 
                 __MINRES:
0005a2 efef      	SER  R30
0005a3 efff      	SER  R31
0005a4 e76f      	LDI  R22,0x7F
0005a5 ef7f      	SER  R23
0005a6 915f      	POP  R21
0005a7 9508      	RET
                 
                 __MAXRES:
0005a8 efef      	SER  R30
0005a9 efff      	SER  R31
0005aa e76f      	LDI  R22,0x7F
0005ab e77f      	LDI  R23,0x7F
0005ac 915f      	POP  R21
0005ad 9508      	RET
                 
                 __DIVF21:
0005ae 935f      	PUSH R21
0005af df86      	RCALL __UNPACK
0005b0 3870      	CPI  R23,0x80
0005b1 f421      	BRNE __DIVF210
0005b2 2011      	TST  R1
                 __DIVF211:
0005b3 f40a      	BRPL __DIVF219
0005b4 cfed      	RJMP __MINRES
                 __DIVF219:
0005b5 cff2      	RJMP __MAXRES
                 __DIVF210:
0005b6 3890      	CPI  R25,0x80
0005b7 f409      	BRNE __DIVF218
                 __DIVF217:
0005b8 cfe3      	RJMP __ZERORES
                 __DIVF218:
0005b9 2401      	EOR  R0,R1
0005ba 9408      	SEC
0005bb 0b97      	SBC  R25,R23
0005bc f41b      	BRVC __DIVF216
0005bd f3d4      	BRLT __DIVF217
0005be 2000      	TST  R0
0005bf cff3      	RJMP __DIVF211
                 __DIVF216:
0005c0 2f79      	MOV  R23,R25
0005c1 931f      	PUSH R17
0005c2 932f      	PUSH R18
0005c3 933f      	PUSH R19
0005c4 934f      	PUSH R20
0005c5 2411      	CLR  R1
0005c6 2711      	CLR  R17
0005c7 2722      	CLR  R18
0005c8 2733      	CLR  R19
0005c9 2744      	CLR  R20
0005ca 2755      	CLR  R21
0005cb e290      	LDI  R25,32
                 __DIVF212:
0005cc 17ae      	CP   R26,R30
0005cd 07bf      	CPC  R27,R31
0005ce 0786      	CPC  R24,R22
0005cf 0741      	CPC  R20,R17
0005d0 f030      	BRLO __DIVF213
0005d1 1bae      	SUB  R26,R30
0005d2 0bbf      	SBC  R27,R31
0005d3 0b86      	SBC  R24,R22
0005d4 0b41      	SBC  R20,R17
0005d5 9408      	SEC
0005d6 c001      	RJMP __DIVF214
                 __DIVF213:
0005d7 9488      	CLC
                 __DIVF214:
0005d8 1f55      	ROL  R21
0005d9 1f22      	ROL  R18
0005da 1f33      	ROL  R19
0005db 1c11      	ROL  R1
0005dc 1faa      	ROL  R26
0005dd 1fbb      	ROL  R27
0005de 1f88      	ROL  R24
0005df 1f44      	ROL  R20
0005e0 959a      	DEC  R25
0005e1 f751      	BRNE __DIVF212
0005e2 01f9      	MOVW R30,R18
0005e3 2d61      	MOV  R22,R1
0005e4 914f      	POP  R20
0005e5 913f      	POP  R19
0005e6 912f      	POP  R18
0005e7 911f      	POP  R17
0005e8 2366      	TST  R22
0005e9 f032      	BRMI __DIVF215
0005ea 0f55      	LSL  R21
0005eb 1fee      	ROL  R30
0005ec 1fff      	ROL  R31
0005ed 1f66      	ROL  R22
0005ee 957a      	DEC  R23
0005ef f243      	BRVS __DIVF217
                 __DIVF215:
0005f0 df29      	RCALL __ROUND_REPACK
0005f1 915f      	POP  R21
0005f2 9508      	RET
                 
                 __ADDD12:
0005f3 0fea      	ADD  R30,R26
0005f4 1ffb      	ADC  R31,R27
0005f5 1f68      	ADC  R22,R24
0005f6 1f79      	ADC  R23,R25
0005f7 9508      	RET
                 
                 __ANEGW1:
0005f8 95f1      	NEG  R31
0005f9 95e1      	NEG  R30
0005fa 40f0      	SBCI R31,0
0005fb 9508      	RET
                 
                 __ANEGD1:
0005fc 95f0      	COM  R31
0005fd 9560      	COM  R22
0005fe 9570      	COM  R23
0005ff 95e1      	NEG  R30
000600 4fff      	SBCI R31,-1
000601 4f6f      	SBCI R22,-1
000602 4f7f      	SBCI R23,-1
000603 9508      	RET
                 
                 __LSLB12:
000604 23ee      	TST  R30
000605 2e0e      	MOV  R0,R30
000606 2fea      	MOV  R30,R26
000607 f019      	BREQ __LSLB12R
                 __LSLB12L:
000608 0fee      	LSL  R30
000609 940a      	DEC  R0
00060a f7e9      	BRNE __LSLB12L
                 __LSLB12R:
00060b 9508      	RET
                 
                 __LSLD12:
00060c 23ee      	TST  R30
00060d 2e0e      	MOV  R0,R30
00060e 01fd      	MOVW R30,R26
00060f 01bc      	MOVW R22,R24
000610 f031      	BREQ __LSLD12R
                 __LSLD12L:
000611 0fee      	LSL  R30
000612 1fff      	ROL  R31
000613 1f66      	ROL  R22
000614 1f77      	ROL  R23
000615 940a      	DEC  R0
000616 f7d1      	BRNE __LSLD12L
                 __LSLD12R:
000617 9508      	RET
                 
                 __LSLW2:
000618 0fee      	LSL  R30
000619 1fff      	ROL  R31
00061a 0fee      	LSL  R30
00061b 1fff      	ROL  R31
00061c 9508      	RET
                 
                 __CWD1:
00061d 2f6f      	MOV  R22,R31
00061e 0f66      	ADD  R22,R22
00061f 0b66      	SBC  R22,R22
000620 2f76      	MOV  R23,R22
000621 9508      	RET
                 
                 __MULD12U:
000622 9f7a      	MUL  R23,R26
000623 2d70      	MOV  R23,R0
000624 9f6b      	MUL  R22,R27
000625 0d70      	ADD  R23,R0
000626 9ff8      	MUL  R31,R24
000627 0d70      	ADD  R23,R0
000628 9fe9      	MUL  R30,R25
000629 0d70      	ADD  R23,R0
00062a 9f6a      	MUL  R22,R26
00062b 2d60      	MOV  R22,R0
00062c 0d71      	ADD  R23,R1
00062d 9ffb      	MUL  R31,R27
00062e 0d60      	ADD  R22,R0
00062f 1d71      	ADC  R23,R1
000630 9fe8      	MUL  R30,R24
000631 0d60      	ADD  R22,R0
000632 1d71      	ADC  R23,R1
000633 2788      	CLR  R24
000634 9ffa      	MUL  R31,R26
000635 2df0      	MOV  R31,R0
000636 0d61      	ADD  R22,R1
000637 1f78      	ADC  R23,R24
000638 9feb      	MUL  R30,R27
000639 0df0      	ADD  R31,R0
00063a 1d61      	ADC  R22,R1
00063b 1f78      	ADC  R23,R24
00063c 9fea      	MUL  R30,R26
00063d 2de0      	MOV  R30,R0
00063e 0df1      	ADD  R31,R1
00063f 1f68      	ADC  R22,R24
000640 1f78      	ADC  R23,R24
000641 9508      	RET
                 
                 __DIVW21U:
000642 2400      	CLR  R0
000643 2411      	CLR  R1
000644 e190      	LDI  R25,16
                 __DIVW21U1:
000645 0faa      	LSL  R26
000646 1fbb      	ROL  R27
000647 1c00      	ROL  R0
000648 1c11      	ROL  R1
000649 1a0e      	SUB  R0,R30
00064a 0a1f      	SBC  R1,R31
00064b f418      	BRCC __DIVW21U2
00064c 0e0e      	ADD  R0,R30
00064d 1e1f      	ADC  R1,R31
00064e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00064f 60a1      	SBR  R26,1
                 __DIVW21U3:
000650 959a      	DEC  R25
000651 f799      	BRNE __DIVW21U1
000652 01fd      	MOVW R30,R26
000653 01d0      	MOVW R26,R0
000654 9508      	RET
                 
                 __DIVW21:
000655 d02c      	RCALL __CHKSIGNW
000656 dfeb      	RCALL __DIVW21U
000657 f40e      	BRTC __DIVW211
000658 df9f      	RCALL __ANEGW1
                 __DIVW211:
000659 9508      	RET
                 
                 __DIVD21U:
00065a 933f      	PUSH R19
00065b 934f      	PUSH R20
00065c 935f      	PUSH R21
00065d 2400      	CLR  R0
00065e 2411      	CLR  R1
00065f 2744      	CLR  R20
000660 2755      	CLR  R21
000661 e230      	LDI  R19,32
                 __DIVD21U1:
000662 0faa      	LSL  R26
000663 1fbb      	ROL  R27
000664 1f88      	ROL  R24
000665 1f99      	ROL  R25
000666 1c00      	ROL  R0
000667 1c11      	ROL  R1
000668 1f44      	ROL  R20
000669 1f55      	ROL  R21
00066a 1a0e      	SUB  R0,R30
00066b 0a1f      	SBC  R1,R31
00066c 0b46      	SBC  R20,R22
00066d 0b57      	SBC  R21,R23
00066e f428      	BRCC __DIVD21U2
00066f 0e0e      	ADD  R0,R30
000670 1e1f      	ADC  R1,R31
000671 1f46      	ADC  R20,R22
000672 1f57      	ADC  R21,R23
000673 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000674 60a1      	SBR  R26,1
                 __DIVD21U3:
000675 953a      	DEC  R19
000676 f759      	BRNE __DIVD21U1
000677 01fd      	MOVW R30,R26
000678 01bc      	MOVW R22,R24
000679 01d0      	MOVW R26,R0
00067a 01ca      	MOVW R24,R20
00067b 915f      	POP  R21
00067c 914f      	POP  R20
00067d 913f      	POP  R19
00067e 9508      	RET
                 
                 __MODW21U:
00067f dfc2      	RCALL __DIVW21U
000680 01fd      	MOVW R30,R26
000681 9508      	RET
                 
                 __CHKSIGNW:
000682 94e8      	CLT
000683 fff7      	SBRS R31,7
000684 c002      	RJMP __CHKSW1
000685 df72      	RCALL __ANEGW1
000686 9468      	SET
                 __CHKSW1:
000687 ffb7      	SBRS R27,7
000688 c006      	RJMP __CHKSW2
000689 95a0      	COM  R26
00068a 95b0      	COM  R27
00068b 9611      	ADIW R26,1
00068c f800      	BLD  R0,0
00068d 9403      	INC  R0
00068e fa00      	BST  R0,0
                 __CHKSW2:
00068f 9508      	RET
                 
                 __GETD1P:
000690 91ed      	LD   R30,X+
000691 91fd      	LD   R31,X+
000692 916d      	LD   R22,X+
000693 917c      	LD   R23,X
000694 9713      	SBIW R26,3
000695 9508      	RET
                 
                 __PUTDP1:
000696 93ed      	ST   X+,R30
000697 93fd      	ST   X+,R31
000698 936d      	ST   X+,R22
000699 937c      	ST   X,R23
00069a 9508      	RET
                 
                 __PUTDZ20:
00069b 83a0      	ST   Z,R26
00069c 83b1      	STD  Z+1,R27
00069d 8382      	STD  Z+2,R24
00069e 8393      	STD  Z+3,R25
00069f 9508      	RET
                 
                 __CPD12:
0006a0 17ea      	CP   R30,R26
0006a1 07fb      	CPC  R31,R27
0006a2 0768      	CPC  R22,R24
0006a3 0779      	CPC  R23,R25
0006a4 9508      	RET
                 
                 __SAVELOCR6:
0006a5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006a6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006a7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006a8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006a9 931a      	ST   -Y,R17
0006aa 930a      	ST   -Y,R16
0006ab 9508      	RET
                 
                 __LOADLOCR6:
0006ac 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0006ad 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0006ae 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0006af 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0006b0 8119      	LDD  R17,Y+1
0006b1 8108      	LD   R16,Y
0006b2 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega88P register use summary:
r0 :  52 r1 :  28 r2 :   0 r3 :   0 r4 :   0 r5 :   2 r6 :   2 r7 :   2 
r8 :   2 r9 :   4 r10:  11 r11:   4 r12:   3 r13:   5 r14:   5 r15:   2 
r16:  27 r17: 107 r18:  15 r19:  20 r20:  15 r21:  63 r22:  73 r23:  70 
r24:  60 r25:  40 r26: 194 r27:  92 r28:  35 r29:   1 r30: 415 r31: 172 
x  :  21 y  : 166 z  :  19 
Registers used: 32 out of 35 (91.4%)

ATmega88P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  45 add   :  42 
adiw  :  34 and   :  10 andi  :   4 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  18 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   1 brmi  :   3 brne  :  29 brpl  :   5 brsh  :  21 brtc  :   2 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 cbi   :  15 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  30 
cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 cp    :  14 
cpc   :  19 cpi   :  35 cpse  :   0 dec   :  11 des   :   0 eor   :   4 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 
inc   :   5 ld    :  33 ldd   :  62 ldi   : 261 lds   :  35 lpm   :   7 
lsl   :  18 lsr   :   1 mov   :  85 movw  :  59 mul   :  12 muls  :   0 
mulsu :   0 neg   :   4 nop   :   0 or    :   0 ori   :  13 out   :  21 
pop   :  27 push  :  26 rcall : 114 ret   :  36 reti  :   1 rjmp  :  93 
rol   :  34 ror   :   7 sbc   :   9 sbci  :  14 sbi   :  20 sbic  :   1 
sbis  :   6 sbiw  :  19 sbr   :   2 sbrc  :   0 sbrs  :   3 sec   :   2 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   3 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  52 std   :  52 
sts   :  46 sub   :   5 subi  :  27 swap  :   0 tst   :  12 wdr   :   1 

Instructions used: 73 out of 114 (64.0%)

ATmega88P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d66   3398     32   3430    8192  41.9%
[.dseg] 0x000100 0x000301      0    257    257    1024  25.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
